////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration Towards an Urban Preview - 2UP september 2018             //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Bas van Bemmel
// Function: Read files generated by /Preprocessing/Claims/Scenario/SSPs/SSP%nr%/export_csv_M%/Result

container Scenario
{
	container M1 := 
		for_each_ne(Scenarios/SSP/name, 
			'ReadFiles/MetaInfo('
				+quote(Scenarios/SSP/name+'_POPULATION_2010_2100.csv')+
				','+string(Scenarios/SSP/id)+
				','+quote('M1')+
			')'
		);

	container M3 := 
		for_each_ne(Scenarios/SSP/name, 
			'ReadFiles/MetaInfo('
				+quote(Scenarios/SSP/name+'_POPULATION_2010_2100_'+Input/Variant+'.csv')+
				','+string(Scenarios/SSP/id)+
				','+quote('M3')+
			')'
		);

	container ReadFiles
	{
		template MetaInfo
		{
			// begin of caseparameters
			parameter<String> FileName;
			parameter<uint32> ScenId;
			parameter<string> Method;
			// end of caseparameters

			unit<uint32> FileData:
				StorageName     = "='%projdir%/data/Claim/'+Method+'/'+FileName",
				StorageType     = "gdal.vect",
				StorageReadOnly = "True",
				DialogType      = "Map",
				DialogData      = "PolyData"
			{
				parameter<string>                          Name                 :=Scenarios/SSP/name[ScenId[uint8]];
				attribute<Input/administrative/Countries/Country > Country_rel  := rlookup(Region, Input/administrative/Countries/Country/ISO3);
				attribute<Input/LatLong>           PolyData (polygon)           := Input/administrative/Countries/Country/Geometry[Country_rel];

				attribute<float32> population_to_use_2010_f                     :=population_to_use_2010[float32];
				attribute<float32> urbanpop2010_f                               :=urbanpop2010[float32];
				attribute<float32> urbanpop2010_f_c_org (Input/administrative/Countries/Country ) :=1000000f * rjoin(Input/administrative/Countries/Country/ISO3,Region,urbanpop2010_f);
				attribute<float32> urbanpop2010_f_c (Input/administrative/Countries/Country )     :=MakeDefined(1000000f * rjoin(Input/administrative/Countries/Country/ISO3,Region,urbanpop2010_f),0f);

				attribute<string> Label := Region;

				attribute<uint32>  grid_count  := Input/administrative/Countries/Country/grid_count[ Country_rel ] ;
				attribute<float32> area        := Input/administrative/Countries/Country/area [ Country_rel ];
				//This density is urban population divided by total country area!
				attribute<float32> pop_density := 1000000f * Float32(population_to_use_2010) / area;
			}
		}
	}
}