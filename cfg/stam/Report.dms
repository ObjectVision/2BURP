////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration Towards an Urban Preview - 2UP 2021                       //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Martin van der Beek
// Function: Templates to write tables (unit) to csv-files

container Report
{
	template WriteTable32ToCSV
	{
		// begin case parameters
		unit<uint32> table;
		parameter<string> fieldlist;
		parameter<string> filename;
		// end   case parameters

		container impl: isHidden = "True"
		{
			unit<uint32> Field := range(uint32,0,strcount(fieldlist,';')+1)
			{
				attribute<string> FieldDescr  := ReadArray(fieldlist,.,string,0);
				attribute<UInt32> SepPos      := strpos(FieldDescr, ':');
				attribute<string> Name        := IsDefined(SepPos) ? substr(FieldDescr, 0, SepPos): FieldDescr;
				attribute<string> NameInTable := IsDefined(SepPos) ? substr(FieldDescr, SepPos+1, strlen(FieldDescr)) : FieldDescr;
			}
		}
		parameter<string> Header := AsList(Quote(impl/Field/Name),';');
			
		parameter<string> Body_expr := AsList('AsExprList(table/' + impl/Field/NameInTable + ', id(table))',' +'';''+ ');
		attribute<string> Body (table) := =Body_expr;
		parameter<string> Result := Header + '\n' + AsList(Body+'\n', '')
		,	Storagename = "=filename"
		,	StorageType = "str";
	}

	template WriteTable8ToCSV
	{
		// begin case parameters
		unit<uint8> table;
		parameter<string> fieldlist;
		parameter<string> filename;
		// end   case parameters

		container impl: isHidden = "True"
		{
			unit<uint32> Field := range(uint32,0,strcount(fieldlist,';')+1)
			{
				attribute<string> FieldDescr  := ReadArray(fieldlist,.,string,0);
				attribute<UInt32> SepPos      := strpos(FieldDescr, ':');
				attribute<string> Name        := IsDefined(SepPos) ? substr(FieldDescr, 0, SepPos): FieldDescr;
				attribute<string> NameInTable := IsDefined(SepPos) ? substr(FieldDescr, SepPos+1, strlen(FieldDescr)) : FieldDescr;
			}
		}
		parameter<string> Header := AsList(Quote(impl/Field/Name),';');
			
		parameter<string> Body_expr := AsList('AsExprList(table/' + impl/Field/NameInTable + ', id(table))',' +'';''+ ');
		attribute<string> Body (table) := =Body_expr;
		parameter<string> Result := Header + '\n' + AsList(Body+'\n', '')
		,	Storagename = "=filename"
		,	StorageType = "str";
	}

	template WriteTable8ToCSVTableDoesNotContainFields
	{
		// begin case parameters
		container context;
		unit<uint8> table;
		parameter<string> fieldlist;
		parameter<string> filename;
		// end   case parameters

		container impl: isHidden = "True"
		{
			unit<uint32> Field := range(uint32,0,strcount(fieldlist,';')+1)
			{
				attribute<string> FieldDescr  := ReadArray(fieldlist,.,string,0);
				attribute<UInt32> SepPos      := strpos(FieldDescr, ':');
				attribute<string> Name        := IsDefined(SepPos) ? substr(FieldDescr, 0, SepPos): FieldDescr;
				attribute<string> NameInTable := IsDefined(SepPos) ? substr(FieldDescr, SepPos+1, strlen(FieldDescr)) : FieldDescr;
			}
		}
		parameter<string> Header := AsList(Quote(impl/Field/Name),';');
			
		parameter<string> Body_expr := AsList('AsExprList(context/' + impl/Field/NameInTable + ', id(table))',' +'';''+ ');
		attribute<string> Body (table) := =Body_expr;
		parameter<string> Result := Header + '\n' + AsList(Body+'\n', '')
		,	Storagename = "=filename"
		,	StorageType = "str";
	}
}