////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration Towards an Urban Preview - 2UP 2021                       //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Bas van Bemmel
// Function: reading results for each variable

container CreateIsUrbanCD
{
		attribute<bool> M1(gtopo)    :StorageName="%MondiaalDataDir%/Urban/M_1/IsUrban.tif";
		attribute<bool> M2M3v1(gtopo):StorageName="%MondiaalDataDir%/Urban/M2M3v1/IsUrban.tif";
		attribute<bool> M2M3v2(gtopo):StorageName="%MondiaalDataDir%/Urban/M2M3v2/IsUrban.tif";
		
		attribute<bool> allUrban(gtopo):=M1 || M2M3v1 || M2M3v2;
		
		//voegt niets toe--> Preprocessing/Urban/BuiltUpBoolJRC_50prc/Y%%%%

		attribute<bool> Y1975(gtopo):=/Input/Population/Past/PastDates/Y1975 > 0f ? true : false;
		attribute<bool> Y1990(gtopo):=/Input/Population/Past/PastDates/Y1990 > 0f ? true : false;
		attribute<bool> Y2000(gtopo):=/Input/Population/Past/PastDates/Y2000 > 0f ? true : false;
		attribute<bool> Y2015(gtopo):=/Input/Population/Past/PastDates/Y2015 > 0f ? true : false;


		attribute<bool> allUrbanPast(gtopo):=Y1975 || Y1990 || Y2000 || Y2015;


		unit<uint8> OverlayRegios: nrofrows = 2
		{
			attribute<string> names: ['present', 'past'];
		}
		
		container OverlayGrids
		{
			attribute<uint16> present (gtopo):=allUrban[uint16];
			attribute<uint16> past  (gtopo):= allUrbanPast[uint16];
		}
		
		unit<uint16> allUrbanPastoverlay := overlay(OverlayRegios/names, gtopo, OverlayGrids);

		attribute<bool> AllAll(gtopo):=allUrban || allUrbanPast;

		attribute<uint32> allUrbanNull               (gtopo) :=AllAll ? 1u : 0u/0u;
		attribute<uint32> leftover                   (gtopo) :=allUrbanNull * Input/administrative/Countries/IsNotCountry[uint32];
		attribute<uint32> leftoverOutsideCountry     (gtopo) :=leftover=1u ? 1u : 0u/0u;

		unit<uint32> leftoverOutsideCountrySel := subset(IsDefined(leftoverOutsideCountry))
		{
			attribute<LatLong_mdegrees> Geometry := nr_OrgEntity[LatLong_mdegrees];
			parameter<uint32>  SymbolColor       := rgb(255,0,0)  ,  DialogType = "SymbolColor";
			parameter<meter>   SymbolWorldSize   := 0.0001[meter]     ,  DialogType = "SymbolWorldSize";
			parameter<int16>   SymbolIndex       := 169s,  DialogType = "SymbolIndex";
		}

		container Location2Country  := connect_info(/Input/administrative/Countries/single_polygons/Geometry,leftoverOutsideCountrySel/Geometry[Input/LatLong_mdegrees])
		{
		
			attribute<Input/administrative/Countries/Country> country_rel  (Input/CreateIsUrbanCD/leftoverOutsideCountrySel):= Input/administrative/Countries/single_polygons/nr_OrgEntity[ArcID];
			attribute<string>                                 country_name (Input/CreateIsUrbanCD/leftoverOutsideCountrySel):= Input/administrative/Countries/Country/name[country_rel];
		}
		attribute<Input/administrative/Countries/Country> connected_country_rel  (gtopo):= Location2Country/country_rel[invert(Input/CreateIsUrbanCD/leftoverOutsideCountrySel/nr_OrgEntity)], StorageName = "%LocalDataProjDir%/results/connected_country_rel.tif";

		unit<uint32> Location2CountryConnect  := connect(Input/administrative/Countries/single_polygons/Geometry,leftoverOutsideCountrySel/Geometry[Input/LatLong_mdegrees])
		{
			attribute<Input/LatLong_mdegrees> UnionData (arc)
			{
				parameter<uint32>                PenColor      := rgb(255,0,0),DialogType = "PenColor";
				parameter<float64>               PenWorldWidth := 0.00001[float64],  DialogType = "PenWorldWidth";
			}
		}
	#include <checkcountryurban.dms>
}