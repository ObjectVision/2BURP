////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration Towards an Urban Preview - 2UP 2021                       //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Bas van Bemmel
// Function:

//---------GDP (source: IIASA)---------------------------//
container GDP : using = "units"
{
	parameter<string> GetLatLong := PropValue(Input/LatLong, 'expr');
	parameter<string> GridName   := substr(GetLatLong, (strrpos(GetLatLong, '/'))+1, 40);

	container Data
	{
		unit<uint16> GDPregions
			: StorageName     = "%MondiaalDataDir%/GDP/GDPCap_Region_v5.shp"
			//,  SQLString       = "SELECT * FROM GDPCap_Region_v5 WHERE NAME_0 ='Netherlands' OR NAME_0 ='Belgium' OR NAME_0 ='Luxembourg'"
			, StorageType     = "gdal.vect"
			, url             = "%MondiaalDataDir%/GDP/GDPregion_grid_v5.txt"
			, StorageReadOnly = "True"
			, Source          = ""
			, DialogType      = "Map"
			, DialogData      = "Geometry"
		{
			attribute<uint16>   ID          := id(.);
			attribute<Input/LatLong> Geometry(polygon);
			attribute<Input/LatLong_mdegrees> Geometry_mdegrees       (polygon) := Geometry[Input/LatLong_mdegrees];
			attribute<Input/LatLong_mdegrees> Geometry_mdegrees_clean (polygon) := partitioned_union_polygon(Geometry_mdegrees,id(.));


			attribute<string> Region;
			attribute<string> Name       := Region;
			attribute<string> Label      := Name;
			attribute<uint32> grid_count := pcount(GDPregion_grid);
			attribute<float32> area      := sum(Input/gtopo/lat_factor, GDPregion_grid);

			//Join to ISO3 produces the same result: the source file used is apparently the same -> GADM
			attribute<Input/administrative/Countries/Country > Region_Country_rel := rlookup(NAME_0 ,Input/administrative/Countries/Country/name);
			attribute<USD> REGGDPCAP;
			attribute<kUSD> REGGDPCAPkUSD:=REGGDPCAP[kUSD];
		}

		unit<uint16> TopoRegions := GDPregions
		{
			attribute<Input/LatLong> Geometry(polygon) := GDPregions/Geometry;
			attribute<UInt32> BrushColor := const(0/0, .), DialogType = "BrushColor";
		}

		unit<uint16> EmptyRegions := subset(!GDP/Data/GDPregions/REGGDPCAP > 0f)
		{
			attribute<string> name                                        := GDP/Data/GDPregions/NAME_1[Nr_OrgEntity];
			attribute<Input/administrative/Countries/Country > Region_Country_rel := GDP/Data/GDPregions/Region_Country_rel[Nr_OrgEntity];
		}

		unit<uint32> single_polygons := split_polygon(GDPregions/Geometry_mdegrees_clean)
		{
			attribute<Input/LatLong_mdegrees>    Geometry (poly)
			{
				parameter<uint32>                PenColor      := rgb(255,0,0),DialogType = "PenColor";
				parameter<float64>               PenWorldWidth := 0.00001[float64],  DialogType = "PenWorldWidth";
			}
		}
	}

	attribute<uint16>  GDPregion_grid (Input/gtopo)          := poly2grid(Data/GDPregions/Geometry , Input/gtopo);

	attribute<bool>    IsGDPregion_grid (Input/gtopo)    := GDPregion_grid[int16] > -1s;
	attribute<bool>    IsNotGDPregion_grid (Input/gtopo) := !IsGDPregion_grid;

	unit<uint8> OverlayRegiosAll: nrofrows = 2
	{
		attribute<string> names: ['countryall', 'regionall'];
	}
	container OverlayGridsAll
	{
		attribute<uint16> countryall (Input/gtopo):= Input/administrative/Countries/Country_grid[uint16];
		attribute<uint16> regionall (Input/gtopo):= GDPregion_grid;
	}
	unit<uint32> crcombineAll:= overlay32(OverlayRegiosAll/names, Input/gtopo, OverlayGridsAll);
	
	
	unit<uint8> OverlayRegios: nrofrows = 2
	{
		attribute<string> names: ['country', 'region'];
	}
	container OverlayGrids
	{
		attribute<uint2> country (Input/gtopo):= (Input/administrative/Countries/Country_grid >= 0b ? true : false)[uint2];
		attribute<uint2> region (Input/gtopo):= (GDPregion_grid >= 0w ? true : false)[uint2];
	}
	unit<uint32> crcombine:= overlay32(OverlayRegios/names, Input/gtopo, OverlayGrids);

	#include<CreateIsCountry.dms>
	#include<GDP_Claims.dms>
	#include<GDP_Results.dms>
}