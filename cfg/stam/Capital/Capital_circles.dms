////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration Towards an Urban Preview - 2UP 2021                       //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Bas van Bemmel
// Function: Calculate for area around capital mean pop density

container Capital_Circles: Using = "Units;"
{
	unit<uint8> Pieces : nrofrows = 20
	{
		attribute<uint16> from : [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24 ,26, 28, 30, 32, 34, 36, 38];
		attribute<uint16> to   : [2, 4, 6, 8,10, 12, 14, 16, 18 ,20, 22, 24 ,26, 28, 30, 32, 34, 36, 38, 40];
		attribute<string> name := "from" + string(from) + "_to" + string(to);
	}

	unit<uint32> Capital_Pieces := combine(/Input/administrative/Capital/UN, Pieces)
	{
		attribute<string>  Capital_City      := /Input/administrative/Capital/UN/Capital_City[nr_1];
		attribute<float64> latitude          := /Input/administrative/Capital/UN/latitude[nr_1];
		attribute<string>  Piecename         := Pieces/name[nr_2];
		attribute<string>  Capital_Piecename := Capital_City + " _" + Piecename;
	}

	unit<uint32> SSP_Year_Pieces := combine(Postprocessing/Scenarios/ReadResults/SSP_Year, Pieces)
	{
		attribute<string> SSP_Year_c  := Postprocessing/Scenarios/ReadResults/SSP_Year/name[nr_1]+'/';
		attribute<string> Pieces_c    := Pieces/name[nr_2]+'/';
		attribute<string> SSP_Year_c2 := Postprocessing/Scenarios/ReadResults/SSP_Year/name[nr_1];
		attribute<string> Pieces_c2   := Pieces/name[nr_2];
		attribute<string> name        := SSP_Year_c + Pieces_c;
		attribute<string> name2       := SSP_Year_c2 + "/" + Pieces_c2;
	}

	unit<uint32> SSP_Pieces_Year := combine(Scenarios/SSP, Pieces, Classifications/ProjectionDate)
	{
		attribute<string> SSP_c    := Scenarios/SSP/name[nr_1]+'/';
		attribute<string> Pieces_c := Pieces/name[nr_2]+'/';
		attribute<string> Pieces_c2:= Pieces/name[nr_2];
		attribute<string> Year_c   := Classifications/ProjectionDate/name[nr_3];
		attribute<string> name     := SSP_c + Pieces_c + Year_c;
		
		attribute<string> SSP_Year := SSP_c + Year_c;
	}

	attribute<bool>    Capital  (Input/gtopo) := /Input/administrative/Capital/UN/nrCapitals[float32] > 0f;
	//attribute<float64> latitude (Input/gtopo) := /Input/administrative/Capital/UN/latitude[float64];

	container Circles := 
		for_each_nedv(Pieces/name,
			'/Input/Geography/Distmatrices/impl/pot40km/potrange/EuclideanDistMatr > '+ string(Pieces/from) + 'f && /Input/Geography/Distmatrices/impl/pot40km/potrange/EuclideanDistMatr < '+string(Pieces/to)+'f'
			, /Input/Geography/Distmatrices/impl/pot40km/potrange
			,bool
		);

//two capitals together potential could be 2!
	container CirclesCapital := 
		for_each_nedv(Pieces/name,
			'potential(Capital[float32], Circles/' + Pieces/name + '[float32]) > 0f ? 1f : 0f'
			, Input/gtopo
			,float32
		);

	Template MakeDistrict
	{
		//
		attribute<float32> sourcegrid(Input/gtopo);
		//
		unit<uint32> unit_district := district(sourcegrid[uint32])
		{

			attribute<Input/administrative/Capital/UN>  un_rel := modus(Input/administrative/Capital/UN/un_rel, districts);

			attribute<uint32> id                        := id(.);
			attribute<uint32> joinid                    := id - 1u;
			attribute<string> name                      := replace(Input/administrative/Capital/UN/name[un_rel],',','');
			attribute<string> ISO3                      := Input/administrative/Capital/UN/ISO3[un_rel];
			attribute<string> Capital_City              := replace(Input/administrative/Capital/UN/Capital_City[un_rel],',','');
		}
	}

	container CirclesCapitalDistrict := 
		for_each_ne(Pieces/name,
			'MakeDistrict(CirclesCapital/' + Pieces/name + ')'
		);

	container CirclesCapitalDistrictCor := 
		for_each_nedv(Pieces/name,
			'CirclesCapitalDistrict/' + Pieces/name + '/unit_district/Districts * CirclesCapital/' + Pieces/name + '[uint32]'
			, Input/gtopo
			,uint32
		);

	container UrbanFractionInRing: = 
	for_each_ne(
		Pieces/name,
		'T_UrbanFractionInRing('+quote(string(Pieces/name))+')'
	);

	template T_UrbanFractionInRing
	{
		// template parameters
		parameter<String> itemName;
		// end case parameters

		attribute<fromkm1_tokm2unique> fromkm1_tokm2_Rel(Input/gtopo)          :=='rlookup(CirclesCapitalDistrictCor/' + itemName + ', fromkm1_tokm2unique/values)';

		unit<uint32> fromkm1_tokm2unique :== 'unique(CirclesCapitalDistrictCor/' + itemName + ')'
		{
			attribute<uint32>  number       := pcount(fromkm1_tokm2_Rel);
			attribute<uint32>  number_urban :==' rjoin(values,UrbanInRing/' + itemName + '/fromkm1_tokm2unique/Values,UrbanInRing/' + itemName + '/fromkm1_tokm2unique/number)';
			attribute<float32> urbfr        := number_urban[float32] / number[float32];
			attribute<bool>    urban        := urbfr > 0.5f;
		}
	}

	unit<uint32> all:=UrbanFractionInRing/from0_to2/fromkm1_tokm2unique
	{
		attribute<uint32> nr           :=UrbanFractionInRing/from0_to2/fromkm1_tokm2unique/Values;
		attribute<string> Capital_City :=rjoin(nr,CirclesCapitalDistrict/from0_to2/unit_district/joinid,CirclesCapitalDistrict/from0_to2/unit_district/Capital_City);
		attribute<bool>   urban0_2     :=UrbanFractionInRing/from0_to2/fromkm1_tokm2unique/urban;
		attribute<bool>   urban2_4     :=rjoin(nr,UrbanFractionInRing/from2_to4/fromkm1_tokm2unique/Values,UrbanFractionInRing/from2_to4/fromkm1_tokm2unique/urban);
		attribute<bool>   urban4_6     :=rjoin(nr,UrbanFractionInRing/from4_to6/fromkm1_tokm2unique/Values,UrbanFractionInRing/from4_to6/fromkm1_tokm2unique/urban);
		attribute<bool>   urban6_8     :=rjoin(nr,UrbanFractionInRing/from6_to8/fromkm1_tokm2unique/Values,UrbanFractionInRing/from6_to8/fromkm1_tokm2unique/urban);
		attribute<bool>   urban8_10    :=rjoin(nr,UrbanFractionInRing/from8_to10/fromkm1_tokm2unique/Values,UrbanFractionInRing/from8_to10/fromkm1_tokm2unique/urban);
		
		attribute<bool>   urban10_12   :=rjoin(nr,UrbanFractionInRing/from10_to12/fromkm1_tokm2unique/Values,UrbanFractionInRing/from10_to12/fromkm1_tokm2unique/urban);
		attribute<bool>   urban12_14   :=rjoin(nr,UrbanFractionInRing/from12_to14/fromkm1_tokm2unique/Values,UrbanFractionInRing/from12_to14/fromkm1_tokm2unique/urban);
		attribute<bool>   urban14_16   :=rjoin(nr,UrbanFractionInRing/from14_to16/fromkm1_tokm2unique/Values,UrbanFractionInRing/from14_to16/fromkm1_tokm2unique/urban);
		attribute<bool>   urban16_18   :=rjoin(nr,UrbanFractionInRing/from16_to18/fromkm1_tokm2unique/Values,UrbanFractionInRing/from16_to18/fromkm1_tokm2unique/urban);
		attribute<bool>   urban18_20   :=rjoin(nr,UrbanFractionInRing/from18_to20/fromkm1_tokm2unique/Values,UrbanFractionInRing/from18_to20/fromkm1_tokm2unique/urban);
		
		attribute<bool>   urban20_22   :=rjoin(nr,UrbanFractionInRing/from20_to22/fromkm1_tokm2unique/Values,UrbanFractionInRing/from20_to22/fromkm1_tokm2unique/urban);
		attribute<bool>   urban22_24   :=rjoin(nr,UrbanFractionInRing/from22_to24/fromkm1_tokm2unique/Values,UrbanFractionInRing/from22_to24/fromkm1_tokm2unique/urban);
		attribute<bool>   urban24_26   :=rjoin(nr,UrbanFractionInRing/from24_to26/fromkm1_tokm2unique/Values,UrbanFractionInRing/from24_to26/fromkm1_tokm2unique/urban);
		attribute<bool>   urban26_28   :=rjoin(nr,UrbanFractionInRing/from26_to28/fromkm1_tokm2unique/Values,UrbanFractionInRing/from26_to28/fromkm1_tokm2unique/urban);
		attribute<bool>   urban28_30   :=rjoin(nr,UrbanFractionInRing/from28_to30/fromkm1_tokm2unique/Values,UrbanFractionInRing/from28_to30/fromkm1_tokm2unique/urban);

		
		attribute<bool>   urban30_32   :=rjoin(nr,UrbanFractionInRing/from30_to32/fromkm1_tokm2unique/Values,UrbanFractionInRing/from30_to32/fromkm1_tokm2unique/urban);
		attribute<bool>   urban32_34   :=rjoin(nr,UrbanFractionInRing/from32_to34/fromkm1_tokm2unique/Values,UrbanFractionInRing/from32_to34/fromkm1_tokm2unique/urban);
		attribute<bool>   urban34_36   :=rjoin(nr,UrbanFractionInRing/from34_to36/fromkm1_tokm2unique/Values,UrbanFractionInRing/from34_to36/fromkm1_tokm2unique/urban);
		attribute<bool>   urban36_38   :=rjoin(nr,UrbanFractionInRing/from36_to38/fromkm1_tokm2unique/Values,UrbanFractionInRing/from36_to38/fromkm1_tokm2unique/urban);
		attribute<bool>   urban38_40   :=rjoin(nr,UrbanFractionInRing/from38_to40/fromkm1_tokm2unique/Values,UrbanFractionInRing/from38_to40/fromkm1_tokm2unique/urban);
	}

	container CirclesCapitalUrban := 
		for_each_nedv(Pieces/name,
			'CirclesCapitalDistrictCor/' + Pieces/name + '* /Input/UrbanArea/UrbanArea2010/ReadData[uint32]'
			, Input/gtopo
			,uint32
		);

	container UrbanInRing: = 
	for_each_ne(
		Pieces/name,
		'T_UrbanInRing('+quote('CirclesCapitalUrban/'+string(Pieces/name))+')'
	);
	
	template T_UrbanInRing
	{
		// template parameters
		parameter<String> itemName;
		// end case parameters

		attribute<fromkm1_tokm2unique> fromkm1_tokm2_Rel(Input/gtopo)          :=='rlookup(' + itemName + ', fromkm1_tokm2unique/values)';

		unit<uint32> fromkm1_tokm2unique :== 'unique(' + itemName + ')'
		{
			attribute<uint32> number := pcount(fromkm1_tokm2_Rel);
		}
	
	}

	container popd: =
		for_each_ind(
			   'nedv',
			   SSP_Year_Pieces/name
			,  'CirclesCapital/' + SSP_Year_Pieces/Pieces_c2 + ' * Postprocessing/Scenarios/ReadResults/All/popd/' + SSP_Year_Pieces/SSP_Year_c2
			,  /Postprocessing/Scenarios/ReadResults/All/domainref
			,  Person_km2
		);
		

	container popd2: =
		for_each_ind(
			   'nedv',
			   SSP_Pieces_Year/name
			,  'CirclesCapital/' + SSP_Pieces_Year/Pieces_c2 + ' * Postprocessing/Scenarios/ReadResults/All/popd/' + SSP_Pieces_Year/SSP_Year
			,  /Postprocessing/Scenarios/ReadResults/All/domainref
			,  Person_km2
		);
		
		
		
	container popdNull: =
		for_each_ind(
			   'nedv',
			   SSP_Year_Pieces/name
			,  '(popd/' + SSP_Year_Pieces/name2 + ' > 0f) ? popd/' + SSP_Year_Pieces/name2 + ': 0f/0f'
			,  /Postprocessing/Scenarios/ReadResults/All/domainref
			,  Person_km2
		);
		
	container popdNull2: =
		for_each_ind(
			   'nedv',
			   SSP_Pieces_Year/name
			,  '(popd2/' + SSP_Pieces_Year/name + ' > 0f) ? popd2/' + SSP_Pieces_Year/name + ': 0f/0f'
			,  /Postprocessing/Scenarios/ReadResults/All/domainref
			,  Person_km2
		);

	container meanpopd: =
		for_each_ind(
			   'nedv',
			   SSP_Year_Pieces/name
			,  'popdNull/' + SSP_Year_Pieces/name2 + '[Input/CompactedDomain/gtopo_rel]'
			,  Input/CompactedDomain
			,  Person_km2
		);
		
	container meanpopd2: =
		for_each_ind(
			   'nedv',
			   SSP_Pieces_Year/name
			,  'popdNull2/' + SSP_Pieces_Year/name + '[Input/CompactedDomain/gtopo_rel]'
			,  Input/CompactedDomain
			,  Person_km2
		);

	container meanpopdworld: =
		for_each_ind(
			   'nedv',
			   SSP_Year_Pieces/name
			,  'mean(meanpopd/' + SSP_Year_Pieces/name2 + ',/Input/CompactedDomain/World_rel)'
			,  /Input/administrative/World/world_uq
			,  Person_km2
		);
		
	container meanpopdworld2: =
		for_each_ind(
			   'nedv',
			   SSP_Pieces_Year/name
			,  'mean(meanpopd2/' + SSP_Pieces_Year/name + ',/Input/CompactedDomain/World_rel)'
			,  /Input/administrative/World/world_uq
			,  Person_km2
		);
		
		
		
		
	template Distmatrices_real_distance
	{
		//begin of case parameters
		attribute<km>                               vertical_gridsize(/Input/administrative/Capital/UN);
		attribute<km>                               borderRadius(/Input/administrative/Capital/UN);
		attribute<float64>                          Latitude (/Input/administrative/Capital/UN);
		attribute<Input/gtopo>                      gtopo_rel (/Input/administrative/Capital/UN);
		attribute</Input/administrative/Capital/UN> un_rel (Input/gtopo) := un_rel;
		//end of case parameters

		unit<Float32> Potential;

		attribute<Float32> AspectRatio(/Input/administrative/Capital/UN)         := cos(Float32(pi()) * Latitude[float32] / 180f);
		attribute<km>      horizontal_gridsize (/Input/administrative/Capital/UN):= vertical_gridsize * AspectRatio;
		attribute<float32> vertical_radius(/Input/administrative/Capital/UN)     := borderRadius / vertical_gridsize;
		attribute<float32> horizontal_radius(/Input/administrative/Capital/UN)   := borderRadius / horizontal_gridsize;

		//unit<spoint>       potRange          := range(spoint, point(-int16(vertical_radius), -int16(horizontal_radius)), point(int16(vertical_radius) + int16(1), int16(horizontal_radius) + int16(1)))
		//attribute</Input/administrative/Capital/UN> North      (/Input/administrative/Capital/UN) := gtopo_rel[(Input/gtopo/id) - point(vertical_radius[uint16], 0w, wpoint)];
	}

	container CapLat := 
		for_each_ne(/Input/administrative/Capital/UN/Capital_City_cor,
			//'/Input/Geography/Distmatrices_real_distance/impl/pot40km/potrange/EuclideanDistMatr > '+ string(Pieces/from) + 'f && /Input/Geography/Distmatrices_real_distance/impl/pot40km/potrange/EuclideanDistMatr < '+string(Pieces/to)+'f'
			'Distmatrices_real_distance(value(Input/administrative/Capital/UN/one, km), value(Input/administrative/Capital/UN/forty, km),Input/administrative/Capital/UN/Latitude,Input/administrative/Capital/UN/gtopo_rel,Input/administrative/Capital/UN/un_rel)'
			//, /Input/administrative/Capital/UN
			//,bool
		);//
		
	container Circles_real_distance := 
		for_each_nedv(Capital_Pieces/Capital_Piecename,
			'/Input/Geography/Distmatrices_real_distance/impl/pot40km/potrange/EuclideanDistMatr > '+ string(Pieces/from) + 'f && /Input/Geography/Distmatrices_real_distance/impl/pot40km/potrange/EuclideanDistMatr < '+string(Pieces/to)+'f'
			, /Input/Geography/Distmatrices_real_distance/impl/pot40km/potrange
			,bool
		);
		
}