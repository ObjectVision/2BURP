////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration Towards an Urban Preview - 2UP 2021                       //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Bas van Bemmel
// Function: Calculate for contigious urban area 2100 SSP2 at location of capital (lat,long) the growth from 2010 for capital area and other urban areas in the country

container Capital_Modelled: Using = "Units;"
	{
		unit<uint32> contiguous          := district(Postprocessing/Scenarios/ReadResults/All/urb/SSP2/Y2100)
			, DialogData     = "Districts"
			, DialogType     = "Map"
		{
			attribute<Input/administrative/Capital/UN>  un_rel := modus(Input/administrative/Capital/UN/un_rel, districts);

			attribute<string> name                      := replace(Input/administrative/Capital/UN/name[un_rel],',','');
			attribute<string> ISO3                      := Input/administrative/Capital/UN/ISO3[un_rel];
			attribute<string> Capital_City              := replace(Input/administrative/Capital/UN/Capital_City[un_rel],',','');
			attribute<km2>    km2WCEA                   := Input/administrative/Capital/UN/km2WCEA[un_rel];
			attribute<km2>    area_country              := Input/administrative/Capital/UN/area[un_rel];
			attribute<string> Continent                 := Input/administrative/Capital/UN/Continent[un_rel];
			attribute<bool>   IsIsland                  := Input/administrative/Capital/UN/IsIsland[un_rel];

			attribute<km2>     area                     := sum(Input/gtopo/area,Districts);

			attribute<.> DistrictsNull (Postprocessing/Scenarios/ReadResults/All/domainref)  := Districts = 0u ? (0/0)[uint32] : Districts;

			//districts over countries-border
			attribute<uint8>   CGmean                   := mean(Input/administrative/Countries/Country_grid,DistrictsNull);
			attribute<uint8>   CGmean_org               := mean(Input/administrative/Countries/Country_grid,DistrictsNull);
			attribute<float32> CGmean_float32           := mean(Input/administrative/Countries/Country_grid[float32],DistrictsNull);
			attribute<float32> BorderDistrict           := CGmean[float32] - CGmean_float32;
			attribute<bool>    IsBorderDistrict         := BorderDistrict <> 0f;


			attribute<float32>     fraction_cap_incountry_km2WCEA := div(area,km2WCEA);
			attribute<float32>     fraction_cap_incountry         := div(area,area_country);
		
			attribute<float32> upop_2010     := sum(Postprocessing/Scenarios/ReadResults/All/tpop/SSP2/Y2010[float32],Districts);
			attribute<float32> upop_2100     := sum(Postprocessing/Scenarios/ReadResults/All/tpop/SSP2/Y2100[float32],Districts);

			attribute<km2> urbkm2_2010       := sum(Postprocessing/Scenarios/ReadResults/All/buakm2/SSP2/Y2010,Districts);
			attribute<km2> urbkm2_2100       := sum(Postprocessing/Scenarios/ReadResults/All/buakm2/SSP2/Y2100,Districts);
			
			attribute<float32> change_urbkm2 := contiguous/urbkm2_2100 - contiguous/urbkm2_2010;
			attribute<float32> perc_urbkm2   := (change_urbkm2 / contiguous/urbkm2_2010) * 100f;
	
			attribute<Person_km2> upop_dens_2010  := contiguous/upop_2010[Person] / area;
			attribute<Person_km2> upop_dens_2100  := contiguous/upop_2100[Person] / area;

// 			attribute<float32> pop_2010      := upop_2010 + rpop_2010;
// 			attribute<float32> pop_2100      := upop_2100 + rpop_2100;
// 	
// 			attribute<Person_km2> popdens_2010  := pop_2010 / area; 
// 			attribute<Person_km2> popdens_2100  := pop_2100 / area; 
// 			attribute<Person_km2> popdensdif    := popdens_2100 - popdens_2010;
	
			attribute<float32> change_upop := upop_2100 - upop_2010;
			attribute<float32> perc_upop   := (change_upop / upop_2010) * 100f;

			attribute<contiguous> contiguous_rel (Input/gtopo) := Input/administrative/Capital/UN/nrCapitals == 1 ? Districts : 0/0;
			attribute<km2> area_cap                                    := sum(Input/gtopo/area, contiguous_rel);
		}

		unit<uint32> UC := unique(contiguous/contiguous_rel)
		{
		}

		unit<wpoint> gtopo := Input/gtopo
		{
			//attribute<float32> DistrictsNull(Input/gtopo)     := District_SSP2_Y2080/contiguous/Districts[float32] > 0f ? Results_tot/upop/SSP2/Y2010 : 0f/0f ;
			attribute<uint32>  DistrictOfCap     := rlookup(contiguous/Districts,UC/Values);
			// 0 --> al what is not district (water + rural)
			// missing value all urban area outside capital
			//attribute<bool>    IsUrbanOutsideCapDistrict     := MakeDefined(DistrictOfCap,9999u) > 9998u ? true : false;
			attribute<bool>    IsUrbanOutsideCapDistrict     := DistrictOfCap[int32] > -1i ? false : true;
			attribute<bool>    IsCapDistrict     := !IsUrbanOutsideCapDistrict;
			attribute<bool>    IsNotCapDistrict  := !IsCapDistrict;

			//urban popuplation per country outside districtcapitals
			attribute<float32> upopNotCap_2010 (Input/gtopo)     := Postprocessing/Scenarios/ReadResults/All/tpop/SSP2/Y2010 * IsNotCapDistrict[float32];
			attribute<float32> upopNotCap_2100 (Input/gtopo)     := Postprocessing/Scenarios/ReadResults/All/tpop/SSP2/Y2100 * IsNotCapDistrict[float32];
		}

		unit<uint8> Country := Input/administrative/Countries/Country 
		{
			attribute<string>  ISO3      := Input/administrative/Countries/Country/ISO3;
			attribute<string>  name      := Input/administrative/Countries/Country/name;
			attribute<string>  Continent := Input/administrative/Countries/Country/Continent;
			attribute<bool>    IsIsland  := Input/administrative/Countries/Country/IsIsland;
			attribute<float32> upopNotCap_2010 := sum(gtopo/upopNotCap_2010,Input/administrative/Countries/Country_grid);
			attribute<float32> upopNotCap_2100 := sum(gtopo/upopNotCap_2100,Input/administrative/Countries/Country_grid);
		}

		unit<uint32> capital := subset(contiguous/area_cap > 0f)			, DialogData  = "Input/gtopo/number"
			, DialogType  = "Map"
		{
			attribute<uint32> IsCapital                 := (area > 0f)[uint32];

			attribute<km2> area                         := contiguous/area[nr_OrgEntity];
			attribute<Input/administrative/Capital/UN>  un_rel := contiguous/un_rel[nr_OrgEntity];
			attribute<string>  name                     := contiguous/name[nr_OrgEntity];
			attribute<string>  ISO3                     := contiguous/ISO3[nr_OrgEntity];
			attribute<string>  Capital_City             := contiguous/Capital_City[nr_OrgEntity];
			attribute<uint32>  IsBorderDistrict         := contiguous/IsBorderDistrict[nr_OrgEntity][uint32];
			attribute<float32> fraction_cap_incountry   := contiguous/fraction_cap_incountry[nr_OrgEntity];
			attribute<km2>     area_country             := contiguous/area_country[nr_OrgEntity];
			attribute<string>  Continent                := contiguous/Continent[nr_OrgEntity];
			attribute<uint32>  IsIsland                 := contiguous/IsIsland[nr_OrgEntity][uint32];

			attribute<float32> upopNotCap_2010          := rjoin(ISO3,Country/ISO3,Country/upopNotCap_2010);
			attribute<float32> upopNotCap_2100          := rjoin(ISO3,Country/ISO3,Country/upopNotCap_2100);

			attribute<float32> perc_upopNotCap          := ((upopNotCap_2100 - upopNotCap_2010) / upopNotCap_2010) * 100f;

			attribute<float32> upopcap_2010             := contiguous/upop_2010[nr_OrgEntity];
			attribute<float32> upopcap_2100             := contiguous/upop_2100[nr_OrgEntity];
	
			attribute<km2>     urbcapkm2_2010           := contiguous/urbkm2_2010[nr_OrgEntity];
			attribute<km2>     urbcapkm2_2100           := contiguous/urbkm2_2100[nr_OrgEntity];
			
			attribute<float32> change_urbcapkm2         := contiguous/change_urbkm2[nr_OrgEntity];
			attribute<float32> perc_urbcapkm2           := contiguous/perc_urbkm2[nr_OrgEntity];
	
			attribute<Person_km2> upopcap_dens_2010     := contiguous/upop_dens_2010[nr_OrgEntity];
			attribute<Person_km2> upopcap_dens_2100     := contiguous/upop_dens_2100[nr_OrgEntity];

// 			attribute<float32> popcap_2010              := contiguous/pop_2010[nr_OrgEntity];//should be same as upopcap_2010
// 			attribute<float32> popcap_2100              := contiguous/pop_2100[nr_OrgEntity];//should be same as upopcap_2100
// 	
// 			attribute<Person_km2> popdenscap_2010       := contiguous/popdens_2010[nr_OrgEntity];
// 			attribute<Person_km2> popdenscap_2100       := contiguous/popdens_2100[nr_OrgEntity];
// 			attribute<Person_km2> popdensdifcap         := contiguous/popdensdif[nr_OrgEntity];
	
			attribute<float32> change_upopcap           := contiguous/change_upop[nr_OrgEntity];
			attribute<float32> perc_upopcap             := contiguous/perc_upop[nr_OrgEntity];
	}

	unit<uint32> variable_capital := SubItem_PropValues(capital,'name');
	container export_csv := Report/WriteTable32ToCSV(capital , AsList(variable_capital/name, ';'), '%LocalDataProjDir%/results/Districts_capital2100SSP2_all.csv');

	unit<uint32> capital_export := capital
			, DialogType  = "Map"
		{
			attribute<km2> area                         := capital/area;
			attribute<Input/administrative/Capital/UN>  un_rel := capital/un_rel;
			attribute<string>  name                     := capital/name;
			attribute<string>  ISO3                     := capital/ISO3;
			attribute<string>  Capital_City             := capital/Capital_City;
			attribute<uint32>  IsBorderDistrict         := capital/IsBorderDistrict;
			attribute<string>  Continent                := capital/Continent;

			attribute<float32> perc_upopcap             := capital/perc_upopcap;
			attribute<float32> perc_upopNotCap          := capital/perc_upopNotCap;

			attribute<uint32>  Cap_gt_UrbanNotCap       := (perc_upopcap > perc_upopNotCap)[uint32];

			attribute<float32> upopcap_2010             := capital/upopcap_2010;
			attribute<float32> upopcap_2100             := capital/upopcap_2100;
			attribute<float32> upopNotCap_2010          := capital/upopNotCap_2010;
			attribute<float32> upopNotCap_2100          := capital/upopNotCap_2100;
	}

	unit<uint32> variable_capital_graph := SubItem_PropValues(capital_export,'name');
	container export_csv_graph := Report/WriteTable32ToCSV(capital_export , AsList(variable_capital_graph/name, ';'), '%LocalDataProjDir%/results/Districts_capital2100SSP2.csv');
}