////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration Towards an Urban Preview - 2UP 2021                       //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Bas van Bemmel
// Function:

container Results
{
	container SSPs := 
		for_each_ne(Scenarios/SSP/Name, 
			'RegionGDP(Claims/'+Scenarios/SSP/Name+')'
			);

	template RegionGDP
	{
		container GDPclaim;

		// begin case parameters
		parameter<string> Scenario:= GDPclaim/Name;
		// end case parameters

		unit<uint32> CompactedDomain := /Input/CompactedDomain;
		attribute<uint16>   Region_rel (CompactedDomain):= GDPregion_grid[CompactedDomain/nr_OrgEntity];
		attribute<uint8>   Country_rel (CompactedDomain):= Input/administrative/Countries/Country_grid[CompactedDomain/nr_OrgEntity];

		//3278 records
		attribute<uint32>   Invert_Region_rel (Data/GDPregions):= invert(Region_rel);

		unit<uint8> ProjectionDate: nrofrows = 10
		{
			attribute<Year> Yr: [2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100];
			//Truc startjaar 2010: delingen worden exact 1
			attribute<Year> Yr_previous: [2010, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090];
			attribute<string> name          := 'Y'+string(Yr);
			attribute<string> name_previous := 'Y'+string(Yr_previous);
			attribute<string> prevStateName := MakeDefined(name[ID(.)-1b], 'InitialState');

			container V := for_each_nedv(Name, 'value('+string(ID(.))+',..)', void, .);
		}

		container InitialState
		{
			// if region known extract GDPCap from (GIS) regionsource file else from country claim table for GDPCap
			attribute<kUSD> GDPCap_Region_cor(Data/GDPregions) := Data/GDPregions/REGGDPCAPkUSD <> 0f ? (Data/GDPregions/REGGDPCAP[kUSD]) : (GDPclaim/GDPCap_Y2010[invert(GDPclaim/Country_rel)][Data/GDPregions/Region_Country_rel]);
		}

		unit<uint8> Cntr:= Input/administrative/Countries/Country 
		{
			attribute<uint16>  Region_Aantal             := pcount(Data/GDPregions/Region_Country_rel);
			attribute<float32> Region_Aantal_Gevuld      := sum((GDP/Data/GDPregions/REGGDPCAP > 0f ? 1f: 0f),Data/GDPregions/Region_Country_rel);
			attribute<float32> Region_Aantal_niet_gevuld := value(Region_Aantal,float32)-Region_Aantal_Gevuld;
		}

		attribute<float32> Region_Aantal_niet_gevuld_Region (Data/GDPregions) := Cntr/Region_Aantal_niet_gevuld[Data/GDPregions/Region_Country_rel];


	// population by region from model results
	// population by country from model results
	// GDPCap growth per region compared to the previous sight year, based on a division from the claim tables (GDPCAP per sight year)
	container RunPeriods: = for_each_ne(
			ProjectionDate/name,
			'Template_0(
				sum(Scenarios/SSPs/'+Scenario+'/ProjectionDates/'+ProjectionDate/name+'/NewState/Pop_not_negative,Region_rel),
				sum(Scenarios/SSPs/'+Scenario+'/ProjectionDates/'+ProjectionDate/name+'/NewState/Pop_not_negative[float32],Country_rel),
				(GDPclaim/GDPCap_'+ProjectionDate/name+'[invert(GDPclaim/Country_rel)] / GDPclaim/GDPCap_'+ProjectionDate/name_previous+'[invert(GDPclaim/Country_rel)])[Data/GDPregions/Region_Country_rel]
			)'
		);

		Template Template_0
		{
			attribute<float32> populatie(Data/GDPregions);
			attribute<float32> populatieCountry(Input/administrative/Countries/Country );
			attribute<float32> GDPCap_Gowth_Region_claim(Data/GDPregions);
		}

	// first the growth in the period of 10 years is superimposed.
	// GDPCap per region after growth factor application
	container RunPeriods2: = for_each_ne(
			ProjectionDate/name,
			'Template_2(
				'+ProjectionDate/prevStateName+'/GDPCap_Region_cor[kUSD] * RunPeriods/'+ProjectionDate/name+'/GDPCap_Gowth_Region_claim,
			  MakeDefined(GDPclaim/GDPCap_'+ProjectionDate/name+'[invert(GDPclaim/Country_rel)], 0[kUSD])
			)'
		);

		Template Template_2
		{
			attribute<kUSD>    GDPCap_Region_cor(Data/GDPregions);
			attribute<kUSD>    GDPCap_Country(Input/administrative/Countries/Country );
		}

		// GDP per region in thousands of USD
		// GDP per country in thousands of USD
		// GDP per cell based on GDP per country
		container RunPeriods3: = for_each_ne(
			ProjectionDate/name,
			'Template_3(
				//((sum(Scenarios/SSPs/'+Scenario+'/ProjectionDates/'+ProjectionDate/name+'/NewState/Pop_not_negative,Region_rel)[float32]) * RunPeriods2/'+ProjectionDate/name+'/GDPCap_Region_cor)/1000f,
				((sum(Scenarios/SSPs/'+Scenario+'/ProjectionDates/'+ProjectionDate/name+'/NewState/Pop_not_negative,Region_rel)[float32]) * RunPeriods2/'+ProjectionDate/name+'/GDPCap_Region_cor),
				RunPeriods2/'+ProjectionDate/name+'/GDPCap_Country*RunPeriods/'+ProjectionDate/name+'/populatieCountry[float32],
				RunPeriods2/'+ProjectionDate/name+'/GDPCap_Country[Input/administrative/Countries/Country_grid]*((Scenarios/SSPs/'+Scenario+'/ProjectionDates/'+ProjectionDate/name+'/NewState/Pop_not_negative)[Scenarios/SSPs/'+Scenario+'/CompactedDomain/BaseGrid][float32])
			)'
		);

		Template Template_3
		{
			attribute<kUSD>    GDP_Region(Data/GDPregions);
			attribute<kUSD>    GDP_Country(Input/administrative/Countries/Country );
			attribute<kUSD>    GDP_Cell_R1(Input/gtopo);
		}

		//sommeer GDP per regio tot land
		container RunPeriods4: = for_each_ne(
			ProjectionDate/name,
			'Template_4(
				sum(RunPeriods3/'+ProjectionDate/name+'/GDP_Region,Data/GDPregions/Region_Country_rel)
			)'
		);

		Template Template_4
		{
			attribute<kUSD>    GDP_SumRegion(Input/administrative/Countries/Country );
		}

		// correction factor per country based on summation per country and summation per region
		container RunPeriods5: = for_each_ne(
			ProjectionDate/name,
			'Template_5(
				(RunPeriods3/'+ProjectionDate/name+'/GDP_Country) / (RunPeriods4/'+ProjectionDate/name+'/GDP_SumRegion)
			)'
		);

		Template Template_5
		{
			attribute<float32> Correctionfactor_Country(Input/administrative/Countries/Country );
		}

		// correction factor per country -> correction factor per region
		container RunPeriods6: = for_each_ne(
			ProjectionDate/name,
			'Template_6(
				(RunPeriods5/'+ProjectionDate/name+'/Correctionfactor_Country)[Data/GDPregions/Region_Country_rel]
			)'
		);

		Template Template_6
		{
			attribute<float32> Correctionfactor_Region(Data/GDPregions);
		}

		// correct GDP per region based on correction factor per region based on country
		container RunPeriods7: = for_each_ne(
			ProjectionDate/name,
			'Template_7(
				(RunPeriods6/'+ProjectionDate/name+'/Correctionfactor_Region) * (RunPeriods3/'+ProjectionDate/name+'/GDP_Region)
			)'
		);

		Template Template_7
		{
			attribute<kUSDClass> GDP_Region_cor(Data/GDPregions);
		}

		//GDPCap per regio
		container RunPeriods8: = for_each_ne(
			ProjectionDate/name,
			'Template_8(
				(RunPeriods7/'+ProjectionDate/name+'/GDP_Region_cor)[kUSD] / (RunPeriods/'+ProjectionDate/name+'/populatie[float32])
			)'
		);

		Template Template_8
		{
			attribute<kUSDCapClass> GDPCap_Region_cor(Data/GDPregions);
		}
		
		// this part only checks no used endresults

		// check totals from regions GDP with country GDP --> "GDP/Results/SSPs/@SSP@/GDP_Country"
		// sommeer GDP tot land-randtotaal
		container RunPeriods9: = for_each_ne(
			ProjectionDate/name,
			'Template_9(
				sum((RunPeriods7/'+ProjectionDate/name+'/GDP_Region_cor)[kUSD],Data/GDPregions/Region_Country_rel)
			)'
		);

		Template Template_9
		{
			attribute<kUSD> GDP_Sum_Country(Input/administrative/Countries/Country );
		}

		container RunPeriods10: = for_each_ne(
			ProjectionDate/name,
			'Template_10(
				(RunPeriods9/'+ProjectionDate/name+'/GDP_Sum_Country)[kUSD]-(RunPeriods3/'+ProjectionDate/name+'/GDP_Country[kUSD])
			)'
		);

		Template Template_10
		{
			attribute<kUSD> GDP_Difference(Input/administrative/Countries/Country );
		}

		//check: total GDP per country from national GDPCap claims and population  --> compared to regionalised GDPCap claims and population
		//check R1 sum totals per country
		container RunPeriodsCheckNational: = for_each_ne(
			ProjectionDate/name,
			'Template_checkNational(
				sum(RunPeriods3/'+ProjectionDate/name+'/GDP_Cell_R1,Country_rel[Scenarios/SSPs/'+Scenario+'/CompactedDomain/BaseGrid])[float32]
			)'
		);

		Template Template_checkNational
		{
			//attribute<kUSD>    SUM_GDP_Country(Input/administrative/Countries/Country );
			attribute<float32>    SUM_GDP_Country(Input/administrative/Countries/Country );
		}

		//check R2 sum totals per country
		container RunPeriodsCheckRegion: = for_each_ne(
			ProjectionDate/name,
			'Template_checkRegion(
				sum(Export/GDP_Cell/'+ProjectionDate/name+',Country_rel[Scenarios/SSPs/'+Scenario+'/CompactedDomain/BaseGrid])
			)'
		);

		Template Template_checkRegion
		{
			attribute<float32>    SUM_GDP_Country(Input/administrative/Countries/Country );
			//attribute<kUSD>    SUM_GDP_Country2:=SUM_GDP_Country(Input/administrative/Countries/Country );
		}

		container RunPeriodsGDPDif: = for_each_ne(
			ProjectionDate/name,
			'Template_GDPDif(
				(RunPeriodsCheckNational/'+ProjectionDate/name+'/SUM_GDP_Country) - (RunPeriodsCheckRegion/'+ProjectionDate/name+'/SUM_GDP_Country)
			)'
		);

		Template Template_GDPDif
		{
			//attribute<kUSD>    Difference_GDP_Country(Input/administrative/Countries/Country );
			attribute<float32>    Difference_GDP_Country(Input/administrative/Countries/Country );
		}
//end of checkpart

	#include<GDP_Export.dms>
	#include<GDP_Correct2010.dms>
	}
}