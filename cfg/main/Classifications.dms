container Classifications : using = "units"
{
	unit<uint8>  GHS_years  : nrofrows = 10 
	{
		attribute<uint16> year: [ 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020]; 
		attribute<string> name := 'Y'+string(year); 
		attribute<string> prev_name := name[sub_or_null(id(.), 1b)];
	}
	
	unit<uint8> Continents : nrofrows = 6
	{
		attribute<string> name : ['Africa','Asia','Australia_Oceania','Europe','North_America','South_America'];
		attribute<string> label := name;
		container V := for_each_nedv(AsItemName(name), String(ID(.))+'[..]', void, .);
	}
	
	unit<uint32> Iter : nrofrows = 8
	{
		attribute<string> name := 'I'+string(id(.));
		attribute<string> PrevPopName := MakeDefined(name[sub_or_null(ID(.),1)]+'/NextPop', 'CurrState/Pop');
	}

	unit<uint8> ProjectionYears := range(uint8, uint8(substr(ModelParameters/StartYear, 2,2))+1b, 11b) //11b-1b becomes 2100 in this setup.
	{
		attribute<Year>   Yr             := (float32(id(.)) * 10f + 2000f)[Year];
		attribute<string> name           := 'Y'+string(Yr);
		
		attribute<string> prev_name      := id(.) != first(id(.)) ? name[id(.) - min_elem( id(.), 1b) ] : ModelParameters/StartYear;
		attribute<string> prevStateName  := id(.) != first(id(.)) ? name[id(.) - min_elem( id(.), 1b) ]+'/NewState' : 'InitialState';
	}
	
	unit<uint32> AllYears:= union_unit(GHS_years, ProjectionYears) {
		attribute<string> Name:= union_data(.,GHS_years/name, ProjectionYears/name);
		attribute<string> Prev_name:= union_data(., GHS_years/prev_name, ProjectionYears/Prev_name);
		attribute<Year>   Yr:= union_data(., GHS_years/year[Year], ProjectionYears/Yr);
		attribute<bool>   modelled:= union_data(., const(false,GHS_years,bool), const(true,ProjectionYears,bool));
	}
	
	unit<uint8> ProjectionYears_Delta := select_with_attr_by_cond(ProjectionYears, id(ProjectionYears) != first(id(ProjectionYears)));
	
	unit<uint8> TypologyK : nrofrows = 7, Descr = "Degree of urbanisation level 2 typologies", URL = "https://human-settlement.emergency.copernicus.eu/degurbaDefinitions.php"
	{
		attribute<uint8>  EK    : [30, 23, 22, 21, 13, 12, 11];
		attribute<string> Label : ['Urban centre','Dense urban cluster','Semi-dense urban cluster','Suburban grid cell','Rural cluster','Low density rural grid cell','Very low density grid cell'];
		attribute<uint32> BrushColor: [rgb(255,0,0),rgb(115,35,0),rgb(168,112,0),rgb(255,255,0),rgb(55,86,35),rgb(171,205,102),rgb(205,245,122)];
		attribute<string> name  := AsItemName(label);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	unit<uint32> Accessibility_Variants : nrofrows = 3, Descr = "Accessibility definitions used for endogenous accessibility grid-based calculations" 
	{
		attribute<string> label       : ['villages', 'towns', 'cities'];
		attribute<string> definition  : ['degurba_class = 13[TypologyK] || degurba_class > 21[TypologyK]', 'degurba_class > 21[TypologyK]', 'degurba_class = 30[TypologyK]'];
	}
	
	unit<uint32> Pot_fields : nrofrows = 8 
	{
		attribute<string> label : ['Pots_lin_5km', 'Pots_sqr_5km', 'Pots_lin_10km', 'Pots_sqr_10km', 'Pots_lin_20km', 'Pots_sqr_20km', 'Pots_lin_40km', 'Pots_sqr_40km'];
	}
	unit<uint32> percentages: nrofrows = 100 {
		attribute<string> 	label:= string(id(.)+1)+'%';
	}
			
	unit<uint8> AllShares := cat_range(0b, 101b)
	{
		attribute<string>         label                      := string(id(.));
		attribute<BU_DensityBins> DensityBins_rel            := Classify(id(.), BU_DensityBins/LB);
		attribute<Float32>        Moving_up_probability_data_North_America : 
		[ 
			0.0377341164316, 1.45332618211,2.52970668461,3.1482263243,3.569709995,3.8572650895,3.9738254895,
			4.02401614,4.0128921277,3.910592084,3.800000068,3.5646183209,3.3867362067,3.206784069,3.014741,
			2.826713537,2.567079823,2.377908883,2.28521005,2.229567163,2.047223235,1.956389612,1.960861623,
			1.890289163,1.738697614,1.5891625,1.5514657,1.527062203,1.43925308,1.41922069,1.4671418,
			1.30686736,1.08418258,1.0000004,0.82986024,0.6565219,0.55026426,0.36708853,0.281818,0.207792,
			0.137931,0.3076921,0.53496475,0.4545453,0.4,0.35,0.3,0.25,0.2,0.1,0
		];
		attribute<float32> 		 Moving_up_probability_data_South_America : 
		[
			0.0068052720645, 1.05628049746,2.8591187046,4.255597741,5.400640577,6.4160106,7.03149566,
			7.607432043,7.91465274,8.1851666,8.412918241,8.352664153,8.358621266,8.37108874,8.335803672,
			7.964093696,7.761195018,7.75465437,7.18837323,6.87529372,6.55229938,5.993178525,5.911925076,
			5.55648532,5.01603852,4.74300755,4.10604133,3.60155044,3.19329448,2.69674868,2.39166612,1.92749778,
			1.85373767,1.70483125,1.42680321,1.21794806,1.071875,1.03,1.01,0.999999,1.1052628,1.2105266,1.3157904,
			1.3636365,1,0.9,0.8,0.7,0.6,0.5,0
		];
		attribute<float32>		Moving_up_probability_data_Africa :
		[
			0.0595430599677,1.99042640335,2.9387230449,3.7424377657,4.3837268442,4.925281436,
			5.2811363181,5.536376872,5.677944965,5.987073257,5.955722925,6.092272808,6.072817852,
			5.94421604,5.877544146,5.739301511,5.703981827,5.449190547,5.240146717,4.991571734,
			4.893041296,4.415978934,4.301050935,3.94821702,3.62222069,3.488992282,3.176362766,
			2.971061138,2.6238051,2.41580889,2.24435737,2.03910405,1.83116879,1.74868267,1.52250588,
			1.45558095,1.33988684,1.31858485,1.3500002,0.97142827,1.04147539,0.9700586,1.12,0.77586251,
			0.765,0.7555551,0.6555558,0.6399995,0.5483872,0.4871792,0
		];
		attribute<float32>		Moving_up_probability_data_Asia :
		[
			0.1119806013597, 1.90804443805,2.69213389322,3.38332735734,3.96055971104,4.4632012073,
			4.9160506768,5.1727599889,5.497856228,5.6522861208,5.7981589262,5.846704514,5.8385050275,
			5.7954941275,5.704570987,5.6047059982,5.385684335,5.263822206,4.953335095,4.737240799,
			4.335216715,4.042953412,3.764982014,3.360218168,3.042893454,2.604407734,2.305164394,
			2.016564169,1.745532301,1.576752504,1.4635,1.5810346,1.613714172,1.58333471,1.67685504,
			1.3386526,1.32558184,1.45728687,1.43462827,1.39999976,1.3129774,1.33035576,1.5217398,
			1.3448277,1.5576902,1.457142,1.2692304,0.9166673,0.461538,0.230769,0
		];
		attribute<float32>		Moving_up_probability_data_Europe :
		[
			0.051640192703,1.02092812139,1.82069942724,2.3307262886,2.6664391758,2.878541554,
			3.0046171066,3.0437626787,3.0312353136,2.9362835398,2.817896049,2.6687118185,2.4978115792,
			2.310667605,2.20320494,1.957176393,1.795719507,1.610852824,1.499679097,1.347695304,1.286037162,
			1.251754089,1.18904431,1.33333459,1.14414473,1.20527945,1.278387,0.99056612,1.15827368,0.98319266,
			1.5263165,2.2173905,2.35,2.45,2.6666644,2.5625003,2.4583362,2.411767,2.4736838,2.5805919,2.6875,
			2.6770841,2.6666682,2.5833341,2.5,2.5625,2.625,2.4,1.5,0.75,0
		];
		attribute<float32> 		Moving_up_probability_data_Australia_Oceania: 
		[
			0.016554834546, 1.6228475286,2.452383686,2.889445339,3.284143478,3.56788425,3.562376842,
			3.762492369,3.65930338,3.76123747,3.59308517,3.42364992,3.35613419,3.42420722,3.08842559,
			2.85440374,2.612058,2.42559606,2.17730538,2.13430705,1.94901406,1.72,1.54865711,1.38142271,
			1.27176195,1.11778959,1.15841492,1.3333342,1.28676486,1.8260878,1.7931041,2.3448289,2.3,
			2.2500008,2.25,2.2571428,2.2,2.175,2.15,2.125,2.0909085,1.9,1.5,1.333334,1.666666,1.666666,
			2.166668,1.333333,0.66,0.33,0		
		]; 
		
		attribute<uint32>         BrushColor                 := BU_DensityBins/BrushColor[DensityBins_rel];
	}
	unit<uint32> Shares_Per_Continent:= range(uint32, 0, #AllShares * #sourcedata/RegionalUnits/Continents) {
		attribute<float32> Moving_up_probability:= ='MakeDefined(union_data(.,'+AsItemList('AllShares/Moving_up_probability_data_'+sourcedata/RegionalUnits/Continents/name)+'), 0f)';
		attribute<uint32> BrushColor:= ='union_data(., '+AsItemList(const('AllShares/BrushColor',sourcedata/RegionalUnits/Continents, string))+')';
	}
	unit<uint8> BU_DensityBins := cat_range(0b, 15b)
	{
		attribute<AllShares>  LB: [0, 1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50];
		attribute<string> label := 'Share '+string(LB)+' - '+string(UB);
		attribute<uint8>  UB    := id(.) == last(id(.)) ? 101b : LB[id(.)+1b];
		
		attribute<uint32> BrushColor := switch( 
											case(LB == 0b, rgb(255,255,255))
											, case(LB == 1b, rgb(171,213,213))
											, case(LB == 2b, rgb(188,221,170))
											, case(LB == 3b, rgb(205,230,127))
											, case(LB == 4b, rgb(221,235,85))
											, case(LB == 5b, rgb(238,246,42))
											, case(LB == 10b, rgb(255,255,0))
											, case(LB == 15b, rgb(250,230,0))
											, case(LB == 20b, rgb(243,205,12))
											, case(LB == 25b, rgb(237,180,20))
											, case(LB == 30b, rgb(231,157,30))
											, case(LB == 35b, rgb(225,133,34))
											, case(LB == 40b, rgb(219,100,40))
											, case(LB == 45b, rgb(213,84,48))
											, case(LB == 50b, rgb(200,60,50))
											, rgb(200,200,200)
										), DialogType = "BrushColor";
	}
	// unit<uint8> Pop_DensityBins := cat_range(0b, 17b) 
	unit<uint32> Pop_DensityBins := cat_range(0, 502) 
	{
	
		attribute<string>  UB                := string(ClassBreaks[id(.) + 1]);
		attribute<string>  label             := IsNull(UB) ? string(ClassBreaks)+ ' < '  : string(ClassBreaks)+' - '+string(UB);
		attribute<uint32>  ClassBreaks_org   := uint32(sub_or_null(id(.),1)) * binsize;
		attribute<float32> ClassBreaks       := IsNull(ClassBreaks_org) ? 0f : ClassBreaks_org == 0 ? 1f : float32(ClassBreaks_org);
		// attribute<float32> ClassBreaks       : [0, 1, 10, 25, 50, 100, 200, 300, 600, 900, 1500, 3000, 4500, 6000, 7500, 10000, 20000];
		
		parameter<uint32> binsize :=100;
	}
	
	unit<uint8> Pop_Bins := cat_range(0b, 16b) //10
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		// attribute<float32> ClassBreaks       : [0, 1, 25, 50, 100, 500, 1000, 2000, 3000, 5000];
		attribute<float32> ClassBreaks       : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 50, 500, 3000, 5000];
	}
	
	unit<uint8> BU_Residential_Area_Bins := cat_range(0b, 10b) 
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		attribute<float32> ClassBreaks       : [0, 0.0001, 0.001, 0.01, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25];
	}
	
	unit<uint8> BU_Total_Share_Bins := cat_range(0b, 10b) 
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		attribute<float32> ClassBreaks       : [0, 0.0001, 0.001, 0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25];
	}
}