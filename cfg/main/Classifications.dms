container Classifications : using = "units"
{
	unit<uint8>  GHS_years  : nrofrows = 10 
	{
		attribute<uint16> year: [ 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020]; 
		attribute<string> name := 'Y'+string(year); 
		attribute<string> prev_name := name[sub_or_null(id(.), 1b)];
	}
	
	unit<uint8> Continents : nrofrows = 6
	{
		attribute<string> name : ['Africa','Asia','Australia_Oceania','Europe','North_America','South_America'];
		attribute<string> label := name;
		container V := for_each_nedv(AsItemName(name), String(ID(.))+'[..]', void, .);
	}
	
	unit<uint32> Iter : nrofrows = 8
	{
		attribute<string> name := 'I'+string(id(.));
		attribute<string> PrevPopName := MakeDefined(name[sub_or_null(ID(.),1)]+'/NextPop', 'CurrState/Pop');
	}

	unit<uint8> ProjectionYears := range(uint8, uint8(substr(ModelParameters/StartYear, 2,2))+1b, 11b) //11b-1b becomes 2100 in this setup.
	{
		attribute<Year>   Yr             := (float32(id(.)) * 10f + 2000f)[Year];
		attribute<string> name           := 'Y'+string(Yr);
		
		attribute<string> prev_name      := id(.) != first(id(.)) ? name[id(.) - min_elem( id(.), 1b) ] : ModelParameters/StartYear;
		attribute<string> prevStateName  := id(.) != first(id(.)) ? name[id(.) - min_elem( id(.), 1b) ]+'/NewState' : 'InitialState';
	}
	
	unit<uint32> AllYears:= union_unit(GHS_years, ProjectionYears) {
		attribute<string> Name:= union_data(.,GHS_years/name, ProjectionYears/name);
		attribute<string> Prev_name:= union_data(., GHS_years/prev_name, ProjectionYears/Prev_name);
		attribute<Year>   Yr:= union_data(., GHS_years/year[Year], ProjectionYears/Yr);
		attribute<bool>   modelled:= union_data(., const(false,GHS_years,bool), const(true,ProjectionYears,bool));
	}
	
	unit<uint8> ProjectionYears_Delta := select_with_attr_by_cond(ProjectionYears, id(ProjectionYears) != first(id(ProjectionYears)));
	
	unit<uint8> TypologyK : nrofrows = 7, Descr = "Degree of urbanisation level 2 typologies", URL = "https://human-settlement.emergency.copernicus.eu/degurbaDefinitions.php"
	{
		attribute<uint8>  EK    : [30, 23, 22, 21, 13, 12, 11];
		attribute<string> Label : ['Urban centre','Dense urban cluster','Semi-dense urban cluster','Suburban grid cell','Rural cluster','Low density rural grid cell','Very low density grid cell'];
		attribute<uint32> BrushColor: [rgb(255,0,0),rgb(115,35,0),rgb(168,112,0),rgb(255,255,0),rgb(55,86,35),rgb(171,205,102),rgb(205,245,122)];
		attribute<string> name  := AsItemName(label);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	unit<uint8> Degurba_lvl1 : nrofrows = 3, Descr = "Degree of urbanisation level 1 typologies" {
		attribute<uint8> 	EK :	[30, 20, 10];
		attribute<string>	Label:  ['Urban centre', 'Urban cluster', 'Rural grid cells'] ;
		attribute<uint32> 	BrushColor: [rgb(255,0,0),rgb(255,255,0),rgb(55,86,35)];
		attribute<string> 	name  := AsItemName(label);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	unit<uint32> Accessibility_Variants : nrofrows = 3, Descr = "Accessibility definitions used for endogenous accessibility grid-based calculations" 
	{
		attribute<string> label       : ['villages', 'towns', 'cities'];
		attribute<string> definition  : ['degurba_class = 13[TypologyK] || degurba_class > 21[TypologyK]', 'degurba_class > 21[TypologyK]', 'degurba_class = 30[TypologyK]'];
	}
	
	unit<uint32> Pot_fields : nrofrows = 8 
	{
		attribute<string> label : ['Pots_lin_5km', 'Pots_sqr_5km', 'Pots_lin_10km', 'Pots_sqr_10km', 'Pots_lin_20km', 'Pots_sqr_20km', 'Pots_lin_40km', 'Pots_sqr_40km'];
	}
	unit<uint32> percentages: nrofrows = 100 {
		attribute<string> 	label:= string(id(.)+1)+'%';
	}
			
	unit<uint8> AllShares := cat_range(0b, 101b)
	{
		attribute<string>         label                      := string(id(.));
		attribute<BU_DensityBins> DensityBins_rel            := Classify(id(.), BU_DensityBins/LB);
		attribute<Float32>        Moving_up_probability_data_North_America : 
		[ 
			0.012,0.278,0.642,0.957,1.234,1.476,1.663,1.821,1.933,2.058,2.119,2.186,
			2.212,2.202,2.163,2.193,2.125,2.084,1.993,1.934,1.869,1.772,1.700,1.605,
			1.497,1.407,1.345,1.268,1.186,1.098,1.045,1.048,0.963,0.908,0.804,0.762,
			0.743,0.663,0.570,0.539,0.549,0.465,0.400,0.321,0.272,0.280,0.274,0.185,
			0.248,0.136,0.159,0.109,0.260,0.364,0.466,0.583,0.717,0.664,0.611,0.556,
			0.333,0.111,0.000,0.000,0.000,0.000,0.000,0.000
		];
		attribute<float32> 		 Moving_up_probability_data_South_America : 
		[
			0.002,0.192,0.556,0.972,1.398,1.779,2.097,2.484,2.737,2.969,3.174,3.322,
			3.524,3.685,3.791,3.808,3.869,3.938,3.984,4.024,4.004,3.842,3.885,3.789,
			3.664,3.689,3.450,3.382,3.279,3.130,2.952,2.890,2.616,2.418,2.223,2.016,
			1.725,1.578,1.439,1.235,1.063,0.902,0.792,0.621,0.493,0.457,0.394,0.344,
			0.348,0.273,0.295,0.206,0.195,0.167,0.140,0.112,0.084,0.056,0.034,0.012,
			0.000
		];
		attribute<float32>		Moving_up_probability_data_Africa :
		[
			0.016,0.594,0.888,1.156,1.394,1.665,1.899,2.098,2.305,2.502,2.650,2.722,
			2.884,2.975,3.004,3.087,3.213,3.133,3.152,3.107,3.162,3.088,3.003,2.905,
			2.952,2.738,2.657,2.473,2.417,2.303,2.079,2.064,1.871,1.782,1.575,1.520,
			1.369,1.220,1.138,1.043,0.843,0.830,0.770,0.686,0.633,0.598,0.560,0.507,
			0.468,0.457,0.436,0.390,0.377,0.352,0.302,0.283,0.286,0.258,0.283,0.268,
			0.234,0.186,0.186,0.152,0.148,0.116,0.058,0.000
		];
		attribute<float32>		Moving_up_probability_data_Asia :
		[
			0.031,0.537,0.813,1.075,1.342,1.597,1.843,2.093,2.318,2.521,2.741,2.895,
			3.093,3.208,3.320,3.405,3.493,3.541,3.591,3.573,3.573,3.496,3.456,3.440,
			3.319,3.177,3.047,2.905,2.780,2.630,2.451,2.342,2.121,1.959,1.792,1.619,
			1.396,1.240,1.163,0.941,0.855,0.761,0.709,0.695,0.684,0.758,0.792,0.845,
			0.868,1.012,0.986,0.992,0.959,0.943,0.932,0.933,0.914,0.949,0.833,0.757,
			0.769,0.738,0.615,0.492,0.369,0.246,0.123,0.000
		];
		attribute<float32>		Moving_up_probability_data_Europe :
		[
			0.018,0.233,0.476,0.719,0.932,1.121,1.285,1.418,1.546,1.633,1.724,1.783,
			1.836,1.877,1.896,1.907,1.921,1.902,1.861,1.838,1.796,1.741,1.702,1.590,
			1.548,1.461,1.383,1.308,1.237,1.149,1.046,0.995,0.873,0.862,0.785,0.745,
			0.692,0.708,0.667,0.681,0.705,0.720,0.636,0.814,0.873,0.944,0.960,1.015,
			1.138,1.142,1.335,1.376,1.396,1.414,1.551,1.389,1.479,1.512,1.408,1.366,
			1.319,1.267,1.014,0.760,0.507,0.253,0.000,0.000
		];
		attribute<float32> 		Moving_up_probability_data_Australia_Oceania: 
		[
			0.005,0.446,0.798,1.036,1.238,1.420,1.559,1.567,1.768,1.936,1.805,1.931,
			2.016,1.957,1.784,1.969,1.802,1.975,1.795,1.724,1.753,1.637,1.550,1.435,
			1.419,1.239,1.209,1.078,0.984,0.883,0.817,0.783,0.698,0.653,0.640,0.665,
			0.505,0.555,0.593,0.634,0.805,0.866,0.898,0.918,0.902,0.942,1.071,1.102,
			1.144,1.159,1.146,1.122,1.052,0.989,1.021,0.914,0.751,0.731,0.821,0.759,
			0.733,0.811,0.444,0.333,0.222,0.111,0.000,0.000
		]; 
		attribute<float32>		Moving_up_probability_data_stylised_Lewis_20241126:
		[
			0.042,1.295,2.440,3.207,3.807,4.304,4.570,4.805,5.061,5.178,5.249,5.331, 
			5.385,5.315,5.249,5.203,5.066,4.885,4.688,4.552,4.461,4.370,4.278,4.187,
			4.096,4.005,3.914,3.823,3.732,3.641,3.550,3.459,3.368,3.277,3.186,3.095,
			3.004,2.913,2.822,2.731,2.640,2.549,2.458,2.367,2.276,2.185,2.094,2.003,
			1.912,1.821,1.730,1.639,1.548,1.457,1.365,1.274,1.183,1.092,1.001,0.910,
			0.819,0.728,0.637,0.546,0.455,0.364,0.273,0.182,0.091,0.000,0.000,0.000
		], Descr = "ETs proposed by Lewis Dijkstra, 26 November 2024, to further concentrate built-up development. Deviation from empirics, with longer and larger tail going into 69%.";
		attribute<uint32>         BrushColor                 := BU_DensityBins/BrushColor[DensityBins_rel];
	}
	unit<uint32> Shares_Per_Continent:= range(uint32, 0, #AllShares * #sourcedata/RegionalUnits/Continents) {
		attribute<float32> Moving_up_probability:= ='MakeDefined(union_data(.,'+AsItemList('AllShares/Moving_up_probability_data_'+sourcedata/RegionalUnits/Continents/name)+'), 0f)';
		//attribute<float32> Moving_up_probability:= MakeDefined(union_data(.,AllShares/Moving_up_probability_data_stylised_Lewis_20241126,AllShares/Moving_up_probability_data_stylised_Lewis_20241126,AllShares/Moving_up_probability_data_stylised_Lewis_20241126,AllShares/Moving_up_probability_data_stylised_Lewis_20241126,AllShares/Moving_up_probability_data_stylised_Lewis_20241126,AllShares/Moving_up_probability_data_stylised_Lewis_20241126), 0f);
		//attribute<float32> Moving_up_probability:= switch(case(perc < 70[AllShares], 1f), 0f);
		attribute<AllShares> perc:= union_data(., id(AllShares), id(AllShares), id(AllShares), id(AllShares), id(AllShares), id(AllShares));
		attribute<uint32> BrushColor:= ='union_data(., '+AsItemList(const('AllShares/BrushColor',sourcedata/RegionalUnits/Continents, string))+')';
	}
	unit<uint8> BU_DensityBins := cat_range(0b, 15b)
	{
		attribute<AllShares>  LB: [0, 1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50];
		attribute<string> label := 'Share '+string(LB)+' - '+string(UB);
		attribute<uint8>  UB    := id(.) == last(id(.)) ? 101b : LB[id(.)+1b];
		
		attribute<uint32> BrushColor := switch( 
											case(LB == 0b, rgb(255,255,255))
											, case(LB == 1b, rgb(171,213,213))
											, case(LB == 2b, rgb(188,221,170))
											, case(LB == 3b, rgb(205,230,127))
											, case(LB == 4b, rgb(221,235,85))
											, case(LB == 5b, rgb(238,246,42))
											, case(LB == 10b, rgb(255,255,0))
											, case(LB == 15b, rgb(250,230,0))
											, case(LB == 20b, rgb(243,205,12))
											, case(LB == 25b, rgb(237,180,20))
											, case(LB == 30b, rgb(231,157,30))
											, case(LB == 35b, rgb(225,133,34))
											, case(LB == 40b, rgb(219,100,40))
											, case(LB == 45b, rgb(213,84,48))
											, case(LB == 50b, rgb(200,60,50))
											, rgb(200,200,200)
										), DialogType = "BrushColor";
	}
	// unit<uint8> Pop_DensityBins := cat_range(0b, 17b) 
	unit<uint32> Pop_DensityBins := cat_range(0, 502) 
	{
	
		attribute<string>  UB                := string(ClassBreaks[id(.) + 1]);
		attribute<string>  label             := IsNull(UB) ? string(ClassBreaks)+ ' < '  : string(ClassBreaks)+' - '+string(UB);
		attribute<uint32>  ClassBreaks_org   := uint32(sub_or_null(id(.),1)) * binsize;
		attribute<float32> ClassBreaks       := IsNull(ClassBreaks_org) ? 0f : ClassBreaks_org == 0 ? 1f : float32(ClassBreaks_org);
		// attribute<float32> ClassBreaks       : [0, 1, 10, 25, 50, 100, 200, 300, 600, 900, 1500, 3000, 4500, 6000, 7500, 10000, 20000];
		
		parameter<uint32> binsize :=100;
	}
	
	unit<uint8> Pop_Bins := cat_range(0b, 31b) //10
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		attribute<float32> ClassMiddle		 := ClassBreaks + (ClassWidth / 2f);
		// attribute<float32> ClassBreaks       : [0, 1, 25, 50, 100, 500, 1000, 2000, 3000, 5000];
		attribute<float32> ClassBreaks       : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 100, 125, 250, 375, 500, 750, 1000, 1500, 2000, 2500, 5000];
		attribute<float32> ClassWidth 	     : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5,  5,  5,  10, 10, 10, 10, 10, 10, 10, 25,  125, 125, 125, 250, 250, 500,  500,  500,  2500, 5000];
	}
	
	unit<uint8> BU_Residential_Area_Bins := cat_range(0b, 10b) 
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		attribute<float32> ClassBreaks       : [0, 0.0001, 0.001, 0.01, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25];
	}
	
	unit<uint8> BU_Total_Share_Bins := cat_range(0b, 10b) 
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		attribute<float32> ClassBreaks       : [0, 0.0001, 0.001, 0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25];
	}
}