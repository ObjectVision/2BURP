container Classifications : using = "units"
{
	unit<uint8>  GHS_years  : nrofrows = 10 
	{
		attribute<uint16> year: [ 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020]; 
		attribute<string> name := 'Y'+string(year); 
	}
	
	unit<uint8> Continents : nrofrows = 6
	{
		attribute<string> name : ['Africa','Asia','Australia_Oceania','Europe','North_America','South_America'];
		attribute<string> label := name;
		container V := for_each_nedv(AsItemName(name), String(ID(.))+'[..]', void, .);
	}
	
	unit<uint32> Iter : nrofrows = 8
	{
		attribute<string> name := 'I'+string(id(.));
		attribute<string> PrevPopName := MakeDefined(name[sub_or_null(ID(.),1)]+'/NextPop', 'CurrState/Pop');
	}
	// parameter<uint8> test := uint8(substr(ModelParameters/StartYear, 2,2));
	unit<uint8> ProjectionYears := range(uint8, uint8(substr(ModelParameters/StartYear, 2,2))+1b, 11b) //11b-1b becomes 2100 in this setup.
	{
		attribute<Year>   Yr             := (float32(id(.)) * 10f + 2000f)[Year];
		attribute<string> name           := 'Y'+string(Yr);
		
		attribute<string> prev_name      := id(.) != first(id(.)) ? name[id(.) - min_elem( id(.), 1b) ] : 'StartingYear';
		attribute<string> prevStateName  := id(.) != first(id(.)) ? name[id(.) - min_elem( id(.), 1b) ]+'/NewState' : 'InitialState';
	}
	
	unit<uint8> ProjectionYears_Delta := select_with_attr_by_cond(ProjectionYears,id(ProjectionYears) >= 1b);
	
	unit<uint8> TypologyK : nrofrows = 7, Descr = "Degree of urbanisation level 2 typologies", URL = "https://human-settlement.emergency.copernicus.eu/degurbaDefinitions.php"
	{
		attribute<uint8>  EK    : [30, 23, 22, 21, 13, 12, 11];
		attribute<string> Label : ['Urban centre','Dense urban cluster','Semi-dense urban cluster','Suburban grid cell','Rural cluster','Low density rural grid cell','Very low density grid cell'];
		attribute<uint32> BrushColor: [rgb(255,0,0),rgb(115,35,0),rgb(168,112,0),rgb(255,255,0),rgb(55,86,35),rgb(171,205,102),rgb(205,245,122)];
		attribute<string> name  := AsItemName(label);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	unit<uint32> Accessibility_Variants : nrofrows = 3, Descr = "Accessibility definitions used for endogenous accessibility grid-based calculations" 
	{
		attribute<string> label       : ['villages', 'towns', 'cities'];
		attribute<string> definition  : ['degurba_class = 13[TypologyK] || degurba_class > 21[TypologyK]', 'degurba_class > 21[TypologyK]', 'degurba_class = 30[TypologyK]'];
	}
	
	unit<uint32> Pot_fields : nrofrows = 8 
	{
		attribute<string> label : ['Pots_lin_5km', 'Pots_sqr_5km', 'Pots_lin_10km', 'Pots_sqr_10km', 'Pots_lin_20km', 'Pots_sqr_20km', 'Pots_lin_40km', 'Pots_sqr_40km'];
	}
	unit<uint32> percentages: nrofrows = 100 {
		attribute<string> 	label:= string(id(.)+1)+'%';
	}

}