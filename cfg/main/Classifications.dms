container Classifications : using = "units"
{
	unit<uint8>  GHS_years  : nrofrows = 10 
	{
		attribute<uint16> year: [ 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020]; 
		attribute<string> name := 'Y'+string(year); 
		attribute<string> prev_name := name[sub_or_null(id(.), 1b)];
	}
	
	unit<uint8> Continents : nrofrows = 6
	{
		attribute<string> name : ['Africa','Asia','Australia_Oceania','Europe','North_America','South_America'];
		attribute<string> label := name;
		container V := for_each_nedv(AsItemName(name), String(ID(.))+'[..]', void, .);
	}
	
	unit<uint32> Iter : nrofrows = 8
	{
		attribute<string> name := 'I'+string(id(.));
		attribute<string> PrevPopName := MakeDefined(name[sub_or_null(ID(.),1)]+'/NextPop', 'CurrState/Pop');
	}

	unit<uint8> ProjectionYears := range(uint8, uint8(substr(ModelParameters/StartYear, 2,2))+1b, 11b) //11b-1b becomes 2100 in this setup.
	{
		attribute<Year>   Yr             := (float32(id(.)) * 10f + 2000f)[Year];
		attribute<string> name           := 'Y'+string(Yr);
		
		attribute<string> prev_name      := id(.) != first(id(.)) ? name[id(.) - min_elem( id(.), 1b) ] : ModelParameters/StartYear;
		attribute<string> prevStateName  := id(.) != first(id(.)) ? name[id(.) - min_elem( id(.), 1b) ]+'/NewState' : 'InitialState';
	}
	
	unit<uint32> AllYears:= union_unit(GHS_years, ProjectionYears) {
		attribute<string> Name:= union_data(.,GHS_years/name, ProjectionYears/name);
		attribute<string> Prev_name:= union_data(., GHS_years/prev_name, ProjectionYears/Prev_name);
		attribute<Year>   Yr:= union_data(., GHS_years/year[Year], ProjectionYears/Yr);
		attribute<bool>   modelled:= union_data(., const(false,GHS_years,bool), const(true,ProjectionYears,bool));
	}
	
	unit<uint8> ProjectionYears_Delta := select_with_attr_by_cond(ProjectionYears, id(ProjectionYears) != first(id(ProjectionYears)));
	
	unit<uint8> TypologyK : nrofrows = 7, Descr = "Degree of urbanisation level 2 typologies", URL = "https://human-settlement.emergency.copernicus.eu/degurbaDefinitions.php"
	{
		attribute<uint8>  EK    : [30, 23, 22, 21, 13, 12, 11];
		attribute<string> Label : ['Urban centre','Dense urban cluster','Semi-dense urban cluster','Suburban grid cell','Rural cluster','Low density rural grid cell','Very low density grid cell'];
		attribute<uint32> BrushColor: [rgb(255,0,0),rgb(115,35,0),rgb(168,112,0),rgb(255,255,0),rgb(55,86,35),rgb(171,205,102),rgb(205,245,122)];
		attribute<string> name  := AsItemName(label);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	unit<uint32> Accessibility_Variants : nrofrows = 3, Descr = "Accessibility definitions used for endogenous accessibility grid-based calculations" 
	{
		attribute<string> label       : ['villages', 'towns', 'cities'];
		attribute<string> definition  : ['degurba_class = 13[TypologyK] || degurba_class > 21[TypologyK]', 'degurba_class > 21[TypologyK]', 'degurba_class = 30[TypologyK]'];
	}
	
	unit<uint32> Pot_fields : nrofrows = 8 
	{
		attribute<string> label : ['Pots_lin_5km', 'Pots_sqr_5km', 'Pots_lin_10km', 'Pots_sqr_10km', 'Pots_lin_20km', 'Pots_sqr_20km', 'Pots_lin_40km', 'Pots_sqr_40km'];
	}
	unit<uint32> percentages: nrofrows = 100 {
		attribute<string> 	label:= string(id(.)+1)+'%';
	}
			
	unit<uint8> AllShares := cat_range(0b, 101b)
	{
		attribute<string>         label                      := string(id(.));
		attribute<BU_DensityBins> DensityBins_rel            := Classify(id(.), BU_DensityBins/LB);
		attribute<Float32>        Moving_up_probability_data_North_America : 
		[ 
			0.0241790, 0.5573340, 0.8334890, 0.9228637, 0.9508959,
			0.9647802, 0.9698947, 0.9700665, 0.9718882, 0.9717724,
			0.9667857, 0.9626678, 0.9527690, 0.9487741, 0.9290178,
			0.9127614, 0.8788240, 0.8551580, 0.8244410, 0.8062070,
			0.7738980, 0.7432860, 0.7249770, 0.7185020, 0.699109,
			0.68371075,0.66537925,0.6518985, 0.6518985, 0.62594925,
			0.6172995, 0.612974625,0.600000, 0.5628200, 0.50194975,
			0.42705675,0.34759025,0.2854220, 0.2206985, 0.16564325,
			0.1088250, 0.0900000, 0.0711750, 0.0523500, 0.033525,
			0.0241790, 0.0200000, 0.0150000, 0.0100000, 0.00500,
			0.000
		];
		attribute<float32> 		 Moving_up_probability_data_South_America : 
		[
			0.005040, 0.409282, 0.71353, 0.849736, 0.920867, 0.943870,
			0.964241, 0.975228, 0.979390, 0.985859, 0.984002, 0.987752,
			0.993914, 0.992173, 0.991525, 0.993569, 0.990914, 0.993351,
			0.992641, 0.989288, 0.988284, 0.989769, 0.989908, 0.984259,
			0.981132, 0.978238, 0.957810, 0.953385, 0.927374, 0.898917,
			0.857143, 0.789330, 0.774245, 0.752071, 0.729897, 0.705128,
			0.668414, 0.631701, 0.594988, 0.558274, 0.521561, 0.484848,
			0.424242, 0.363636, 0.303030, 0.242424, 0.150000, 0.075000,
			0.037500, 0.018750, 0.000
		];
		attribute<float32>		Moving_up_probability_data_Africa :
		[
			0.031432, 0.696188, 0.828070, 0.884502, 0.910200, 0.926013,
			0.933702, 0.934872, 0.937916, 0.947251, 0.950060, 0.950267,
			0.958024, 0.957889, 0.954117, 0.953609, 0.961682, 0.964330,
			0.953095, 0.954387, 0.952751, 0.940070, 0.932757, 0.924008,
			0.910370, 0.889937, 0.893636, 0.865269, 0.837407, 0.813288,
			0.811421, 0.770950, 0.743998, 0.717047, 0.671233, 0.644647,
			0.637457, 0.630267, 0.623077, 0.595682, 0.568288, 0.540893,
			0.513499, 0.486104, 0.458710, 0.411111, 0.388889, 0.333333,
			0.283333, 0.233333, 0.000
		];
		attribute<float32>		Moving_up_probability_data_Asia :
		[
			0.054061, 0.720670, 0.844620, 0.902166, 0.930910, 0.951231,
			0.961078, 0.968653, 0.972492, 0.974917, 0.975232, 0.978492,
			0.978322, 0.973680, 0.973341, 0.971129, 0.970306, 0.965222,
			0.965616, 0.966241, 0.963742, 0.957046, 0.949168, 0.934408,
			0.914442, 0.878149, 0.843709, 0.793261, 0.740569, 0.714291,
			0.688013, 0.661735, 0.660590, 0.652582, 0.649199, 0.593972,
			0.574419, 0.578729, 0.583039, 0.593046, 0.603053, 0.616071,
			0.623188, 0.598550, 0.573912, 0.549275, 0.524637, 0.5,
			0.333333, 0.166666, 0.000
		];
		attribute<float32>		Moving_up_probability_data_Europe :
		[
			0.043953, 0.621913, 0.863046, 0.931906, 0.956331, 0.964760,
			0.969687, 0.972385, 0.971192, 0.974029, 0.971238, 0.968804,
			0.960719, 0.951444, 0.940296, 0.915294, 0.876164, 0.821507,
			0.779563, 0.722533, 0.683559, 0.675760, 0.621912, 0.610119,
			0.560811, 0.558794, 0.556777, 0.501410, 0.446043, 0.436975,
			0.644737, 0.739130, 0.759809, 0.780488, 0.777778, 0.833333,
			0.828431, 0.823529, 0.789474, 0.800987, 0.812500, 0.785714,
			0.742857, 0.700000, 0.611111, 0.522222, 0.433333, 0.344444,
			0.255555, 0.166666, 0.000
		];
		attribute<float32> 		Moving_up_probability_data_Australia_Oceania:= Moving_up_probability_data_Europe; 
		// not enough observations to create a reliable matrix in Aus_Oce, but reasonably similar to Europe moving-up probabilities
		
		attribute<uint32>         BrushColor                 := BU_DensityBins/BrushColor[DensityBins_rel];
	}
	unit<uint32> Shares_Per_Continent:= range(uint32, 0, #AllShares * #sourcedata/RegionalUnits/Continents) {
		attribute<float32> Moving_up_probability:= ='union_data(.,'+AsItemList('AllShares/Moving_up_probability_data_'+sourcedata/RegionalUnits/Continents/name)+')';
		attribute<uint32> BrushColor:= ='union_data(., '+AsItemList(const('AllShares/BrushColor',sourcedata/RegionalUnits/Continents, string))+')';
	}
	unit<uint8> BU_DensityBins := cat_range(0b, 15b)
	{
		attribute<AllShares>  LB: [0, 1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50];
		attribute<string> label := 'Share '+string(LB)+' - '+string(UB);
		attribute<uint8>  UB    := id(.) == last(id(.)) ? 101b : LB[id(.)+1b];
		
		attribute<uint32> BrushColor := switch( 
											case(LB == 0b, rgb(255,255,255))
											, case(LB == 1b, rgb(171,213,213))
											, case(LB == 2b, rgb(188,221,170))
											, case(LB == 3b, rgb(205,230,127))
											, case(LB == 4b, rgb(221,235,85))
											, case(LB == 5b, rgb(238,246,42))
											, case(LB == 10b, rgb(255,255,0))
											, case(LB == 15b, rgb(250,230,0))
											, case(LB == 20b, rgb(243,205,12))
											, case(LB == 25b, rgb(237,180,20))
											, case(LB == 30b, rgb(231,157,30))
											, case(LB == 35b, rgb(225,133,34))
											, case(LB == 40b, rgb(219,100,40))
											, case(LB == 45b, rgb(213,84,48))
											, case(LB == 50b, rgb(200,60,50))
											, rgb(200,200,200)
										), DialogType = "BrushColor";
	}
	// unit<uint8> Pop_DensityBins := cat_range(0b, 17b) 
	unit<uint32> Pop_DensityBins := cat_range(0, 502) 
	{
	
		attribute<string>  UB                := string(ClassBreaks[id(.) + 1]);
		attribute<string>  label             := IsNull(UB) ? string(ClassBreaks)+ ' < '  : string(ClassBreaks)+' - '+string(UB);
		attribute<uint32>  ClassBreaks_org   := uint32(sub_or_null(id(.),1)) * binsize;
		attribute<float32> ClassBreaks       := IsNull(ClassBreaks_org) ? 0f : ClassBreaks_org == 0 ? 1f : float32(ClassBreaks_org);
		// attribute<float32> ClassBreaks       : [0, 1, 10, 25, 50, 100, 200, 300, 600, 900, 1500, 3000, 4500, 6000, 7500, 10000, 20000];
		
		parameter<uint32> binsize :=100;
	}
	
	unit<uint8> Pop_Bins := cat_range(0b, 10b) 
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		attribute<float32> ClassBreaks       : [0, 1, 25, 50, 100, 500, 1000, 2000, 3000, 5000];
	}
	
	unit<uint8> BU_Residential_Area_Bins := cat_range(0b, 10b) 
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		attribute<float32> ClassBreaks       : [0, 0.0001, 0.001, 0.01, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25];
	}
	
	unit<uint8> BU_Total_Share_Bins := cat_range(0b, 10b) 
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		attribute<float32> ClassBreaks       : [0, 0.0001, 0.001, 0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25];
	}
}