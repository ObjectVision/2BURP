container Classifications : using = "units"
{
	unit<uint8>  GHS_years  : nrofrows = 10 
	{
		attribute<uint16> year: [ 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020]; 
		attribute<string> name := 'Y'+string(year); 
		attribute<string> prev_name := name[sub_or_null(id(.), 1b)];
	}
	
	unit<uint8> Continents : nrofrows = 6
	{
		attribute<string> name : ['Africa','Asia','Australia_Oceania','Europe','North_America','South_America'];
		attribute<string> label := name;
		container V := for_each_nedv(AsItemName(name), String(ID(.))+'[..]', void, .);
	}
	
	unit<uint32> Iter : nrofrows = 8
	{
		attribute<string> name := 'I'+string(id(.));
		attribute<string> PrevPopName := MakeDefined(name[sub_or_null(ID(.),1)]+'/NextPop', 'CurrState/Pop');
	}

	unit<uint8> ProjectionYears := range(uint8, uint8(substr(ModelParameters/StartYear, 2,2))+1b, 11b) //11b-1b becomes 2100 in this setup.
	{
		attribute<Year>   Yr             := (float32(id(.)) * 10f + 2000f)[Year];
		attribute<string> name           := 'Y'+string(Yr);
		
		attribute<string> prev_name      := id(.) != first(id(.)) ? name[id(.) - min_elem( id(.), 1b) ] : ModelParameters/StartYear;
		attribute<string> prevStateName  := id(.) != first(id(.)) ? name[id(.) - min_elem( id(.), 1b) ]+'/NewState' : 'InitialState';
	}
	
	unit<uint32> AllYears:= union_unit(GHS_years, ProjectionYears) {
		attribute<string> Name:= union_data(.,GHS_years/name, ProjectionYears/name);
		attribute<string> Prev_name:= union_data(., GHS_years/prev_name, ProjectionYears/Prev_name);
		attribute<Year>   Yr:= union_data(., GHS_years/year[Year], ProjectionYears/Yr);
		attribute<bool>   modelled:= union_data(., const(false,GHS_years,bool), const(true,ProjectionYears,bool));
	}
	
	unit<uint8> ProjectionYears_Delta := select_with_attr_by_cond(ProjectionYears, id(ProjectionYears) != first(id(ProjectionYears)));
	
	unit<uint8> TypologyK : nrofrows = 7, Descr = "Degree of urbanisation level 2 typologies", URL = "https://human-settlement.emergency.copernicus.eu/degurbaDefinitions.php"
	{
		attribute<uint8>  EK    : [30, 23, 22, 21, 13, 12, 11];
		attribute<string> Label : ['Urban centre','Dense urban cluster','Semi-dense urban cluster','Suburban grid cell','Rural cluster','Low density rural grid cell','Very low density grid cell'];
		attribute<uint32> BrushColor: [rgb(255,0,0),rgb(115,35,0),rgb(168,112,0),rgb(255,255,0),rgb(55,86,35),rgb(171,205,102),rgb(205,245,122)];
		attribute<string> name  := AsItemName(label);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	unit<uint8> Degurba_lvl1 : nrofrows = 3, Descr = "Degree of urbanisation levle 1 typologies" {
		attribute<uint8> 	EK :	[30, 20, 10];
		attribute<string>	Label:  ['Urban centre', 'Urban cluster', 'Rural grid cells'] ;
		attribute<uint32> 	BrushColor: [rgb(255,0,0),rgb(255,255,0),rgb(55,86,35)];
		attribute<string> 	name  := AsItemName(label);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	unit<uint32> Accessibility_Variants : nrofrows = 3, Descr = "Accessibility definitions used for endogenous accessibility grid-based calculations" 
	{
		attribute<string> label       : ['villages', 'towns', 'cities'];
		attribute<string> definition  : ['degurba_class = 13[TypologyK] || degurba_class > 21[TypologyK]', 'degurba_class > 21[TypologyK]', 'degurba_class = 30[TypologyK]'];
	}
	
	unit<uint32> Pot_fields : nrofrows = 8 
	{
		attribute<string> label : ['Pots_lin_5km', 'Pots_sqr_5km', 'Pots_lin_10km', 'Pots_sqr_10km', 'Pots_lin_20km', 'Pots_sqr_20km', 'Pots_lin_40km', 'Pots_sqr_40km'];
	}
	unit<uint32> percentages: nrofrows = 100 {
		attribute<string> 	label:= string(id(.)+1)+'%';
	}
			
	unit<uint8> AllShares := cat_range(0b, 101b)
	{
		attribute<string>         label                      := string(id(.));
		attribute<BU_DensityBins> DensityBins_rel            := Classify(id(.), BU_DensityBins/LB);
		attribute<Float32>        Moving_up_probability_data_North_America : 
		[ 
			0.046,1.207,2.698,3.553,4.224,4.758,5.148,5.385,5.541,5.706,5.727,5.787,
			5.772,5.648,5.500,5.512,5.274,5.109,4.746,4.639,4.475,4.188,3.968,3.735,
			3.510,3.199,3.077,2.942,2.688,2.493,2.335,2.363,2.191,2.030,1.815,1.682,
			1.727,1.478,1.327,1.181,1.252,1.135,0.959,0.684,0.691,0.669,0.755,0.574,
			0.446,0.435,0.438,0.158,0.067,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000

		];
		attribute<float32> 		 Moving_up_probability_data_South_America : 
		[
			0.007,0.858,2.561,4.156,5.525,6.603,7.543,8.491,8.916,9.441,9.708,9.930,
			10.247,10.408,10.521,10.402,10.328,10.279,10.273,10.148,9.882,9.631,9.408,
			9.111,8.814,8.377,8.122,7.867,7.337,7.023,6.530,6.148,5.767,5.296,4.963,4.629,
			3.762,3.488,3.221,2.810,2.382,2.118,1.854,1.467,1.159,1.066,0.912,0.869,0.875,
			0.784,0.724,0.364,0.571,0.452,0.333,0.000,0.000,0.000,0.000,0.000,0.000

		];
		attribute<float32>		Moving_up_probability_data_Africa :
		[
			0.070,2.093,3.077,3.891,4.573,5.338,5.833,6.242,6.679,6.884,7.187,7.398,
			7.609,7.502,7.560,7.414,7.538,7.375,7.279,7.182,7.085,6.842,6.655,6.500,
			6.345,5.725,5.576,5.126,4.913,4.700,4.594,4.267,3.868,3.775,3.389,3.255,
			2.952,2.651,2.382,2.216,1.863,1.795,1.643,1.482,1.540,1.419,1.116,1.193,
			1.166,0.866,0.779,0.693,0.606,0.520,0.433,0.346,0.260,0.173,0.087,0.000,0.000
		];
		attribute<float32>		Moving_up_probability_data_Asia :
		[
			0.146,2.091,2.977,3.736,4.470,5.147,5.682,6.320,6.735,7.160,7.551,7.717,
			8.119,8.314,8.268,8.388,8.458,8.394,8.406,8.182,8.049,7.878,7.755,7.523,
			7.271,6.863,6.466,6.201,5.953,5.626,5.265,4.989,4.477,4.187,3.761,3.430,
			2.953,2.650,2.340,2.029,1.822,1.724,1.601,1.614,1.498,1.569,1.769,1.913,
			2.056,2.222,2.272,2.321,2.142,1.963,1.619,1.275,0.931,0.588,0.244,0.000,0.000
		];
		attribute<float32>		Moving_up_probability_data_Europe :
		[
			0.060,0.952,1.943,2.742,3.341,3.839,4.203,4.508,4.788,4.960,5.062,5.158,
			5.243,5.233,5.260,5.187,5.166,5.026,4.830,4.734,4.548,4.390,4.259,3.979,
			3.827,3.675,3.374,3.215,3.024,2.735,2.502,2.336,2.185,2.017,1.863,1.704,
			1.660,1.788,1.638,1.516,1.740,1.646,1.910,2.175,2.378,2.479,2.581,2.585,
			2.418,2.250,2.025,1.800,1.575,1.350,1.125,0.900,0.675,0.450,0.225,0.000,0.000
		];
		attribute<float32> 		Moving_up_probability_data_Australia_Oceania: 
		[
			0.020,1.726,2.678,3.324,3.857,4.315,4.360,4.522,4.853,4.868,4.959,5.049,
			5.140,5.064,4.988,4.912,4.759,4.520,4.486,4.282,4.144,3.922,3.895,3.641,
			3.472,3.018,2.958,2.696,2.433,2.384,2.165,2.103,2.028,1.941,1.854,1.807,
			1.761,1.859,1.957,2.111,2.167,2.350,2.649,2.767,3.106,3.444,3.722,4.000,
			3.779,3.559,3.338,3.118,2.538,1.959,1.380,0.801,0.222,0.000,0.000,0.000,0.000
		]; 
		attribute<float32>		Moving_up_probability_data_stylised_Lewis_20241126:
		[
			0.042,1.295,2.440,3.207,3.807,4.304,4.570,4.805,5.061,5.178,5.249,5.331, 
			5.385,5.315,5.249,5.203,5.066,4.885,4.688,4.552,4.461,4.370,4.278,4.187,
			4.096,4.005,3.914,3.823,3.732,3.641,3.550,3.459,3.368,3.277,3.186,3.095,
			3.004,2.913,2.822,2.731,2.640,2.549,2.458,2.367,2.276,2.185,2.094,2.003,
			1.912,1.821,1.730,1.639,1.548,1.457,1.365,1.274,1.183,1.092,1.001,0.910,
			0.819,0.728,0.637,0.546,0.455,0.364,0.273,0.182,0.091,0.000,0.000,0.000
		], Descr = "ETs proposed by Lewis Dijkstra, 26 November 2024, to further concentrate built-up development. Deviation from empirics, with longer and larger tail going into 69%.";
		attribute<uint32>         BrushColor                 := BU_DensityBins/BrushColor[DensityBins_rel];
	}
	unit<uint32> Shares_Per_Continent:= range(uint32, 0, #AllShares * #sourcedata/RegionalUnits/Continents) {
		//attribute<float32> Moving_up_probability:= ='MakeDefined(union_data(.,'+AsItemList('AllShares/Moving_up_probability_data_'+sourcedata/RegionalUnits/Continents/name)+'), 0f)';
		attribute<float32> Moving_up_probability:= MakeDefined(union_data(.,AllShares/Moving_up_probability_data_stylised_Lewis_20241126,AllShares/Moving_up_probability_data_stylised_Lewis_20241126,AllShares/Moving_up_probability_data_stylised_Lewis_20241126,AllShares/Moving_up_probability_data_stylised_Lewis_20241126,AllShares/Moving_up_probability_data_stylised_Lewis_20241126,AllShares/Moving_up_probability_data_stylised_Lewis_20241126), 0f);
		attribute<uint32> BrushColor:= ='union_data(., '+AsItemList(const('AllShares/BrushColor',sourcedata/RegionalUnits/Continents, string))+')';
	}
	unit<uint8> BU_DensityBins := cat_range(0b, 15b)
	{
		attribute<AllShares>  LB: [0, 1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50];
		attribute<string> label := 'Share '+string(LB)+' - '+string(UB);
		attribute<uint8>  UB    := id(.) == last(id(.)) ? 101b : LB[id(.)+1b];
		
		attribute<uint32> BrushColor := switch( 
											case(LB == 0b, rgb(255,255,255))
											, case(LB == 1b, rgb(171,213,213))
											, case(LB == 2b, rgb(188,221,170))
											, case(LB == 3b, rgb(205,230,127))
											, case(LB == 4b, rgb(221,235,85))
											, case(LB == 5b, rgb(238,246,42))
											, case(LB == 10b, rgb(255,255,0))
											, case(LB == 15b, rgb(250,230,0))
											, case(LB == 20b, rgb(243,205,12))
											, case(LB == 25b, rgb(237,180,20))
											, case(LB == 30b, rgb(231,157,30))
											, case(LB == 35b, rgb(225,133,34))
											, case(LB == 40b, rgb(219,100,40))
											, case(LB == 45b, rgb(213,84,48))
											, case(LB == 50b, rgb(200,60,50))
											, rgb(200,200,200)
										), DialogType = "BrushColor";
	}
	// unit<uint8> Pop_DensityBins := cat_range(0b, 17b) 
	unit<uint32> Pop_DensityBins := cat_range(0, 502) 
	{
	
		attribute<string>  UB                := string(ClassBreaks[id(.) + 1]);
		attribute<string>  label             := IsNull(UB) ? string(ClassBreaks)+ ' < '  : string(ClassBreaks)+' - '+string(UB);
		attribute<uint32>  ClassBreaks_org   := uint32(sub_or_null(id(.),1)) * binsize;
		attribute<float32> ClassBreaks       := IsNull(ClassBreaks_org) ? 0f : ClassBreaks_org == 0 ? 1f : float32(ClassBreaks_org);
		// attribute<float32> ClassBreaks       : [0, 1, 10, 25, 50, 100, 200, 300, 600, 900, 1500, 3000, 4500, 6000, 7500, 10000, 20000];
		
		parameter<uint32> binsize :=100;
	}
	
	unit<uint8> Pop_Bins := cat_range(0b, 16b) //10
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		// attribute<float32> ClassBreaks       : [0, 1, 25, 50, 100, 500, 1000, 2000, 3000, 5000];
		attribute<float32> ClassBreaks       : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 50, 500, 3000, 5000];
	}
	
	unit<uint8> BU_Residential_Area_Bins := cat_range(0b, 10b) 
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		attribute<float32> ClassBreaks       : [0, 0.0001, 0.001, 0.01, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25];
	}
	
	unit<uint8> BU_Total_Share_Bins := cat_range(0b, 10b) 
	{
		attribute<string>  Label             := 'LB_'+string(ClassBreaks);
		attribute<float32> ClassBreaks       : [0, 0.0001, 0.001, 0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25];
	}
}