////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration Towards an Urban Preview - 2UP 2021                       //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Bas van Bemmel
// Function:

container Analysis: using = "units"
{
	#include <Calibration_AutoGLM.dms>
	#include <Scenarios.dms>              //Main core of the model to calculate indicators of SSP-scenarios
	#include <Scenarios_Past.dms>         //Main core of the model to calculate indicators of Past (Validation)

	container SSPs := 
		for_each_ne(Classifications/SSP/Name, 
			'AnalysePopAllocation_T(Scenarios/SSPs/'+Classifications/SSP/Name+')'
		);
		
	template AnalysePopAllocation_T 
	{
		container SSPoutput;
		
		container UrbanDif2010_2100 
		{

			unit<uint8> OverlayRegios: nrofrows = 2
			{
				attribute<string> namen: ['UrbanY2010', 'UrbanY2100'];
			}
		
			container OverlayGrids
			{
				attribute<uint8> UrbanY2010(domain)                         :=  Input/UrbanArea/UrbanArea2010/ReadData[uint8];
				attribute<uint8> UrbanY2100(Scenarios/SSPs/SSP2/CompactedDomain) :=  SSPoutput/ProjectionDates/Y2100/NewState/IsUrban[uint8];
			}
			
			unit<uint16> UrbanOverlay_2100_2010
			:= overlay(OverlayRegios/namen, Scenarios/SSPs/SSP2/CompactedDomain, OverlayGrids);
		}

		container PopDif 
		{
			attribute<PersonDif>            pop_diff_obs10_model10(Scenarios/SSPs/SSP2/CompactedDomain):= SSPoutput/ProjectionDates/Y2010/Iters/I0/CurrPop - SSPoutput/ProjectionDates/Y2010/UrbanPop;
			attribute<PersonDif>            pop_diff_2100_2010(Scenarios/SSPs/SSP2/CompactedDomain)        := SSPoutput/ProjectionDates/Y2100/NewState/Pop - SSPoutput/ProjectionDates/Y2010/NewState/Pop;
			attribute<float32>              sprawl_shrinkage(Scenarios/SSPs/SSP2/CompactedDomain)      := pop_diff_2100_2010 > 0f ? 1f : -1f;
			attribute<MultiplicationFactor> Density_2100_2010 (Scenarios/SSPs/SSP2/CompactedDomain)    := (SSPoutput/ProjectionDates/Y2100/NewState/Pop / SSPoutput/ProjectionDates/Y2010/NewState/Pop);
		}

		container InputUrbanDif2010 
		{
			unit<uint8> OverlayRegios: nrofrows = 2
			{
				attribute<string> namen: ['InputUrbanY2010', 'UrbanY2010'];
			}

			container OverlayGrids
			{
				attribute<uint8> InputUrbanY2010 (domain)             :=  Input/UrbanArea/UrbanArea2010/ReadData[uint8];
				attribute<uint8> UrbanY2010  (Scenarios/SSPs/SSP2/CompactedDomain) :=  SSPoutput/InitialState/IsUrban[uint8];
			}

			unit<uint16> Overlay_10_input10
			:= overlay(OverlayRegios/namen, Scenarios/SSPs/SSP2/CompactedDomain, OverlayGrids);
		}

		container BuiltUpDiff
		{
			unit<uint8> DifferenceClass: nrofrows = 4
			{
				attribute<uint32> Brusholor
				:	DialogType = "BrushColor"
				,	[rgb(255,255,255),rgb(0,128,192),rgb(215,0,0),rgb(255,152,108)];

				attribute<String> Label
				:	DialogType = "LabelText"
				,	['both sight years not built',
					'2010 built on; 2100 not built on',
					'2100 built on; 2100 not built on',
					'both sight years built'];
			}

			container IsUrbanDiff := DiffTemplate(SSPoutput/InitialState/IsUrban, SSPoutput/ProjectionDates/Y2100/NewState/IsUrban);

			template DiffTemplate
			{
				attribute<bool> base_2010 (Scenarios/SSPs/SSP2/CompactedDomain);
				attribute<bool> case_2100 (Scenarios/SSPs/SSP2/CompactedDomain);
						
				attribute<DifferenceClass> Difference (Scenarios/SSPs/SSP2/CompactedDomain)
				:	Label = "Difference between base_2010 and case_2100"
				,	Expr  =
						"switch("
							" case( base_2010 && !case_2100, value(1, DifferenceClass))"
							",case(!base_2010 &&  case_2100, value(2, DifferenceClass))"
							",case( base_2010 &&  case_2100, value(3, DifferenceClass))"
							",value(0, DifferenceClass)"
						")"; 
			}
		}
	}


}