////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration Towards an Urban Preview - 2UP 2021                       //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Bas van Bemmel
// Function:

container HYDEScen
{
	container Import: url="%MondiaalDataDir%/HYDE/HYDE32.txt"
	{
		unit<uint32> SSP1
			: StorageName = "%projdir%/data/HYDE/HYDE_SSP1_popdens.csv"
			, StorageType = "gdal.vect"
			, StorageReadonly = "True"
			, DialogType  = "Map"
			, DialogData  = "PolyData"
		{
			attribute<Input/administrative/Countries/Country > Country_rel := rlookup(Region, Input/administrative/Countries/Country/ISO3);
			attribute<Input/LatLong> PolyData (polygon) := Input/administrative/Countries/Country/Geometry[ Country_rel ];
			attribute<string> Label := Region;
	
			parameter<string> Name := 'SSP1';
		}
	
		unit<uint32> SSP2
			: StorageName = "%projdir%/data/HYDE/HYDE_SSP2_popdens.csv"
			, StorageType = "gdal.vect"
			, StorageReadonly = "True"
			, DialogType  = "Map"
			, DialogData  = "PolyData"
		{
			attribute<Input/administrative/Countries/Country > Country_rel := rlookup(Region, Input/administrative/Countries/Country/ISO3);
			attribute<Input/LatLong> PolyData (polygon) := Input/administrative/Countries/Country/Geometry[ Country_rel ];
			attribute<string> Label := Region;
			
			parameter<string> Name := 'SSP2';
		}
	
		unit<uint32> SSP3
			: StorageName = "%projdir%/data/HYDE/HYDE_SSP3_popdens.csv" 
			, StorageType = "gdal.vect"
			, StorageReadonly = "True"
			, DialogType  = "Map"
			, DialogData  = "PolyData"
		{
			attribute<Input/administrative/Countries/Country > Country_rel := rlookup(Region, Input/administrative/Countries/Country/ISO3);
			attribute<Input/LatLong> PolyData (polygon) := Input/administrative/Countries/Country/Geometry[ Country_rel ];
			attribute<string> Label := Region;
			
			parameter<string> Name := 'SSP3';
		}
	
		unit<uint32> SSP4
			: StorageName = "%projdir%/data/HYDE/HYDE_SSP4_popdens.csv"
			, StorageType = "gdal.vect"
			, StorageReadonly = "True"
			, DialogType  = "Map"
			, DialogData  = "PolyData"
		{
			attribute<Input/administrative/Countries/Country > Country_rel := rlookup(Region, Input/administrative/Countries/Country/ISO3);
			attribute<Input/LatLong> PolyData (polygon) := Input/administrative/Countries/Country/Geometry[ Country_rel ];
			attribute<string> Label := Region;
			
			parameter<string> Name := 'SSP4';
		}
	
		unit<uint32> SSP5
			: StorageName = "%projdir%/data/HYDE/HYDE_SSP5_popdens.csv"
			, StorageType = "gdal.vect"
			, StorageReadonly = "True"
			, DialogType  = "Map"
			, DialogData  = "PolyData"
		{
			attribute<Input/administrative/Countries/Country > Country_rel := rlookup(Region, Input/administrative/Countries/Country/ISO3);
			attribute<Input/LatLong> PolyData (polygon) := Input/administrative/Countries/Country/Geometry[ Country_rel ];
			attribute<string> Label := Region;
			
			parameter<string> Name := 'SSP5';
		}
	}
	
	
	//  Function to calculate total and additional urban area for the projection dates (HYDE index) based on the HYDE average urban density figures.
	container HYDEindex
	{
		container SSPs := 
			for_each_ne(Scenarios/SSP/Name, 
				'HYDEscenarios(Import/'+Scenarios/SSP/Name+')'
				);
	
		template HYDEscenarios
		{
		
			container HYDEclaim;
			
			parameter<string> Scenario:= HYDEclaim/Name;
			parameter<string> PopulationInput := Input/Method;

			container Start {
				container NewState
				{
					attribute<km2> UrbanArea (Input/administrative/Countries/Country ) := Input/Population/M1/Urban_pop_2010/UrbanArea;
				}
			}
	
	// activate if running with HYDEINDEX 1 (not based on external files but internal code)
// 			container Indices :=
// 				for_each_nedv(
// 					Classifications/ProjectionDate/name,
// 					'const(1f,Input/administrative/Countries/Country )',
// 					Input/administrative/Countries/Country ,
// 					float32
// 				);

			container Indices :=
				for_each_nedv(Classifications/ProjectionDate/name,
					replace(
							'Import/@SSP@/_@YR@[float32][invert(Import/@SSP@/Country_rel)] '
								'/ Import/@SSP@/_2010[float32][invert(Import/@SSP@/Country_rel)]'
					,	'@SSP@', Scenario
					,	'@YR@', string(Classifications/ProjectionDate/Yr)
					)
				,	Input/administrative/Countries/Country, float32
				);
	
			container ProjectionDates :=
				for_each_nedv(Classifications/ProjectionDate/name,
				
				/Input/InPresentUrban='InPresentUrban' ? 
					replace(
				'(MakeDefined(Claims/Scenario/@Input@/@SSP@/Filedata/URBANPOP2010[float32][invert(Claims/Scenario/@Input@/@SSP@/Filedata/Country_rel)] * 1000000[Person], 0[Person]) '
							'/ Input/Population/@Input@/Urban_pop_2010/UrbanMeanPopDensity)'
						'/ Indices/@YRN@'
					,	'@SSP@', Scenario
					,	'@YR@', string(Classifications/ProjectionDate/Yr)
					,	'@YRN@', Classifications/ProjectionDate/Name
					,	'@Input@', PopulationInput
					)
				: 
					replace(
						'(MakeDefined(Claims/Scenario/@Input@/@SSP@/Filedata/URBANPOP@YR@[float32][invert(Claims/Scenario/@Input@/@SSP@/Filedata/Country_rel)] * 1000000[Person], 0[Person]) '
							'/ Input/Population/@Input@/Urban_pop_2010/UrbanMeanPopDensity)'
						'/ Indices/@YRN@'
					,	'@SSP@', Scenario
					,	'@YR@', string(Classifications/ProjectionDate/Yr)
					,	'@YRN@', Classifications/ProjectionDate/Name
					,	'@Input@', PopulationInput
					)
				,	Input/administrative/Countries/Country , km2
				);

	
			container Evaluation
			{
				attribute<km2> Diff_2050_2010 (Input/administrative/Countries/Country ) := ProjectionDates/Y2050 - ProjectionDates/Y2010;
			}
			
		}
	}
}