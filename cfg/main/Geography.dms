container Geography : using = "units"
{
	#include<impl.dms>
	
	unit<dpoint> CurrentProjection      :=  =ModelParameters/domain_EPSG == '54009' ? 'Mollweide' : 'LatLong';
	unit<dpoint> CurrentProjection_base :=  =ModelParameters/domain_EPSG == '54009' ? 'Mollweide_base' : 'LatLong_Base';
	
	unit<dpoint> LatLong       := ='StudyAreas/LatLong_'+ModelParameters/StudyArea;
	unit<dpoint> LatLong_Base  : SpatialReference = "EPSG:4326", DialogData = "wms_layer_latlong", Descr = "1 degree = 60 arc min; 1 arc min = 60 arc seconds; 1 degree = 3600 arc seconds; 1 arc second is about 30m at the equator."
	{
		parameter<float32> ViewPortMinSize       := 1f / 3600f;
		parameter<float32> PenWorldWidth         := 100f / 3600f, DialogType = "PenWorldWidth";
		parameter<float32> LabelWorldSize        := 10f / 3600f, DialogType = "LabelWorldSize";
		parameter<km>      LengthDegree          := 40000km / 360f; // 40075.017d/360d;//at Equator
		parameter<string>  eval_lat_factor     	 := 'Float32(cos(pointrow(geometry_LL) * 2d*pi() / 360d))';
	}
	unit<ipoint> LatLong_base_ip             := gridset(LatLong_Base,  point_xy(0.001d, 0.001d), point_xy(0.0d, 0.0d), ipoint); 
	unit<ipoint> Mollweide_base_ip           := gridset(Mollweide_base,  point_xy(1d, 1d), point_xy(0.0d, 0.0d), ipoint); 
	unit<dpoint> Mollweide_base         : SpatialReference = "ESRI:54009", DialogData = "/sourcedata/RegionalUnits/FunctionalAreas/Geometry";
	unit<dpoint> Mollweide              := ='StudyAreas/Mollweide_'+ModelParameters/StudyArea, DialogData = "/sourcedata/RegionalUnits/FunctionalAreas/Geometry";
	Unit<dpoint> SphericalMercator_base : SpatialReference = "EPSG:3857", DialogData = "tms_layer_osm_webmercator";
	Unit<dpoint> SphericalMercator      := range(SphericalMercator_base, point_yx(-16000000.0, -20000000.0),  point_yx(16000000.0, 20000000.0));
	

	unit<ipoint> Mollweide_grid_base
	{
		parameter<float64> x_min := -18040095.7d;
		parameter<float64> x_max := 18040095.7d;
		parameter<float64> y_min := -9020047.85d;
		parameter<float64> y_max := 9020047.85d;
		
		parameter<Mollweide_base> LB := point_xy(x_min, y_min, Mollweide_base);
		parameter<Mollweide_base> UB := point_xy(x_max, y_max, Mollweide_base);
		parameter<Mollweide_base> TopLeft := point_xy(x_min, y_max, Mollweide_base);
		
		parameter<int32> nr_cols := int32((x_max - x_min) / ModelParameters/MW_Gridsize);
		parameter<int32> nr_rows := int32((y_max - y_min) / ModelParameters/MW_Gridsize);
		
		parameter<string>  eval_lat_factor     	 := 'const(1f, .)';
	}

	container StudyAreas : using = "SourceData/RegionalUnits"
	{
		unit<dpoint> LatLong_World                    := range(LatLong_Base,   point_yx(-90.0,-180.0), point_yx(90.0, 180.0)) {parameter<LatLong_Base> geometry (polygon):= SourceData/RegionalUnits/World/Geometry_LL[SourceData/RegionalUnits/World/V/World]; attribute<SourceData/RegionalUnits/World> per_domain (domain) := poly2grid(SourceData/RegionalUnits/World/geometry_LL, domain);}
		unit<dpoint> Mollweide_World                  := range(Mollweide_base, point_yx(Mollweide_grid_base/y_min,Mollweide_grid_base/x_min), point_yx(Mollweide_grid_base/y_max, Mollweide_grid_base/x_max)) {parameter<Mollweide_base> geometry (polygon):= SourceData/RegionalUnits/World/Geometry_MW[SourceData/RegionalUnits/World/V/World]; attribute<SourceData/RegionalUnits/World> per_domain (domain) := poly2grid(SourceData/RegionalUnits/World/Geometry_MW, domain);}
		
		//continents
		unit<dpoint> LatLong_Europe                   := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Europe/geometry_LL),            Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Europe/geometry_LL)){ parameter<LatLong_base> geometry     (poly) := SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Europe/geometry_LL; attribute<Continents/GetPerContinentGeometry/Europe/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/Europe/unit/geometry_LL, domain);}
		unit<dpoint> LatLong_Africa                   := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Africa/geometry_LL),            Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Africa/geometry_LL))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Africa/geometry_LL; attribute<Continents/GetPerContinentGeometry/Africa/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/Africa/unit/geometry_LL, domain);}
		unit<dpoint> LatLong_Asia                     := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Asia/geometry_LL),              Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Asia/geometry_LL))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Asia/geometry_LL; attribute<Continents/GetPerContinentGeometry/Asia/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/Asia/unit/geometry_LL, domain);}
		unit<dpoint> LatLong_Australia_Oceania        := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Australia_Oceania/geometry_LL), Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Australia_Oceania/geometry_LL))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Australia_Oceania/geometry_LL; attribute<Continents/GetPerContinentGeometry/Australia_Oceania/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/Australia_Oceania/unit/geometry_LL, domain);}
		unit<dpoint> LatLong_North_America            := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/North_America/geometry_LL),     Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/North_America/geometry_LL))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/North_America/geometry_LL; attribute<Continents/GetPerContinentGeometry/North_America/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/North_America/unit/geometry_LL, domain);}
		unit<dpoint> LatLong_South_America            := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/South_America/geometry_LL),     Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/South_America/geometry_LL))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/South_America/geometry_LL; attribute<Continents/GetPerContinentGeometry/South_America/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/South_America/unit/geometry_LL, domain);}
		
		unit<dpoint> Mollweide_Africa                 := range(Mollweide_base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Africa/geometry_MW),       		Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Africa/geometry_MW))  {parameter<Mollweide_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Africa/geometry_MW; attribute<Continents/GetPerContinentGeometry/Africa/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/Africa/unit/geometry_MW, domain);}
		unit<dpoint> Mollweide_Asia             	  := range(Mollweide_base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Asia/geometry_MW),        		Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Asia/geometry_MW))  {parameter<Mollweide_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Asia/geometry_MW; attribute<Continents/GetPerContinentGeometry/Asia/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/Asia/unit/geometry_MW, domain);}
		unit<dpoint> Mollweide_Australia_Oceania      := range(Mollweide_base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Australia_Oceania/geometry_MW),  Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Australia_Oceania/geometry_MW))  {parameter<Mollweide_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Australia_Oceania/geometry_MW; attribute<Continents/GetPerContinentGeometry/Australia_Oceania/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/Australia_Oceania/unit/geometry_MW, domain);}
		unit<dpoint> Mollweide_Europe                 := range(Mollweide_base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Europe/geometry_MW),       		Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Europe/geometry_MW))  {parameter<Mollweide_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Europe/geometry_MW; attribute<Continents/GetPerContinentGeometry/Europe/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/Europe/unit/geometry_MW, domain);}
		unit<dpoint> Mollweide_North_America          := range(Mollweide_base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/North_America/geometry_MW),      Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/North_America/geometry_MW))  {parameter<Mollweide_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/North_America/geometry_MW; attribute<Continents/GetPerContinentGeometry/North_America/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/North_America/unit/geometry_MW, domain);}
		unit<dpoint> Mollweide_South_America          := range(Mollweide_base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/South_America/geometry_MW),      Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/South_America/geometry_MW))  {parameter<Mollweide_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/South_America/geometry_MW; attribute<Continents/GetPerContinentGeometry/South_America/unit> per_domain (domain) := poly2grid(Continents/GetPerContinentGeometry/South_America/unit/geometry_MW, domain);}
		
		//countries
		unit<dpoint> Mollweide_Netherlands            := range(Mollweide_base, Lower_Bound(SourceData/RegionalUnits/Countries/Geometry_MW[SourceData/RegionalUnits/Countries/V/Netherlands]), Upper_Bound(SourceData/RegionalUnits/Countries/Geometry_MW[SourceData/RegionalUnits/Countries/V/Netherlands])){parameter<Mollweide_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_MW[SourceData/RegionalUnits/Countries/V/Netherlands]; attribute<Countries/GetPerCountryGeometry/Netherlands/unit> per_domain (domain) := poly2grid(Countries/GetPerCountryGeometry/Netherlands/unit/geometry_MW, domain);}
		unit<dpoint> Mollweide_Nicaragua              := range(Mollweide_base, Lower_Bound(SourceData/RegionalUnits/Countries/Geometry_MW[SourceData/RegionalUnits/Countries/V/Nicaragua]), Upper_Bound(SourceData/RegionalUnits/Countries/Geometry_MW[SourceData/RegionalUnits/Countries/V/Nicaragua])){parameter<Mollweide_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_MW[SourceData/RegionalUnits/Countries/V/Nicaragua]; attribute<Countries/GetPerCountryGeometry/Nicaragua/unit> per_domain (domain) := poly2grid(Countries/GetPerCountryGeometry/Nicaragua/unit/geometry_MW, domain);}
		unit<dpoint> LatLong_Netherlands              := range(LatLong_Base, point_yx( 45.0, -2.0),  point_yx(54.0,11.0)) {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Netherlands];}
		unit<dpoint> LatLong_Nicaragua                := range(LatLong_Base, point_yx( 8.66, -90.0), point_yx(15.0, -80.0)) {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Nicaragua];}
		unit<dpoint> LatLong_Nigeria                  := range(LatLong_Base, point_yx( 0.0, -3.0),   point_yx(17.0, 20.0)) {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Nigeria];}
		unit<dpoint> LatLong_Morocco                  := range(LatLong_Base, point_yx( 23.0, -17.0),   point_yx(37.0, 0.0)) {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Morocco];}
		unit<dpoint> LatLong_Cabo_Verde               := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Cabo_Verde]), Upper_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Cabo_Verde]))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Cabo_Verde];}
		unit<dpoint> LatLong_Chad                     := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Chad]), Upper_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Chad]))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Chad];}
		unit<dpoint> LatLong_Tanzania                 := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Tanzania]), Upper_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Tanzania]))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Tanzania];}
		unit<dpoint> LatLong_Germany                  := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Germany]), Upper_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Germany]))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Germany];}
		unit<dpoint> LatLong_Poland                   := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Poland]), Upper_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Poland]))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Poland];}
		unit<dpoint> LatLong_China                    := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/China]), Upper_Bound(SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/China]))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/China];}
		unit<dpoint> LatLong_RwandaTanzKen            := range(LatLong_Base, point_yx(-7.41, 26.11),   point_yx(-0.11, 42.65)) 
		{
			unit<uint32> comb : nrofrows = 5
			{
				attribute<LatLong_base> geometry (poly) := union_data(.
															, SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Uganda]
															, SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Kenya]
															, SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Rwanda]
															, SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Burundi]
															, SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Tanzania]);
			}
			parameter<LatLong_base> geometry (polygon) := bp_union_polygon(comb/geometry[latlong_ip])[latlong_base];
		}
	}

	unit<wpoint> domain := =ModelParameters/domain_EPSG == '54009' ? 'domain_Mollweide' : 'domain_LatLong';
	
	unit<wpoint> domain_Mollweide := TiledUnit(Impl/StudyAreaTile/LB, Impl/StudyAreaTile/UB), DialogData = "/sourcedata/RegionalUnits/FunctionalAreas/Geometry"
	{

		attribute<Mollweide>      geometry          := id(.)[Mollweide] + point_xy(0.5 * /ModelParameters/MW_Gridsize,0.5 * /ModelParameters/MW_Gridsize, Mollweide), LazyCalculated = "True", Dialogdata = "Mollweide";

		attribute<LatLong>        geometry_LL       := convert(geometry, LatLong);
		attribute<Float32>        lat_factor        := =Mollweide_grid_base/eval_lat_factor;

		attribute<domain>         domain_rel        := mapping(., domain);
		attribute<domain_sub>     domain_sub_rel    := mapping(., domain_sub);  

		attribute<km2>            area              := const(1[km2], .);
		attribute<bool>           IsCompactedDomain := Impl/GridData/FreeLand; //, StorageName = "='%LocalDataProjDir%/Temp/CD/'+/ModelParameters/StudyArea+'.tif'";
		
		container Read_PerContinentFiles :=
			for_each_ndnvat(
				Classifications/Continents/name
				, Domain_perContinent
				, Classifications/Continents/name
				, float32
				, '%LocalDataProjDir%/Temp/CD/'+Classifications/Continents/name+'.tif'
				, 'gdal.grid'
			)
		{	
			attribute<Classifications/Continents>  Continent_rel (impl/MakeDomain_World/domain) := poly2grid(/SourceData/RegionalUnits/Continents/geometry_MW, impl/MakeDomain_World/domain);
			attribute<float32>     Mozaic        (Impl/MakeDomain_World/domain) := ='raster_merge(Continent_rel, float32, '+AsItemList(Classifications/Continents/name)+')', StorageName = "%LocalDataProjDir%/Temp/CD/World.tif";
		}

		container Domain_perContinent :=
			for_each_nex(
				Classifications/Continents/name
				, 'Geography/Impl/MakeDomain_perContinent/'+Classifications/Continents/name+'/domain'   
				, wpoint
			);
	}

	unit<uint32> CompactedDomain := select_with_org_rel(domain/IsCompactedDomain), label = "allocation domain", DialogType = "Map", DialogData = "BaseGrid", using = "SourceData/RegionalUnits"
	{
		attribute<.>                 BaseGrid  (domain)    := recollect_by_cond(domain/IsCompactedDomain, ID(.));
		attribute<float32>           lat_factor            := collect_by_cond(CompactedDomain, domain/lat_factor);
		attribute<km2>               area                  := domain_rel->area;
		attribute<LatLong>           geometry_LL           := domain/geometry_LL[domain_rel];
		attribute<SphericalMercator> geometry_mer          := convert(geometry_LL, SphericalMercator);
		attribute<Countries>         Country_rel           := Countries/per_domain[domain_rel];
		attribute<Continents>        Continent_rel         := Countries/Continents_rel[Country_rel];
		attribute<uint32>            Continent_add_mup     := #Classifications/AllShares[uint32] * Continent_rel[uint32];
		attribute<FunctionalAreas>   FunctionalAreas_rel   := FunctionalAreas/per_domain[domain_rel];
		attribute<domain>            domain_rel            := org_rel;
	}
	
	unit<uint64> CompactedDomainSub := select_with_org_rel(domain_sub/domain_rel->IsCompactedDomain), DialogType = "Map", DialogData = "BaseGrid"
	{
		attribute<.>                 BaseGrid  (domain_sub) := recollect_by_cond(domain_sub/domain_rel->IsCompactedDomain, ID(.));
		attribute<km2>               area                   := collect_by_cond(CompactedDomainSub, domain_sub/area);
		attribute<domain>            domain_rel             := domain_sub/domain_rel[domain_sub_rel], LazyCalculated = "True"; 
		attribute<domain_sub>        domain_sub_rel         := org_rel;
		attribute<CompactedDomain>   CompactedDomain_rel    := lookup(domain_rel, CompactedDomain/BaseGrid), LazyCalculated = "True";
	}
	
	#include <DistMatrices.dms>
	#include <wms_layer_latlong.dms>
	// #include <wms_layer_mollweide.dms>
	#include <tms_layer_osm_webmercator.dms>
	
	
	unit<wpoint> domain_LatLong := TiledUnit(Impl/StudyAreaTile/LB, Impl/StudyAreaTile/UB)
	{
		attribute<LatLong>        geometry_LL       := id(.)[LatLong] + point_xy(0.5 * /ModelParameters/WGS_Gridsize,0.5 * /ModelParameters/WGS_Gridsize, LatLong), LazyCalculated = "True", Dialogdata = "LatLong";
		unit<uint16> rowset := range(uint16, pointrow(Lowerbound(.)), pointrow(Upperbound(.)))
		{
			attribute<float64>    lat_top           := pointrow( point_yx(ID(.), const(0w, .), domain)[LatLong] );
			attribute<float64>    lat_mid           := lat_top  + 0.5 * pointrow(getprojectionfactor(domain)[LatLong]);
			attribute<Float32>    lat_factor        := Float32( cos(lat_mid * 2d*pi() / 360d ) );
			parameter<km2>        Equatorial_Area   := sqr(Float32(pointrow(getprojectionfactor(domain)[LatLong])) * LatLong_base/lengthdegree);
			attribute<km2>        area              := lat_factor * Equatorial_Area;
		}
		
		attribute<rowset>         rowset_rel        := pointrow(ID(.)), LazyCalculated = "True";
		attribute<LatLong>        geometry          := id(.)[LatLong], LazyCalculated = "True";
		attribute<Mollweide_grid> mollweide_rel     := convert(geometry, Mollweide_grid), LazyCalculated = "True";

		attribute<domain>         domain_rel        := mapping(., domain);
		attribute<domain_sub>     domain_sub_rel    := mapping(., domain_sub);  

		parameter<uint32>         boundrange_c      := uint32(PointCol(boundrange(domain)));
		attribute<Float32>        lat_factor        := rowset_rel->lat_factor, LazyCalculated = "True";
		attribute<km2>            area              := rowset_rel->area, LazyCalculated = "True";
		attribute<bool>           IsCompactedDomain := Impl/GridData/FreeLand; //, StorageName = "='%LocalDataProjDir%/Temp/CD/'+/ModelParameters/StudyArea+'.tif'";
		
		container Read_PerContinentFiles :=
			for_each_ndnvat(
				Classifications/Continents/name
				, Domain_perContinent
				, Classifications/Continents/name
				, float32
				, '%LocalDataProjDir%/Temp/CD/'+Classifications/Continents/name+'.tif'
				, 'gdal.grid'
			)
		{	
			attribute<Classifications/Continents>  Continent_rel (impl/MakeDomain_World/domain) := poly2grid(/SourceData/RegionalUnits/Continents/geometry, impl/MakeDomain_World/domain);
			attribute<float32>     Mozaic        (Impl/MakeDomain_World/domain) := ='raster_merge(Continent_rel, float32, '+AsItemList(Classifications/Continents/name)+')', StorageName = "%LocalDataProjDir%/Temp/CD/World.tif";
		}

		container Domain_perContinent :=
			for_each_nex(
				Classifications/Continents/name
				, 'Geography/Impl/MakeDomain_perContinent/'+Classifications/Continents/name+'/domain'   
				, wpoint
			);
		
	}	
	
	// unit<ipoint> domain_sub := TiledUnit(Impl/StudyAreaTile/LB_sub, Impl/StudyAreaTile/UB_sub)
	// {
		// attribute<domain>     domain_rel     := mapping(., domain);
		// attribute<domain_sub> domain_sub_rel := mapping(., domain_sub);  
		// attribute<km2>        area           := const(0.01[km2],.);
	// }
	
	
	unit<ipoint> domain_sub := TiledUnit(Impl/StudyAreaTile/LB_sub, Impl/StudyAreaTile/UB_sub)
	{
		attribute<domain>     domain_rel     := mapping(., domain);
		attribute<domain_sub> domain_sub_rel := mapping(., domain_sub);  
		
		unit<int32> rowset := range(int32, pointrow(Lowerbound(domain_sub)), pointrow(Upperbound(domain_sub)))
		{
			attribute<float64> lat_top    := pointrow( point_yx(ID(.), const(0i, .), domain_sub)[LatLong] );
			attribute<float64> lat_mid    := lat_top  + 0.5 * pointrow(getprojectionfactor(domain_sub)[LatLong]);
			attribute<Float32> lat_factor := Float32( cos(lat_mid * 2d*pi() / 360d ) );
			attribute<km2>     area       := (lat_factor * sqr(Float32(pointrow(getprojectionfactor(domain_sub)[LatLong])) * LatLong_base/lengthdegree));
		}
		attribute<rowset>     rowset_rel   := pointrow(ID(.)), LazyCalculated = "True";
		attribute<km2>        area         := =ModelParameters/domain_EPSG == '54009' ? 'const(0.01[km2],.)' : 'rowset_rel -> area', LazyCalculated = "True"; //use rowset area
	}
		
}