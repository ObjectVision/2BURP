container Geography : using = "units"
{
	#include<impl.dms>
	
	unit<dpoint> LatLong       := ='StudyAreas/LatLong_'+ModelParameters/StudyArea;
	unit<dpoint> LatLong_Base  : SpatialReference = "EPSG:4326", DialogData = "wms_layer_latlong"
	{
		parameter<float32> ViewPortMinSize       := 1f / 3600f;
		parameter<float32> PenWorldWidth         := 100f / 3600f, DialogType = "PenWorldWidth";
		parameter<float32> LabelWorldSize        := 10f / 3600f, DialogType = "LabelWorldSize";
		parameter<km>      LengthDegree          := 40000km / 360f; // 40075.017d/360d;//at Equator
	}
	unit<ipoint> LatLong_ip             := gridset(LatLong,  point_xy(0.001d, 0.001d), point_xy(0.0d, 0.0d), ipoint); 
	unit<dpoint> WorldMollweide         : SpatialReference = "ESRI:54009";
	Unit<dpoint> SphericalMercator_base : SpatialReference = "EPSG:3857", DialogData = "tms_layer_osm_webmercator";
	Unit<dpoint> SphericalMercator      := range(SphericalMercator_base, point_yx(-16000000.0, -20000000.0),  point_yx(16000000.0, 20000000.0));
	
	
	// unit<ipoint> WebMercator_grid := 
		// gridset(
			// SphericalMercator
			// , point_yx(SphericalMercator/SourceRasterFactor_in_eq_m, SphericalMercator/SourceRasterFactor_in_eq_m)
			// , point_xy(-16000000.0, -20000000.0)
			// , ipoint
		// )
	// {
		// attribute<LatLong>            ll_rel     := mapping(., LatLong);
		// attribute<domain>             domain_rel := value(ll_rel, domain);
	// }
	

	unit<ipoint> Mollweide_grid_base
	 {
		parameter<float64> x_min := -18040095.7d;
		parameter<float64> x_max := 18040095.7d;
		parameter<float64> y_min := -9020047.85d;
		parameter<float64> y_max := 9020047.85d;
		
		parameter<int32> nr_cols := int32((x_max - x_min) / ModelParameters/MW_Gridsize);
		parameter<int32> nr_rows := int32((y_max - y_min) / ModelParameters/MW_Gridsize);
	}
	
	unit<ipoint> Mollweide_grid :=
		range(
			gridset(
				WorldMollweide
				,point_xy(ModelParameters/MW_Gridsize, -ModelParameters/MW_Gridsize, WorldMollweide)
				,point_xy(Mollweide_grid_base/x_min, Mollweide_grid_base/y_max, WorldMollweide) //topleft
				,ipoint
			)
			,point_xy(0i, 0i)
			,point_xy(Mollweide_grid_base/nr_cols, Mollweide_grid_base/nr_rows)
		)
	{
		attribute<WorldMollWeide> point       := mapping(., WorldMollWeide) + point_yx(-0.5d * ModelParameters/MW_Gridsize, 0.5d * ModelParameters/MW_Gridsize, WorldMollWeide);
		attribute<LatLong>        domain_rel  := convert(point, LatLong);
		
		unit<uint64> points := select_with_org_rel(isDefined(point))
		{
			attribute<WorldMollWeide>            geometry  := org_rel -> point;
			attribute<Mollweide_grid>            grid_rel  := geometry[Mollweide_grid];	
		}
	}

	container StudyAreas
	{
		unit<dpoint> LatLong_World                    := range(LatLong_Base, point_yx(-90.0,-180.0), point_yx(90.0, 180.0)) {parameter<LatLong> geometry (polygon):= SourceData/RegionalUnits/World/Geometry[SourceData/RegionalUnits/World/V/World];}
		
		//continents
		unit<dpoint> LatLong_Europe                   := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Europe/geometry), Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Europe/geometry))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Europe/geometry;}
		unit<dpoint> LatLong_Africa                   := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Africa/geometry), Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Africa/geometry))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Africa/geometry;}
		unit<dpoint> LatLong_Asia                     := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Asia/geometry), Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Asia/geometry))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Asia/geometry;}
		unit<dpoint> LatLong_Australia_Oceania        := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Australia_Oceania/geometry), Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Australia_Oceania/geometry))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/Australia_Oceania/geometry;}
		unit<dpoint> LatLong_North_America            := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/North_America/geometry), Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/North_America/geometry))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/North_America/geometry;}
		unit<dpoint> LatLong_South_America            := range(LatLong_Base, Lower_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/South_America/geometry), Upper_Bound(SourceData/RegionalUnits/Continents/GetPerContinentGeometry/South_America/geometry))  {parameter<LatLong_base> geometry (polygon):= SourceData/RegionalUnits/Continents/GetPerContinentGeometry/South_America/geometry;}

		//countries
		unit<dpoint> LatLong_Netherlands              := range(LatLong_Base, point_yx( 45.0, -2.0),  point_yx(54.0,11.0)) {parameter<LatLong> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Netherlands];}
		unit<dpoint> LatLong_Nicaragua                := range(LatLong_Base, point_yx( 8.66, -90.0), point_yx(15.0, -80.0)) {parameter<LatLong> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Nicaragua];}
		unit<dpoint> LatLong_Nigeria                  := range(LatLong_Base, point_yx( 0.0, -3.0),   point_yx(17.0, 20.0)) {parameter<LatLong> geometry (polygon):= SourceData/RegionalUnits/Countries/Geometry_LL[SourceData/RegionalUnits/Countries/V/Nigeria];}
	}


	unit<wpoint> domain := TiledUnit(Impl/StudyAreaTile/LB, Impl/StudyAreaTile/UB)
	{
		unit<uint16> rowset := range(uint16, pointrow(Lowerbound(domain)), pointrow(Upperbound(domain)))
		{
			attribute<float64> lat_top         := pointrow( point_yx(ID(.), const(0w, .), domain)[LatLong] );
			attribute<float64> lat_mid         := lat_top  + 0.5 * pointrow(getprojectionfactor(domain)[LatLong]);
			attribute<Float32> lat_factor      := Float32( cos(lat_mid * 2d*pi() / 360d ) );
			parameter<km2>     Equatorial_Area := sqr(Float32(pointrow(getprojectionfactor(domain)[LatLong])) * LatLong_base/lengthdegree);
			attribute<km2>     area            := lat_factor * Equatorial_Area;
		}
		
		attribute<LatLong>        geometry      := id(.)[LatLong];
		attribute<Mollweide_grid> mollweide_rel := convert(geometry, Mollweide_grid);
		// attribute<WebMercator_grid> webmercator_rel:= convert(geometry, WebMercator_grid);

		parameter<uint32>  boundrange_c      := uint32(PointCol(boundrange(domain)));
		attribute<Float32> lat_factor        := rowset/lat_factor[pointrow(ID(.))];
		attribute<km2>     area              := rowset/area[pointrow(ID(.))]; //use rowset area
		attribute<bool>    IsCompactedDomain := Impl/GridData/FreeLand;
	}

	unit<ipoint> domain_sub := TiledUnit(Impl/StudyAreaTile/LB_sub, Impl/StudyAreaTile/UB_sub)
	{
		attribute<domain> domain_rel := mapping(., domain);
		
		unit<int32> rowset := range(int32, pointrow(Lowerbound(domain_sub)), pointrow(Upperbound(domain_sub)))
		{
			attribute<float64> lat_top    := pointrow( point_yx(ID(.), const(0i, .), domain_sub)[LatLong] );
			attribute<float64> lat_mid    := lat_top  + 0.5 * pointrow(getprojectionfactor(domain_sub)[LatLong]);
			attribute<Float32> lat_factor := Float32( cos(lat_mid * 2d*pi() / 360d ) );
			attribute<km2>     area       := (lat_factor * sqr(Float32(pointrow(getprojectionfactor(domain_sub)[LatLong])) * LatLong_base/lengthdegree));
		}
		attribute<km2>     area         := rowset/area[pointrow(ID(.))]; //use rowset area
	}
	
	unit<uint32> CompactedDomain := select_with_org_rel(domain/IsCompactedDomain), label = "allocation domain", DialogType = "Map", DialogData = "BaseGrid", using = "SourceData/RegionalUnits"
	{
		attribute<domain>            domain_rel            := org_rel;
		attribute<.>                 BaseGrid  (domain)    := invert(domain_rel);
		attribute<float32>           lat_factor            := domain_rel->lat_factor;
		attribute<km2>               area                  := domain_rel->area;
		attribute<SphericalMercator> geometry_mer          := convert(domain/geometry[domain_rel], SphericalMercator);
		attribute<Countries>         Country_rel           := Countries/per_domain[domain_rel];
		attribute<FunctionalAreas>   FunctionalAreas_rel   := FunctionalAreas/per_domain[domain_rel];
	}
	
	unit<uint64> CompactedDomainSub := select_with_org_rel(domain_sub/domain_rel->IsCompactedDomain), DialogType = "Map", DialogData = "BaseGrid"
	{
		attribute<domain_sub>        domain_sub_rel        := org_rel;
		attribute<.>                 BaseGrid  (domain_sub):= invert(domain_sub_rel);
		attribute<km2>               area                  := domain_sub_rel->area;
	}
	
	#include <DistMatrices.dms>
	#include <wms_layer_latlong.dms>
	#include <tms_layer_osm_webmercator.dms>
}