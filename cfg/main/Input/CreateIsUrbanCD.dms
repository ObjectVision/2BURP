container CreateIsUrbanCD : using = "geography;SourceData/RegionalUnits"
{
	attribute<bool> M1           (domain) : StorageName = "%MondiaalDataDir%/Urban/M_1/IsUrban.tif";
	attribute<bool> M2M3v1       (domain) : StorageName = "%MondiaalDataDir%/Urban/M2M3v1/IsUrban.tif";
	attribute<bool> M2M3v2       (domain) : StorageName = "%MondiaalDataDir%/Urban/M2M3v2/IsUrban.tif";
	
	attribute<bool> allUrban     (domain) := M1 || M2M3v1 || M2M3v2;

	attribute<bool> Y1975        (domain):= SourceData/Population/Past/PastDates/Y1975 > 0f ? true : false;
	attribute<bool> Y1990        (domain):= SourceData/Population/Past/PastDates/Y1990 > 0f ? true : false;
	attribute<bool> Y2000        (domain):= SourceData/Population/Past/PastDates/Y2000 > 0f ? true : false;
	attribute<bool> Y2015        (domain):= SourceData/Population/Past/PastDates/Y2015 > 0f ? true : false;

	attribute<bool> allUrbanPast (domain) := Y1975 || Y1990 || Y2000 || Y2015;

	unit<uint8> OverlayRegios: nrofrows = 2
	{
		attribute<string> names: ['present', 'past'];
	}
	
	container OverlayGrids
	{
		attribute<uint16> present (domain) := allUrban[uint16];
		attribute<uint16> past    (domain) := allUrbanPast[uint16];
	} 
	
	unit<uint16> allUrbanPastoverlay := overlay(OverlayRegios/names, domain, OverlayGrids);

	attribute<bool> AllAll (domain) := allUrban || allUrbanPast;

	attribute<uint32> allUrbanNull               (domain) := AllAll ? 1u : 0u/0u;
	attribute<uint32> leftover                   (domain) := allUrbanNull * Countries/IsNotCountry[uint32];
	attribute<uint32> leftoverOutsideCountry     (domain) := leftover=1u ? 1u : 0u/0u;

	unit<uint32> leftoverOutsideCountrySel := select_with_org_rel(IsDefined(leftoverOutsideCountry))
	{
		attribute<LatLong_mdegrees> Geometry := org_rel[LatLong_mdegrees];
		parameter<uint32>  SymbolColor       := rgb(255,0,0)  ,  DialogType = "SymbolColor";
		parameter<meter>   SymbolWorldSize   := 0.0001[meter]     ,  DialogType = "SymbolWorldSize";
		parameter<int16>   SymbolIndex       := 169s,  DialogType = "SymbolIndex";
	}

	container Location2Country  := connect_info(Countries/single_polygons/Geometry, leftoverOutsideCountrySel/Geometry[Geography/LatLong_mdegrees])
	{
		attribute<Countries/Country> country_rel  (Input/CreateIsUrbanCD/leftoverOutsideCountrySel):= Countries/single_polygons/nr_OrgEntity[arc_rel];
		attribute<string>            country_name (Input/CreateIsUrbanCD/leftoverOutsideCountrySel):= Countries/Country/name[country_rel];
	}
	attribute<Countries/Country> connected_country_rel  (domain):= Location2Country/country_rel[invert(Input/CreateIsUrbanCD/leftoverOutsideCountrySel/org_rel)], StorageName = "%LocalDataProjDir%/results/connected_country_rel.tif";

	unit<uint32> Location2CountryConnect  := connect(Countries/single_polygons/Geometry, leftoverOutsideCountrySel/Geometry[Geography/LatLong_mdegrees])
	{
		attribute<LatLong_mdegrees> geometry (arc)
		{
			parameter<uint32>                PenColor      := rgb(255,0,0),DialogType = "PenColor";
			parameter<float64>               PenWorldWidth := 0.00001[float64],  DialogType = "PenWorldWidth";
		}
	}
	
	container UC
	{
		unit<uint8> OverlayUC : nrofrows = 2
		{
			attribute<string> names: ['urban', 'country'];
		}
		
		container OverlayGrids
		{
			attribute<uint16> urban    (domain):= Input/CreateIsUrbanCD/allUrban[uint16];
			attribute<uint16> country  (domain):= Countries/IsCountry[uint16];
		}
		
		unit<uint16> UrbanCountry := overlay(OverlayUC/names, domain, OverlayGrids);

		//only 1 cell Long Island - USA
		attribute<bool> FalseNotCountry (domain) :=  UrbanCountry/UnionData = 1w ? true : false;
	}
}