////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration Towards an Urban Preview - 2UP 2021                       //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Maarten Hilferink
// Function:

container Templates: isHidden = "False"
{
	unit<Float32> Potential;
	
	container potrange: isTemplate = "True"
	{
		//begin of case parameters
		parameter<km>      vertical_gridsize;
		parameter<km>      borderRadius;
		//end of case parameters
		
		parameter<Float32> AspectRatio         := cos(Float32(pi()) * 30f / 180f);
		parameter<km>      horizontal_gridsize := vertical_gridsize * AspectRatio;
		parameter<float32> vertical_radius     := borderRadius / vertical_gridsize;
		parameter<float32> horizontal_radius   := borderRadius / horizontal_gridsize;
		unit<spoint>       potRange            := range(spoint, point(-int16(vertical_radius), -int16(horizontal_radius)), point(int16(vertical_radius) + int16(1), int16(horizontal_radius) + int16(1)))
		{
			attribute<Potential> distMatr          := Sqr(Float32(pointrow(ID(.)))) + Sqr(Float32(pointcol(ID(.)))*AspectRatio);
			attribute<km>        EuclideanDistMatr := Sqrt(distMatr)[km];
			attribute<Potential> Weight            := interpolate_linear(EuclideanDistMatr * 1000[meter / km], value(/Input/Suitability/DistanceBuildUp/Class/Distance_meter, meter), Float32(/Input/Suitability/DistanceBuildUp/Class/PROBABILITY));
			attribute<Potential> WeightCorr        := ID(.) == Point(0s, 0s) ? 0f : Weight;
			attribute<Potential> RelWeightCorr     := scalesum(WeightCorr, 1f );
			
			attribute<Potential> AbsWeight         := iif(distMatr <= vertical_radius * vertical_radius, 1f / (distMatr + 0.08f), 0f);
			attribute<Potential> RelWeight         := scalesum(     AbsWeight , 1f );
			attribute<Potential> RelWeightSqrt     := scalesum(Sqrt(AbsWeight), 1f );
			attribute<Potential> Conal             := scalesum(max_elem(vertical_radius - Sqrt(distMatr), 0f), 1f );

			attribute<uint8>      buffer            := iif(distMatr <= vertical_radius * vertical_radius, 1b, 0b);
		}
	}
}
