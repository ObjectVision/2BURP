container Preprocessing : using = "Geography;Units;SourceData;SourceData/RegionalUnits;Classifications"
{
	container Claims_BuiltUp := 
		for_each_nedv(
			ProjectionYears/name
			, 'convert(SourceData/Claims/Read_CSV/BU_estimates/BU'+string(ProjectionYears/Yr)+'[m2], km2)[invert(SourceData/Claims/Read_CSV/BU_estimates/FunctionalArea_rel)]'
			, FunctionalAreas
			, km2
		);
	
	container Claims_Population := 
		for_each_nedv(
			ProjectionYears/name
			, '(SourceData/Claims/Read_CSV/Pop_estimates/POP'+string(ProjectionYears/Yr)+'[Person])[invert(SourceData/Claims/Read_CSV/Pop_estimates/FunctionalArea_rel)]'
			, FunctionalAreas
			, Person
		);
		
	#include <GridDists.dms>
	
	container Population_Neighbourhoods
	{
		container Population_8dir_Y1990            := Create_8dir_T(SourceData/Population/PerYear/Y1990);
		container Population_8dir_StartYear        := ='Create_8dir_T(SourceData/Population/PerYear/'+ModelParameters/StartYear+')';
		
		container PopulationDensity_8dir_Y1990     := Create_8dir_T(SourceData/Population/PerYear/Y1990  / domain/area[float64]);
		container PopulationDensity_8dir_Y2000     := Create_8dir_T(SourceData/Population/PerYear/Y2000  / domain/area[float64]);
		container PopulationDensity_8dir_StartYear := ='Create_8dir_T(SourceData/Population/PerYear/'+ModelParameters/StartYear+' / domain/area[float64])';

		Template Create_8dir_T
		{
			attribute<float64> ItemOfInterest      (domain);
			//
			
			attribute<float64> ItemOfInterest_Null (domain) := ItemOfInterest > 0d ? ItemOfInterest : null_d;

			attribute<float64> N                   (domain) := ItemOfInterest[(id(domain)) - point(1w, 0w, wpoint)];
			attribute<float64> NE                  (domain) := ItemOfInterest[(id(domain)) - point(1w, 0w, wpoint) + point(0w, 1w, wpoint)];
			attribute<float64> E                   (domain) := ItemOfInterest[(id(domain)) + point(0w, 1w, wpoint)];
			attribute<float64> SE                  (domain) := ItemOfInterest[(id(domain)) + point(1w, 1w, wpoint)];
			attribute<float64> S                   (domain) := ItemOfInterest[(id(domain)) + point(1w, 0w, wpoint)];
			attribute<float64> SW                  (domain) := ItemOfInterest[(id(domain)) + point(1w, 0w, wpoint) - point(0w, 1w, wpoint)];
			attribute<float64> W                   (domain) := ItemOfInterest[(id(domain)) - point(0w, 1w, wpoint)];
			attribute<float64> NW                  (domain) := ItemOfInterest[(id(domain)) - point(1w, 1w, wpoint)];
			
			attribute<bool>    N_Null              (domain) := IsDefined(ItemOfInterest_Null[(id(domain)) - point(1w, 0w, wpoint)]);
			attribute<bool>    NE_Null             (domain) := IsDefined(ItemOfInterest_Null[(id(domain)) - point(1w, 0w, wpoint) + point(0w, 1w, wpoint)]);
			attribute<bool>    E_Null              (domain) := IsDefined(ItemOfInterest_Null[(id(domain)) + point(0w, 1w, wpoint)]);
			attribute<bool>    SE_Null             (domain) := IsDefined(ItemOfInterest_Null[(id(domain)) + point(1w, 1w, wpoint)]);
			attribute<bool>    S_Null              (domain) := IsDefined(ItemOfInterest_Null[(id(domain)) + point(1w, 0w, wpoint)]);
			attribute<bool>    SW_Null             (domain) := IsDefined(ItemOfInterest_Null[(id(domain)) + point(1w, 0w, wpoint) - point(0w, 1w, wpoint)]);
			attribute<bool>    W_Null              (domain) := IsDefined(ItemOfInterest_Null[(id(domain)) - point(0w, 1w, wpoint)]);
			attribute<bool>    NW_Null             (domain) := IsDefined(ItemOfInterest_Null[(id(domain)) - point(1w, 1w, wpoint)]);
			
			attribute<float64> Cells_with_data     (domain) := (N_Null[float64] + NE_Null[float64] + E_Null[float64] + SE_Null[float64] + S_Null[float64] + SE_Null[float64] + W_Null[float64] + NW_Null[float64]);
			attribute<float64> Mean_8dir_org       (domain) := (N + NE + E + SE + S + SW + W + NW) / Cells_with_data; //max 8
			attribute<float64> Mean_8dir           (domain) := MakeDefined(Mean_8dir_org,0d);
			attribute<float64> Ln_mean_8dir        (domain) := log(Mean_8dir + 0.1d);  //Pendula: 0 waarden --> 0.1  -->-2.30259 
		}
	}
}