container Preprocessing : using = "Geography;Units;SourceData;SourceData/RegionalUnits;Classifications"
{
	container Claims_BuiltUp := 
		for_each_nedv(
			ProjectionYears/name
			, 'convert(SourceData/Claims/Read_CSV/BU_estimates/BU'+string(ProjectionYears/Yr)+'[m2], km2)[invert(SourceData/Claims/Read_CSV/BU_estimates/FunctionalArea_rel)] / 1[km2] * 1[BuiltUpKm2]'
			, FunctionalAreas
			, BuiltUpKm2
		)
	{
		attribute<BuiltUpKm2> Y2010 (FunctionalAreas) := sum(convert(SourceData/Builtup/Total/Y2010, km2) / 1[km2] * 1[BuiltUpKm2], FunctionalAreas/per_domain);
		attribute<BuiltUpKm2> Y2020 (FunctionalAreas) := sum(convert(SourceData/Builtup/Total/Y2020, km2) / 1[km2] * 1[BuiltUpKm2], FunctionalAreas/per_domain);
	}
	
	container Claims_Population := 
		for_each_nedv(
			ProjectionYears/name
			, '(SourceData/Claims/Read_CSV/Pop_estimates/POP'+string(ProjectionYears/Yr)+'[Person])[invert(SourceData/Claims/Read_CSV/Pop_estimates/FunctionalArea_rel)]'
			, FunctionalAreas
			, Person
		)
	{
		attribute<Person> Y2010 (FunctionalAreas) := sum(SourceData/Population/PerYear/Y2010[Person], FunctionalAreas/per_domain);
		attribute<Person> Y2020 (FunctionalAreas) := sum(SourceData/Population/PerYear/Y2020[Person], FunctionalAreas/per_domain);
	}
	
	// container PercDelta_Claims_Builtup := 
		// for_each_nedv(
			// ProjectionYears_Delta/name
			// , '(Claims_BuiltUp/'+ProjectionYears_Delta/name+' - Claims_BuiltUp/'+ProjectionYears_Delta/prev_name+') / Claims_BuiltUp/'+ProjectionYears_Delta/prev_name
			// , FunctionalAreas
			// , float32
		// );
	
	container PercDelta_Claims_Population := 
		for_each_nedv(
			ProjectionYears_Delta/name
			, '(Claims_Population/'+ProjectionYears_Delta/name+' - Claims_Population/'+ProjectionYears_Delta/prev_name+') / Claims_Population/'+ProjectionYears_Delta/prev_name
			, FunctionalAreas
			, float32
		)
	{
		attribute<float32> Y2030 (FunctionalAreas) := (Claims_Population/y2030 - Claims_Population/y2020) / Claims_Population/y2020;
	}
	
	container DegreesOfUrbanisation := 
		for_each_ne(
			GHS_years/name
			, 'Calculate_DegreeOfUrbanisation/Gen_T(
				'+quote(GHS_years/name)+'
				, convert(Builtup/Total/'+GHS_years/name+', km2) 
				, convert(Builtup/Residential/'+GHS_years/name+',km2) 
				, Population/PerYear/'+GHS_years/name+'[Person]
			)'
		)
	{
		parameter<string> Generate_DegreesOfUrbanisation := 'Ready', ExplicitSuppliers = "=AsList('DegreesOfUrbanisation/'+GHS_years/name+'/StoreTypology', ';')";
	}
		
	container GridDistances := 
		for_each_ne(
			GHS_years/name
			, 'Calculate_GridDistances/T_AllVariants_Instantiation(DegreesOfUrbanisation/'+GHS_years/name+'/Typology_Domain)'
		);
	
	#include <GridDists.dms>
	#include <DegreeOfUrbanisation.dms>
	
	// Future change in population per degree of urbanisation class.
	container Population_perDoU := 
		for_each_nedv(
			GHS_years/name
			, 'sum(SourceData/population/PerYear/'+GHS_years/name+'[float32], DegreesOfUrbanisation/'+GHS_years/name+'/ReadTypologyK)'
			, TypologyK
			, float32
		), StorageName = "='%LocalDataProjDir%/Historical/Population_perDoU_'+ModelParameters/StudyArea+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>  Label     (TypologyK) := TypologyK/label;
	}
	

	container Population_Neighbourhoods
	{
		container Population_8dir_Y1990            := Create_8dir_T(SourceData/Population/PerYear/Y1990);
		container Population_8dir_StartYear        := ='Create_8dir_T(SourceData/Population/PerYear/'+ModelParameters/StartYear+')';
		
		container PopulationDensity_8dir_Y1990     := Create_8dir_T(SourceData/Population/PerYear/Y1990  / domain/area[float64]);
		container PopulationDensity_8dir_Y2000     := Create_8dir_T(SourceData/Population/PerYear/Y2000  / domain/area[float64]);
		container PopulationDensity_8dir_StartYear := ='Create_8dir_T(SourceData/Population/PerYear/'+ModelParameters/StartYear+' / domain/area[float64])';

		Template Create_8dir_T
		{
			attribute<float64> ItemOfInterest      (domain);
			//
			
			attribute<float64> ItemOfInterest_Null (domain) := ItemOfInterest > 0d ? ItemOfInterest : null_d;

			attribute<float64> N                   (domain) := MakeDefined(ItemOfInterest[sub_or_null(id(domain),point_yx(1w, 0w, wpoint))],0d);
			attribute<float64> NE                  (domain) := MakeDefined(ItemOfInterest[sub_or_null(id(domain),point_yx(1w, 0w, wpoint)) + point_yx(0w, 1w, wpoint)],0d);
			attribute<float64> E                   (domain) := MakeDefined(ItemOfInterest[id(domain) + point_yx(0w, 1w, wpoint)],0d);
			attribute<float64> SE                  (domain) := MakeDefined(ItemOfInterest[id(domain) + point_yx(1w, 1w, wpoint)],0d);
			attribute<float64> S                   (domain) := MakeDefined(ItemOfInterest[id(domain) + point_yx(1w, 0w, wpoint)],0d);
			attribute<float64> SW                  (domain) := MakeDefined(ItemOfInterest[sub_or_null(id(domain) + point_yx(1w, 0w, wpoint), point_yx(0w, 1w, wpoint))],0d);
			attribute<float64> W                   (domain) := MakeDefined(ItemOfInterest[sub_or_null(id(domain), point_yx(0w, 1w, wpoint))],0d);
			attribute<float64> NW                  (domain) := MakeDefined(ItemOfInterest[sub_or_null(id(domain), point_yx(1w, 1w, wpoint))],0d);
			
			attribute<bool>    N_Null              (domain) := IsDefined(ItemOfInterest_Null[sub_or_null(id(domain), point_yx(1w, 0w, wpoint))]);
			attribute<bool>    NE_Null             (domain) := IsDefined(ItemOfInterest_Null[sub_or_null(id(domain), point_yx(1w, 0w, wpoint)) + point_yx(0w, 1w, wpoint)]);
			attribute<bool>    E_Null              (domain) := IsDefined(ItemOfInterest_Null[id(domain) + point_yx(0w, 1w, wpoint)]);
			attribute<bool>    SE_Null             (domain) := IsDefined(ItemOfInterest_Null[id(domain) + point_yx(1w, 1w, wpoint)]);
			attribute<bool>    S_Null              (domain) := IsDefined(ItemOfInterest_Null[id(domain) + point_yx(1w, 0w, wpoint)]);
			attribute<bool>    SW_Null             (domain) := IsDefined(ItemOfInterest_Null[sub_or_null(id(domain) + point_yx(1w, 0w, wpoint), point_yx(0w, 1w, wpoint))]);
			attribute<bool>    W_Null              (domain) := IsDefined(ItemOfInterest_Null[sub_or_null(id(domain), point_yx(0w, 1w, wpoint))]);
			attribute<bool>    NW_Null             (domain) := IsDefined(ItemOfInterest_Null[sub_or_null(id(domain), point_yx(1w, 1w, wpoint))]);
			
			attribute<float64> Cells_with_data     (domain) := (N_Null[float64] + NE_Null[float64] + E_Null[float64] + SE_Null[float64] + S_Null[float64] + SE_Null[float64] + W_Null[float64] + NW_Null[float64]);
			attribute<float64> Mean_8dir_org       (domain) := (N + NE + E + SE + S + SW + W + NW) / Cells_with_data; //max 8
			attribute<float64> Mean_8dir           (domain) := MakeDefined(Mean_8dir_org,0d);
			attribute<float64> Ln_mean_8dir        (domain) := log(Mean_8dir + 0.1d);  //Pendula: 0 waarden --> 0.1  -->-2.30259 
		}
	}
	
}