container HYDEScen : using = "sourcedata/regionalunits"
{
	container Import: url="%ToBURPDataDir%/HYDE/HYDE32.txt"
	{
		unit<uint32> SSP1
			: StorageName = "%projdir%/data/HYDE/HYDE_SSP1_popdens.csv"
			, StorageType = "gdal.vect"
			, StorageReadonly = "True"
			, DialogType  = "Map"
			, DialogData  = "PolyData"
		{
			attribute<Countries/Country > Country_rel := rlookup(Region, Countries/Country/ISO3);
			attribute<LatLong> PolyData (polygon) := Countries/Country/Geometry[ Country_rel ];
			attribute<string> Label := Region;
	
			parameter<string> Name := 'SSP1';
		}
	
		unit<uint32> SSP2
			: StorageName = "%projdir%/data/HYDE/HYDE_SSP2_popdens.csv"
			, StorageType = "gdal.vect"
			, StorageReadonly = "True"
			, DialogType  = "Map"
			, DialogData  = "PolyData"
		{
			attribute<Countries/Country > Country_rel := rlookup(Region, Countries/Country/ISO3);
			attribute<LatLong> PolyData (polygon) := Countries/Country/Geometry[ Country_rel ];
			attribute<string> Label := Region;
			
			parameter<string> Name := 'SSP2';
		}
	
		unit<uint32> SSP3
			: StorageName = "%projdir%/data/HYDE/HYDE_SSP3_popdens.csv" 
			, StorageType = "gdal.vect"
			, StorageReadonly = "True"
			, DialogType  = "Map"
			, DialogData  = "PolyData"
		{
			attribute<Countries/Country > Country_rel := rlookup(Region, Countries/Country/ISO3);
			attribute<LatLong> PolyData (polygon) := Countries/Country/Geometry[Country_rel];
			attribute<string> Label := Region;
			
			parameter<string> Name := 'SSP3';
		}
	
		unit<uint32> SSP4
			: StorageName = "%projdir%/data/HYDE/HYDE_SSP4_popdens.csv"
			, StorageType = "gdal.vect"
			, StorageReadonly = "True"
			, DialogType  = "Map"
			, DialogData  = "PolyData"
		{
			attribute<Countries/Country > Country_rel := rlookup(Region, Countries/Country/ISO3);
			attribute<LatLong> PolyData (polygon) := Countries/Country/Geometry[ Country_rel ];
			attribute<string> Label := Region;
			
			parameter<string> Name := 'SSP4';
		}
	
		unit<uint32> SSP5
			: StorageName = "%projdir%/data/HYDE/HYDE_SSP5_popdens.csv"
			, StorageType = "gdal.vect"
			, StorageReadonly = "True"
			, DialogType  = "Map"
			, DialogData  = "PolyData"
		{
			attribute<Countries/Country > Country_rel := rlookup(Region, Countries/Country/ISO3);
			attribute<LatLong> PolyData (polygon) := Countries/Country/Geometry[ Country_rel ];
			attribute<string> Label := Region;
			
			parameter<string> Name := 'SSP5';
		}
	}
	
	
	//  Function to calculate total and additional urban area for the projection dates (HYDE index) based on the HYDE average urban density figures.
	container HYDEindex
	{
		container SSPs := 
			for_each_ne(Classifications/SSP/Name, 
				'HYDEscenarios_T(Import/'+Classifications/SSP/Name+')'
				);
	
		template HYDEscenarios_T
		{
		
			container HYDEclaim;
			
			parameter<string> Scenario:= HYDEclaim/Name;
			parameter<string> PopulationInput := ModelParameters/Method;

			container Start 
			{
				container NewState
				{
					attribute<km2> UrbanArea (Countries/Country ) := SourceData/Population/M1/Urban_pop_2010/UrbanArea;
				}
			}

			container Indices :=
				for_each_nedv(
					Classifications/ProjectionDate/name
					,replace(
								'Import/@SSP@/_@YR@[float32][invert(Import/@SSP@/Country_rel)] '
									'/ Import/@SSP@/_2010[float32][invert(Import/@SSP@/Country_rel)]'
						,	'@SSP@', Scenario
						,	'@YR@', string(Classifications/ProjectionDate/Yr)
						)
					, Countries/Country
					, float32
				);
	
			container ProjectionDates :=
				for_each_nedv(
					Classifications/ProjectionDate/name
					, ModelParameters/InPresentUrban = 'InPresentUrban' 
						? replace('(MakeDefined(Preprocessing/Claims/Read_Scenario/@Input@/@SSP@/Filedata/URBANPOP2010[float32][invert(Preprocessing/Claims/Read_Scenario/@Input@/@SSP@/Filedata/Country_rel)] * 1000000[Person], 0[Person]) / SourceData/Population/@Input@/Urban_pop_2010/UrbanMeanPopDensity)'
									'/ Indices/@YRN@'
								,	'@SSP@', Scenario
								,	'@YR@', string(Classifications/ProjectionDate/Yr)
								,	'@YRN@', Classifications/ProjectionDate/Name
								,	'@Input@', PopulationInput
							)
						: replace(
								'(MakeDefined(Preprocessing/Claims/Read_Scenario/@Input@/@SSP@/Filedata/URBANPOP@YR@[float32][invert(Preprocessing/Claims/Read_Scenario/@Input@/@SSP@/Filedata/Country_rel)] * 1000000[Person], 0[Person]) '
										'/ SourceData/Population/@Input@/Urban_pop_2010/UrbanMeanPopDensity)'
									'/ Indices/@YRN@'
								,	'@SSP@', Scenario
								,	'@YR@', string(Classifications/ProjectionDate/Yr)
								,	'@YRN@', Classifications/ProjectionDate/Name
								,	'@Input@', PopulationInput
							)
					, SourceData/RegionalUnits/Countries/Country 
					, km2
				);

	
			container Evaluation
			{
				attribute<km2> Diff_2050_2010 (Countries/Country ) := ProjectionDates/Y2050 - ProjectionDates/Y2010;
			}
			
		}
	}
}