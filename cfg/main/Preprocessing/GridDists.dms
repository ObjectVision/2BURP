Container Calculate_GridDistances: using = "Geography;SourceData;Classifications;" {
	
	container travel_factors {
		parameter<string> elev:= '1f + (elevation > 2000f ? 0.15f * exp(0.0007f * elevation) : 0f)', Descr= "Effect on travel speeds: For elevations lower than 2000 metres, there is no effect on foot-based based travel speed. For elevations above 2000, the following speed factor f is applied: f = 0.15e0.0007E, where E is elevation in metres.";
		parameter<string> slope:= '1f / exp(-1f*gradient*3f)'; //v0e-ks
		parameter<string> water:= 'InWater * 3f + 1f'; //Water bodies at 20km/h, compared to the 60m/h reference
	}
	
	unit<wpoint> grid := domain 
	{
		attribute<float32> 	Roughness   := Physical/TerrainRoughnessIndex/TRI_Class_mean_1k[float32];
		attribute<float32> 	InWater     := Physical/Water/AllWater/Fraction_Water[float32] / 100f;
		attribute<float32>	Impedance   := Roughness^2f + (10f * InWater[float32]);
		attribute<float32>  elevation   := Physical/Elevation/Mean_1k[float32];
		attribute<float32>  slope       := Physical/Slope_2021/ReadData;
		attribute<float32>	gradient    := slope > 0f ? tan(slope * float32(pi()) / 180f) : 0f;
				
		attribute<float32> impedance_elev:= =travel_factors/elev;
		attribute<float32> impedance_slope:= =travel_factors/slope;
		attribute<float32> impedance_water:= =travel_factors/water;
		attribute<float32> impedance_all:= impedance_elev * impedance_slope * impedance_water;
	}
	
	Template T_AllVariants_instantiation  
	{
		attribute<TypologyK> in_degurba (grid);
		///
		container get_Grid_Costs := 
			for_each_ne(
				Accessibility_Variants/Label
				, 'T_getAccessGrids_grid(in_degurba, '+string(id(Accessibility_Variants))+'[Accessibility_Variants])'
			);
		
		container Grid_costs_atleast_to := 
			for_each_nedv(
				Accessibility_Variants/Label
				, 'makedefined(get_Grid_Costs/'+Accessibility_Variants/Label+'/costsgrid_zonal_untiled_maximp_latitude_specific, 100f)'
				, grid
				, float32
			);
	}
	
	Template T_getAccessGrids_grid 
	{
		attribute<TypologyK> in_degurba (grid);
		parameter<Accessibility_Variants> invariant;
		///
		attribute<uint8>   degurba_class                                    (grid):= TypologyK/EK[in_degurba];
		attribute<bool>    eval                                             (grid):= =Accessibility_Variants/definition[invariant];
 
		unit<uint32> origins := select_with_org_rel(eval);
		
		attribute<float32> impedances                                       (grid):= grid/impedance_all;
		attribute<float32> costsgrid                                        (grid):= min_elem(griddist(impedances, origins/org_rel), 100f);
		attribute<float32> costsgrid_maximp                                 (grid):= griddist_maximp(impedances, origins/org_rel, 100f);
		attribute<float32> costsgrid_untiled                                (grid):= min_elem(griddist_untiled(impedances, origins/org_rel), 100f);
		attribute<float32> costsgrid_untiled_maximp                         (grid):= griddist_maximp_untiled(impedances, origins/org_rel, 100f);
		attribute<float32> costsgrid_untiled_latitude_specific              (grid):= min_elem(griddist_untiled_latitude_specific(impedances, origins/org_rel), 100f);
		attribute<float32> costsgrid_untiled_maximp_latitude_specific       (grid):= griddist_maximp_untiled_latitude_specific(impedances, origins/org_rel, 100f);
		
		attribute<float32> costsgrid_zonal                                  (grid):= min_elem(griddist_zonal(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f), 100f);
		attribute<float32> costsgrid_zonal_maximp                           (grid):= griddist_zonal_maximp(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f, 100f);
		attribute<float32> costsgrid_zonal_untiled                          (grid):= min_elem(griddist_zonal_untiled(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f), 100f);
		attribute<float32> costsgrid_zonal_untiled_maximp                   (grid):= griddist_zonal_maximp_untiled(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f, 100f);
		attribute<float32> costsgrid_zonal_untiled_latitude_specific        (grid):= min_elem(griddist_zonal_untiled_latitude_specific(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f), 100f);
		attribute<float32> costsgrid_zonal_untiled_maximp_latitude_specific (grid):= griddist_zonal_maximp_untiled_latitude_specific(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f, 100f);
	}
}