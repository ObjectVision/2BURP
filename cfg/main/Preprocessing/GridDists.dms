Container Calculate_GridDistances: using = "Geography;SourceData;Classifications;" {
	
	container travel_factors 
	{
		parameter<string> elev  := '1f + (elevation > 2000f ? 0.15f * exp(0.0007f * elevation) : 0f)', Descr= "Effect on travel speeds: For elevations lower than 2000 metres, there is no effect on foot-based based travel speed. For elevations above 2000, the following speed factor f is applied: f = 0.15e0.0007E, where E is elevation in metres.";
		parameter<string> slope := '1f / exp(-1f*gradient*3f)'; //v0e-ks
		parameter<string> water := 'InWater * 3f + 1f'; //Water bodies at 20km/h, compared to the 60m/h reference
	}
	
	// unit<uint32> settlements: nrofrows = 6 
	// {
		// attribute<string> label: ['Africa_point', 'Asia_point', 'Australia_Oceania_point', 'Europe_point', 'North_America_point', 'South_America_point'];
	// }
	
	// container load_settlements:= for_each_ne(settlements/label, 'T_loadpointfile('+quote(sett_folder+settlements/label)+')') 
	// {
		// unit<uint32> all_settlements:= ='union_unit('+asitemlist(settlements/label+'/inFile')+')' 
		// {
			// attribute<LatLong> Geometry    := ='union_data(.,'+asitemlist(settlements/label+'/inFile/Geometry')+')';
			// attribute<string>  Label       := ='union_data(.,'+asitemlist(settlements/label+'/inFile/Label')+')';
			// attribute<uint32>  type        := switch(case(strcount(Label, 'sdt') > 0, 22), case(strcount(Label, 'town') > 0, 23), case(strcount(Label, 'city') > 0, 30), 13);
			// attribute<uint32>  L_15min     := ='union_data(.,'+asitemlist(settlements/label+'/inFile/L_15min')+')';
			// attribute<uint32>  L_30min     := ='union_data(.,'+asitemlist(settlements/label+'/inFile/L_30min')+')';
			// attribute<uint32>  L_60min     := ='union_data(.,'+asitemlist(settlements/label+'/inFile/L_60min')+')';
			// attribute<grid>    grid_rel    := Geometry[grid];
			// attribute<NodeSet> NodeSet_rel := grid/NodeSet_rel[grid_rel];
		// }
	// }
	
	unit<wpoint> grid := domain 
	{
		attribute<float32> 	InWater     := Physical/Water/AllWater/Fraction_Water[float32] / 100f;
		attribute<float32>  elevation   := Physical/Elevation/Mean_1k[float32];
		attribute<float32>  slope       := Physical/Slope_2021/ReadData;
		attribute<float32>	gradient    := slope > 0f ? tan(slope * float32(pi()) / 180f) : 0f;
		attribute<NodeSet>  NodeSet_rel := invert(NodeSet/org_rel);
		
		attribute<NodeSet> N                   (domain) := rlookup((id(.)) - point_xy(0w, 1w, wpoint), NodeSet/org_rel);
		attribute<NodeSet> NE                  (domain) := rlookup((id(.)) - point_xy(0w, 1w, wpoint) + point_xy(1w, 0w, wpoint), NodeSet/org_rel);
		attribute<NodeSet> E                   (domain) := rlookup((id(.)) + point_xy(1w, 0w, wpoint), NodeSet/org_rel);
		attribute<NodeSet> SE                  (domain) := rlookup((id(.)) + point_xy(1w, 1w, wpoint), NodeSet/org_rel);
				
		unit<uint32> all_Ns  := select(isdefined(NodeSet_rel) && isdefined(rlookup(N, id(NodeSet))))
		{
			attribute<NodeSet> F1 := collect_by_cond(., grid/NodeSet_rel);  
			attribute<NodeSet> F2 := collect_by_cond(., grid/N);  
		}
		unit<uint32> all_NEs := select(isdefined(NodeSet_rel) && isdefined(rlookup(NE, id(NodeSet))))
		{
			attribute<NodeSet> F1 := collect_by_cond(., grid/NodeSet_rel);  
			attribute<NodeSet> F2 := collect_by_cond(., grid/NE);  
		} 
		unit<uint32> all_Es  := select(isdefined(NodeSet_rel) && isdefined(rlookup(E, id(NodeSet))))
		{
			attribute<NodeSet> F1 := collect_by_cond(., grid/NodeSet_rel);  
			attribute<NodeSet> F2 := collect_by_cond(., grid/E);  
		}
		unit<uint32> all_SEs := select(isdefined(NodeSet_rel) && isdefined(rlookup(SE, id(NodeSet))))
		{
			attribute<NodeSet> F1 := collect_by_cond(., grid/NodeSet_rel);  
			attribute<NodeSet> F2 := collect_by_cond(., grid/SE);  
		}
		
		attribute<float32> impedance_elev  := =travel_factors/elev;
		attribute<float32> impedance_slope := =travel_factors/slope;
		attribute<float32> impedance_water := =travel_factors/water;
		attribute<float32> impedance_all   := impedance_elev * impedance_slope * impedance_water;
	}
	
	unit<uint32> NodeSet:= select_with_org_rel(IsDefined(id(domain))) 
	{
		attribute<LatLong>                 Geometry  := org_rel[LatLong];
		attribute<float32>	               Impedance := collect_by_cond(., grid/impedance_all);
		attribute<RegionalUnits/Countries> country   := collect_by_cond(., RegionalUnits/Countries/per_domain);
	}
	
	unit<uint32> Network:= union_unit(grid/all_Ns, grid/all_NEs, grid/all_Es, grid/all_SEs) 
	{
		attribute<NodeSet> F1             := union_data(., grid/all_Ns/F1, grid/all_NEs/F1, grid/all_Es/F1, grid/all_SEs/F1);
		attribute<NodeSet> F2             := union_data(., grid/all_Ns/F2, grid/all_NEs/F2, grid/all_Es/F2, grid/all_SEs/F2);
		attribute<bool>    crosses_border := NodeSet/country[F1] <> NodeSet/country[F2];
		attribute<float32> Impedance      := (Length[float32] * (0.5f*(NodeSet/Impedance[F1] + NodeSet/Impedance[F2]))) + 25f * crosses_border[float32];
		
		attribute<float32> dx             := (PointCol(F2 -> geometry) - PointCol(F1 -> geometry))[float32];
		attribute<float32> dy             := (PointRow(F2 -> geometry) - PointRow(F1 -> geometry))[float32];
		attribute<float32> Sy             := (PointRow(F2 -> geometry) + PointRow(F1 -> geometry))[float32], Descr = "som Y";
		
		attribute<float32> Length         := 	sqrt(
													sqr(
														dx * (40000f / 360f)             // vertaling naar km
														* cos(Sy * pi()[float32] / 360f) // latitude specifieke scale factor 
													)
												+	sqr(
														dy * (40000f / 360f)             // vertaling naar km
													)
												); 
	}
	
	Template T_AllVariants_instantiation  
	{
		attribute<TypologyK> in_degurba (grid);
		///
		
		// container get_Grid_Costs_griddist := 
			// for_each_ne(
				// Accessibility_Variants/Label
				// , 'T_getAccessGrids_grid(in_degurba, '+string(id(Accessibility_Variants))+'[Accessibility_Variants])'
			// );
		
		container get_Grid_Costs_netw := 
			for_each_ne(
				Accessibility_Variants/Label
				, 'T_getAccessGrids_netw(in_degurba, '+string(id(Accessibility_Variants))+'[Accessibility_Variants])'
			);
		
		container Grid_costs_atleast_to := 
			for_each_nedv(
				Accessibility_Variants/Label
				// , 'makedefined(get_Grid_Costs_griddist/'+Accessibility_Variants/Label+'/costsgrid_zonal_untiled_maximp_latitude_specific, 100f)'
				, 'makedefined(get_Grid_Costs_netw/'+Accessibility_Variants/Label+'/costsgrid, 100f)'
				, grid
				, float32
			);
	}
	
	Template T_getAccessGrids_netw 
	{
		attribute<TypologyK> in_degurba (grid);
		parameter<Accessibility_Variants> invariant;
		///
		
		attribute<uint8>   degurba_class                                    (grid):= TypologyK/EK[in_degurba];
		attribute<bool>    eval                                             (grid):= =Accessibility_Variants/definition[invariant];
 
		unit<uint32> Origins := select_with_org_rel(eval) 
		{
			attribute<NodeSet> NodeSet_rel := grid/NodeSet_rel[org_rel];
		}
		
		attribute<float32> Impedance_to_nearest_dest (NodeSet) := 
			impedance_table('bidirectional;startPoint(Node_rel);cut(OrgZone_max_imp)'
				, Network/Impedance
				, Network/F1
				, Network/F2
				
				, Origins/NodeSet_rel
				, 100f                // cut 
			);
		attribute<float32> costsgrid (grid) := Impedance_to_nearest_dest[grid/NodeSet_rel];
	}
	
	// Template T_getAccessGrids_grid 
	// {
		// attribute<TypologyK> in_degurba (grid);
		// parameter<Accessibility_Variants> invariant;
		
		// attribute<uint8>   degurba_class                                    (grid):= TypologyK/EK[in_degurba];
		// attribute<bool>    eval                                             (grid):= =Accessibility_Variants/definition[invariant];
 
		// unit<uint32> origins := select_with_org_rel(eval);
		
		// attribute<float32> impedances                                       (grid):= grid/impedance_all;
		// attribute<float32> costsgrid                                        (grid):= min_elem(griddist(impedances, origins/org_rel), 100f);
		// attribute<float32> costsgrid_maximp                                 (grid):= griddist_maximp(impedances, origins/org_rel, 100f);
		// attribute<float32> costsgrid_untiled                                (grid):= min_elem(griddist_untiled(impedances, origins/org_rel), 100f);
		// attribute<float32> costsgrid_untiled_maximp                         (grid):= griddist_maximp_untiled(impedances, origins/org_rel, 100f);
		// attribute<float32> costsgrid_untiled_latitude_specific              (grid):= min_elem(griddist_untiled_latitude_specific(impedances, origins/org_rel), 100f);
		// attribute<float32> costsgrid_untiled_maximp_latitude_specific       (grid):= griddist_maximp_untiled_latitude_specific(impedances, origins/org_rel, 100f);
		
		// attribute<float32> costsgrid_zonal                                  (grid):= min_elem(griddist_zonal(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f), 100f);
		// attribute<float32> costsgrid_zonal_maximp                           (grid):= griddist_zonal_maximp(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f, 100f);
		// attribute<float32> costsgrid_zonal_untiled                          (grid):= min_elem(griddist_zonal_untiled(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f), 100f);
		// attribute<float32> costsgrid_zonal_untiled_maximp                   (grid):= griddist_zonal_maximp_untiled(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f, 100f);
		// attribute<float32> costsgrid_zonal_untiled_latitude_specific        (grid):= min_elem(griddist_zonal_untiled_latitude_specific(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f), 100f);
		// attribute<float32> costsgrid_zonal_untiled_maximp_latitude_specific (grid):= griddist_zonal_maximp_untiled_latitude_specific(impedances, origins/org_rel, UInt16(/SourceData/RegionalUnits/Countries/per_domain), 25f, 100f);
	// }
}