Container DegreeOfUrbanisation : using = "Geography;SourceData;" 
{
	attribute<km2>               Land_Area                        (domain) := domain/area;
	attribute<BuiltUpKm2>        BuiltUp_Total_Area               (domain) := ='SourceData/BuiltUp/Total/'+ModelParameters/StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
	attribute<BuiltUpKm2>        BuiltUp_Residential_Area         (domain) := ='SourceData/BuiltUp/Residential/'+ModelParameters/StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
	attribute<Person>            Population                       (domain) := ='SourceData/Population/PerYear/'+ModelParameters/StartYear+'[Person]';
	attribute<Person_BuiltUpKm2> Population_inRes_Density         (domain) := Population / BuiltUp_Residential_Area; // DO NOT USE!
	attribute<Person_km2>        Population_Land_Density          (domain) := Population / Land_Area; // DO NOT USE!
	
	attribute<Person_BuiltUpKm2> Population_inRes_Density_Trunc   (domain) := min_elem_alldefined(Population_inRes_Density, /Analysis/Future/InitialState/maxmax_saturation);
	attribute<Person>            Population_Trunc                 (domain) := Population_inRes_Density_Trunc * BuiltUp_Residential_Area; //truncate for unrealistic densities (e.g. very much population in hardly any builtup area).
	
	container Parameters
	{
		container Urban_Centre
		{
			parameter<Person_km2>        Min_Density                   := 1500[Person_km2];
			parameter<Person>            Min_Total_Pop                 := 50000[Person];
			parameter<float32>           Min_Additional_BU_Share       := 0.5f;
			parameter<float32>           Max_LakeFill_Area             := 15[km2];
		}
		container Dense_Urban_Cluster
		{
			parameter<Person_km2>        Min_Density                   := 1500[Person_km2];
			parameter<float32>           Min_BU_Share                  := 0.5f;
			parameter<Person>            Min_Total_Pop                 := 5000[Person];
		}
		container Semi_Dense_Urban_Cluster
		{
			parameter<Person_km2>        Min_Density_low               := 300[Person_km2];
			parameter<Person_km2>        Min_Density_high              := 1500[Person_km2];
			parameter<float32>           Min_BU_Share_low              := 0.03f;
			parameter<float32>           Min_BU_Share_high             := 0.5f;
			parameter<Person>            Min_Total_Pop                 := 5000[Person];
		}
		container Suburban_Grid_Cell
		{
			parameter<Person_km2>        Min_Density_low               := 300[Person_km2];
			parameter<Person_km2>        Min_Density_high              := 1500[Person_km2];
			parameter<float32>           Min_BU_Share_low              := 0.03f;
			parameter<float32>           Min_BU_Share_high             := 0.5f;
			parameter<Person>            Min_Total_Pop                 := 5000[Person];
		}
		container Rural_Cluster
		{
			parameter<Person_km2>        Min_Density                   := 300[Person_km2];
			parameter<Person>            Min_Total_Pop                 := 500[Person];
			parameter<float32>           Min_BU_Share                  := 0.5f;
		}
		container Low_Density_Rural_Grid_Cell
		{
			parameter<Person_km2>        Min_Density                   := 50[Person_km2];
		}
	}
	
	unit<uint8> TypologyK : nrofrows = 7
	{
		attribute<uint8>  EK    : [30, 23, 22, 21, 13, 12, 11];
		attribute<string> Label : ['Urban centre','Dense urban cluster','Semi-dense urban cluster','Suburban grid cell','Rural cluster','Low density rural grid cell','Very low density grid cell'];
		attribute<string> name  := AsItemName(label);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}

	// URBAN CENTRE: Typology 30 is defined as: all cells with a local population density of at least 1,500 people/km2 or with a local built-up area share of at least 0.50, and clustered in a 4-connectivity object of at least 50,000 people or all cells resulting from 3x3 median filtering or by gap filling < 15 km2 (median filtering and gap filling applied to cluster of cells that met the previous logics)
	container Urban_Centre
	{
		container Parameters := DegreeOfUrbanisation/Parameters/Urban_Centre;
		// pop density >= 1500 person per km2 || BU share >= 0.5
		attribute<bool>        Has_Min_PopDensity                       (domain) := Population_Land_Density >= Parameters/Min_Density;
		attribute<bool>        Has_Min_BUShare                          (domain) := BuiltUp_Total_Area / Land_Area >= Parameters/Min_Additional_BU_Share; 
		attribute<bool>        IsDenseEnoughOrBuiltupEnough             (domain) := Has_Min_PopDensity || Has_Min_BUShare;
		
		// Clustered to total pop >= 50,000 persons
		unit<uint32> FindContiguousCells := district(uint8(IsDenseEnoughOrBuiltupEnough))
		{
			attribute<.>       GroupDomain_rel                          (domain) := districts;
			attribute<uint32>  GroupCellSize                            (domain) := pcount_uint32(districts)[GroupDomain_rel];
			attribute<Person>  Sum_Population_perGroup                           := sum(Population,GroupDomain_rel);
		}
		attribute<Person>      GroupPopulationSize                      (domain) := FindContiguousCells/GroupCellSize != max(FindContiguousCells/GroupCellSize) ? FindContiguousCells/Sum_Population_perGroup[FindContiguousCells/GroupDomain_rel] : null_f;
		attribute<bool>        IsLargeEnoughGroup                       (domain) := GroupPopulationSize >= Parameters/Min_Total_Pop;
	
		// All cells resulting from 3x3 median filtering 
		attribute<bool>        ToBeAdded_DueToMedianFiltering           (domain) := modus(IsLargeEnoughGroup[domain_x_pot/third_rel], domain_x_pot/first_rel); 
		
		// Gap filling: lake < 15km2
		unit<uint32> GapFilling := district(uint8(IsLargeEnoughGroup))
		{
			attribute<.>       GroupDomain_rel                          (domain) := districts;
			attribute<uint32>  GroupCellSize                            (domain) := pcount_uint32(districts)[GroupDomain_rel];
			attribute<km2>     GroupArea                                         := sum(Land_Area, GroupDomain_rel);
			attribute<bool>    IsGap                                             := NOT(first(IsLargeEnoughGroup, GroupDomain_rel));
		}
		
		//  NOW STILL CONTAINS SETTLEMENTS THAT NOT TRUE LAKES
		attribute<bool>        ToBeAdded_DueToGapFilling                (domain) := GapFilling/GroupArea[GapFilling/GroupDomain_rel] < Parameters/Max_LakeFill_Area;
		
		attribute<bool>        Result                                   (domain) := IsLargeEnoughGroup || ToBeAdded_DueToMedianFiltering || ToBeAdded_DueToGapFilling;
		attribute<TypologyK>   Typology                                 (domain) := Result ? TypologyK/v/urban_centre : null_b;
	}
	
	// DENSE URBAN CLUSTER: Typology 23 is defined as: all cells with a local population density of at least 1,500 people/km2 or with a local built-up area share of at least 0.50, and clustered in a 4-connectivity object of at least 5,000 people and are not typology 30
	container Dense_Urban_Cluster
	{
		container Parameters := DegreeOfUrbanisation/Parameters/Dense_Urban_Cluster;
		
		attribute<bool>        Has_Min_PopDensity                       (domain) := Population_Land_Density >= Parameters/Min_Density;
		attribute<bool>        Has_Min_BUShare                          (domain) := BuiltUp_Total_Area / Land_Area >= Parameters/Min_BU_Share; 
		attribute<bool>        IsDenseEnoughOrBuiltupEnough             (domain) := Has_Min_PopDensity || Has_Min_BUShare;
		
		unit<uint32> FindContiguousCells := district(uint8(IsDenseEnoughOrBuiltupEnough))
		{
			attribute<.>       GroupDomain_rel                          (domain) := districts;
			attribute<uint32>  GroupCellSize                            (domain) := pcount_uint32(districts)[GroupDomain_rel];
			attribute<Person>  Sum_Population_perGroup                           := sum(Population,GroupDomain_rel);
		}
		attribute<Person>      GroupPopulationSize                      (domain) := FindContiguousCells/GroupCellSize != max(FindContiguousCells/GroupCellSize) ? FindContiguousCells/Sum_Population_perGroup[FindContiguousCells/GroupDomain_rel] : null_f;
		attribute<bool>        IsLargeEnoughGroup                       (domain) := GroupPopulationSize >= Parameters/Min_Total_Pop;
		
		attribute<bool>        IsNotUrbanCentre                         (domain) := NOT(Urban_Centre/Typology == TypologyK/v/urban_centre);
		
		attribute<bool>        Result                                   (domain) := IsLargeEnoughGroup && IsNotUrbanCentre;
		attribute<TypologyK>   Typology                                 (domain) := Result ? TypologyK/v/Dense_Urban_Cluster : null_b;
	}
	
	

	// SEMI-DENSE URBAN CLUSTER: Typology 22 is defined as: all cells with a local population density of at least 300 people/km2 and with a local built-up area share of at least 0.03, or all cells with a local population density of at least 1,500 people/km2 or built-up area share of at least 0.5	, clustered in a 4-connectivity object of at least 5,000 people, farther than 3 km from a typology 23 or typology 22, and are not typology 30 or typology 23
	container Semi_Dense_Urban_Cluster
	{
		container Parameters := DegreeOfUrbanisation/Parameters/Semi_Dense_Urban_Cluster;

		attribute<bool>        Has_Min_PopDensity_low                   (domain) := Population_Land_Density >= Parameters/Min_Density_low;
		attribute<bool>        Has_Min_PopDensity_high                  (domain) := Population_Land_Density >= Parameters/Min_Density_high;
		attribute<bool>        Has_Min_BUShare_low                      (domain) := BuiltUp_Total_Area / Land_Area >= Parameters/Min_BU_Share_low; 
		attribute<bool>        Has_Min_BUShare_high                     (domain) := BuiltUp_Total_Area / Land_Area >= Parameters/Min_BU_Share_high; 
		
		attribute<bool>        IsDenseEnoughAndBuiltupEnough_low        (domain) := Has_Min_PopDensity_low && Has_Min_BUShare_low;
		attribute<bool>        IsDenseEnoughOrBuiltupEnough_high        (domain) := Has_Min_PopDensity_high || Has_Min_BUShare_high;
		
		attribute<bool>        IsDenseEnoughAndOrBuiltUpEnough_Combined (domain) := IsDenseEnoughAndBuiltupEnough_low || IsDenseEnoughOrBuiltupEnough_high;
		
		unit<uint32> FindContiguousCells := district(uint8(IsDenseEnoughAndOrBuiltUpEnough_Combined))
		{
			attribute<.>       GroupDomain_rel                          (domain) := districts;
			attribute<uint32>  GroupCellSize                            (domain) := pcount_uint32(districts)[GroupDomain_rel];
			attribute<Person>  Sum_Population_perGroup                           := sum(Population,GroupDomain_rel);
		}
		attribute<Person>      GroupPopulationSize                      (domain) := FindContiguousCells/GroupCellSize != max(FindContiguousCells/GroupCellSize) ? FindContiguousCells/Sum_Population_perGroup[FindContiguousCells/GroupDomain_rel] : null_f;
		attribute<bool>        IsLargeEnoughGroup                       (domain) := GroupPopulationSize >= Parameters/Min_Total_Pop;
		
		attribute<bool>        IsNotOtherTypology                       (domain) := NOT(
																						Urban_Centre/Typology == TypologyK/v/urban_centre 
																						|| Dense_Urban_Cluster/Typology == TypologyK/v/Dense_Urban_Cluster
																					);
																			
		attribute<bool>        Result_BeforeDistCriterium               (domain) := IsLargeEnoughGroup && IsNotOtherTypology;
		
		// Farther than 3km from type 23 (DUC) or 22 (SDUC) 
		// @JC to itself?          
		// attribute<bool>        IsDUCorSDUC                              (domain) := Dense_Urban_Cluster/Result || Result_BeforeDistCriterium;
		attribute<bool>        IsDUC                                    (domain) := Dense_Urban_Cluster/Result;
		attribute<bool>        IsFartherThan3kFrom_DUC_SDUC             (domain) := sum(uint32(IsDUC)[domain_x_pot/third_rel], domain_x_pot/first_rel) == 0; 
		
		attribute<bool>        Result                                   (domain) := Result_BeforeDistCriterium && IsFartherThan3kFrom_DUC_SDUC;
		attribute<TypologyK>   Typology                                 (domain) := Result ? TypologyK/v/Semi_dense_urban_cluster : null_b;
	}
	
	// SUBURBAN GRID CELL: Typology 21 is defined as: all cells with a local population density of at least 300 people/km2 and with a local built-up area share of at least 0.03, or all cells with a local population density of at least 1,500 people/km2 or built-up area share of at least 0.5, clustered in a 4-connectivity object of at least 5,000 people, within than 3 km from a typology 23 or typology 22, and are not typology 30 or typology 23
	container Suburban_Grid_Cell
	{
		container Parameters := DegreeOfUrbanisation/Parameters/Suburban_Grid_Cell;

		attribute<bool>        Has_Min_PopDensity_low                   (domain) := Population_Land_Density >= Parameters/Min_Density_low;
		attribute<bool>        Has_Min_PopDensity_high                  (domain) := Population_Land_Density >= Parameters/Min_Density_high;
		attribute<bool>        Has_Min_BUShare_low                      (domain) := BuiltUp_Total_Area / Land_Area >= Parameters/Min_BU_Share_low; 
		attribute<bool>        Has_Min_BUShare_high                     (domain) := BuiltUp_Total_Area / Land_Area >= Parameters/Min_BU_Share_high; 
		
		attribute<bool>        IsDenseEnoughAndBuiltupEnough_low        (domain) := Has_Min_PopDensity_low && Has_Min_BUShare_low;
		attribute<bool>        IsDenseEnoughOrBuiltupEnough_high        (domain) := Has_Min_PopDensity_high || Has_Min_BUShare_high;
		
		attribute<bool>        IsDenseEnoughAndOrBuiltUpEnough_Combined (domain) := IsDenseEnoughAndBuiltupEnough_low || IsDenseEnoughOrBuiltupEnough_high;

		unit<uint32> FindContiguousCells := district(uint8(IsDenseEnoughAndOrBuiltUpEnough_Combined))
		{
			attribute<.>       GroupDomain_rel                          (domain) := districts;
			attribute<uint32>  GroupCellSize                            (domain) := pcount_uint32(districts)[GroupDomain_rel];
			attribute<Person>  Sum_Population_perGroup                           := sum(Population,GroupDomain_rel);
		}
		attribute<Person>      GroupPopulationSize                      (domain) := FindContiguousCells/GroupCellSize != max(FindContiguousCells/GroupCellSize) ? FindContiguousCells/Sum_Population_perGroup[FindContiguousCells/GroupDomain_rel] : null_f;
		attribute<bool>        IsLargeEnoughGroup                       (domain) := GroupPopulationSize >= Parameters/Min_Total_Pop;
		
		attribute<bool>        IsDUCorSDUC                              (domain) := Dense_Urban_Cluster/Result || Semi_Dense_Urban_Cluster/Result;
		attribute<bool>        IsWithin3kFrom_DUC_SDUC                  (domain) := sum(uint32(IsDUCorSDUC)[domain_x_pot/third_rel], domain_x_pot/first_rel) > 0; 
		
		attribute<bool>        IsNotOtherTypology                       (domain) := NOT(
																						Urban_Centre/Typology == TypologyK/v/Urban_Centre 
																						|| Dense_Urban_Cluster/Typology == TypologyK/v/Dense_Urban_Cluster
																					);
		
		attribute<bool>        Result                                   (domain) := IsLargeEnoughGroup && IsWithin3kFrom_DUC_SDUC && IsNotOtherTypology;
		attribute<TypologyK>   Typology                                 (domain) := Result ? TypologyK/v/Suburban_Grid_Cell : null_b;
	}
	
	// RURAL CLUSTER: Typology 13 is defined as: all cells with a local population density of at least 300 people/km2 or with a local built-up area share of at least 0.50, and clustered in a 4-connectivity object of at least 500 people and are not typology 30 or typology 2X
	container Rural_Cluster
	{
		container Parameters := DegreeOfUrbanisation/Parameters/Rural_Cluster;
		
		attribute<bool>        Has_Min_PopDensity                       (domain) := Population_Land_Density >= Parameters/Min_Density;
		attribute<bool>        Has_Min_BUShare                          (domain) := BuiltUp_Total_Area / Land_Area >= Parameters/Min_BU_Share; 
		attribute<bool>        IsDenseEnoughOrBuiltupEnough             (domain) := Has_Min_PopDensity || Has_Min_BUShare;
		
		unit<uint32> FindContiguousCells := district(uint8(IsDenseEnoughOrBuiltupEnough))
		{
			attribute<.>       GroupDomain_rel                          (domain) := districts;
			attribute<uint32>  GroupCellSize                            (domain) := pcount_uint32(districts)[GroupDomain_rel];
			attribute<Person>  Sum_Population_perGroup                           := sum(Population,GroupDomain_rel);
		}
		attribute<Person>      GroupPopulationSize                      (domain) := FindContiguousCells/GroupCellSize != max(FindContiguousCells/GroupCellSize) ? FindContiguousCells/Sum_Population_perGroup[FindContiguousCells/GroupDomain_rel] : null_f;
		attribute<bool>        IsLargeEnoughGroup                       (domain) := GroupPopulationSize >= Parameters/Min_Total_Pop;
		
		attribute<bool>        IsNotOtherTypology                       (domain) := NOT(
																						Urban_Centre/Typology == TypologyK/v/urban_centre 
																						|| Dense_Urban_Cluster/Typology == TypologyK/v/Dense_Urban_Cluster
																						|| Semi_Dense_Urban_Cluster/Typology == TypologyK/v/Semi_Dense_Urban_Cluster
																						|| Suburban_Grid_Cell/Typology == TypologyK/v/Suburban_Grid_Cell
																					);
		
		attribute<bool>        Result                                   (domain) := IsLargeEnoughGroup && IsNotOtherTypology;
		attribute<TypologyK>   Typology                                 (domain) := Result ? TypologyK/v/Rural_Cluster : null_b;
	}
	
	// LOW DENSITY RURAL GRID CELL: Typology 12 is defined as: all cells with a local population density of at least 50 people/km2 and are not typology 30 or typology 2X or typology 13
	container Low_Density_Rural_Grid_Cell
	{
		container Parameters := DegreeOfUrbanisation/Parameters/Low_Density_Rural_Grid_Cell;
		
		attribute<bool>        Has_Min_PopDensity                       (domain) := Population_Land_Density >= Parameters/Min_Density;
		attribute<bool>        IsNotOtherTypology                       (domain) := NOT(
																						Urban_Centre/Typology == TypologyK/v/urban_centre 
																						|| Dense_Urban_Cluster/Typology == TypologyK/v/Dense_Urban_Cluster
																						|| Semi_Dense_Urban_Cluster/Typology == TypologyK/v/Semi_Dense_Urban_Cluster
																						|| Suburban_Grid_Cell/Typology == TypologyK/v/Suburban_Grid_Cell
																						|| Rural_Cluster/Typology == TypologyK/v/Rural_Cluster
																					);
																			
		attribute<bool>        Result                                   (domain) := Has_Min_PopDensity && IsNotOtherTypology;
		attribute<TypologyK>   Typology                                 (domain) := Result ? TypologyK/v/Low_Density_Rural_Grid_Cell : null_b;
	}

	// VERY LOW DENSITY GRID CELL: Typology 11 is defined as: all cells that are on land and are not typology 30 or typology 2X or typology 13 or typology 12
	container Very_Low_Density_Grid_Cell
	{
		container Parameters := DegreeOfUrbanisation/Parameters/Very_Low_Density_Grid_Cell;
		
		attribute<bool>        IsOnLand                                 (domain) := /SourceData/Physical/Coast/Coastline/Read_per_grid;
		attribute<bool>        IsNotOtherTypology                       (domain) := NOT(
																						Urban_Centre/Typology == TypologyK/v/urban_centre 
																						|| Dense_Urban_Cluster/Typology == TypologyK/v/Dense_Urban_Cluster
																						|| Semi_Dense_Urban_Cluster/Typology == TypologyK/v/Semi_Dense_Urban_Cluster
																						|| Suburban_Grid_Cell/Typology == TypologyK/v/Suburban_Grid_Cell
																						|| Rural_Cluster/Typology == TypologyK/v/Rural_Cluster
																						|| Low_Density_Rural_Grid_Cell/Typology == TypologyK/v/Low_Density_Rural_Grid_Cell
																					);
																			
		attribute<bool>        Result                                   (domain) := IsOnLand && IsNotOtherTypology;
		attribute<TypologyK>   Typology                                 (domain) := Result ? TypologyK/v/Very_Low_Density_Grid_Cell : null_b;
	}
	
	
	attribute<TypologyK>       Typology                                 (domain) := ='switch('+AsList('case('+TypologyK/name+'/Result, TypologyK/v/'+TypologyK/name+')', ',')+', null_b)';


	unit<uint32> domain_x_pot := combine(domain, Distmatrices/pot1km/Buffer_NonNull_Cells) //pot1km == 3x3 cellen zonder diagonalen, pot2km == 5x5 cellen
	{	
		attribute<domain> third_rel := wpoint(spoint(first_rel) + second_rel -> org_rel);
	}
	unit<uint32> domain_x_pot3k := combine(domain, Distmatrices/pot3km/Buffer_NonNull_Cells) //pot3km == 7x7 cellen zonder diagonalen, met gekke vervorming
	{	
		attribute<domain> third_rel := wpoint(spoint(first_rel) + second_rel -> org_rel);
	}

}