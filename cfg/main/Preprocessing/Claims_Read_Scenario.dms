container Scenario : using = "SourceData/RegionalUnits;geography"
{
	container ReadFiles := //fka M3
		for_each_ne(Classifications/SSP/name, 
			'ReadFiles_T('
				+quote(Classifications/SSP/name+'_POPULATION_2010_2100_var1.csv')+
				','+string(Classifications/SSP/id)+
			')'
		);

	template ReadFiles_T
	{
		// begin of caseparameters
		parameter<String> FileName;
		parameter<uint32> ScenId;
		// end of caseparameters
		parameter<string> Method := 'M3';

		unit<uint32> FileData
		: StorageName     = "='%projdir%/data/Claim/'+Method+'/'+FileName"
		, StorageType     = "gdal.vect"
		, StorageReadOnly = "True"
		{
			parameter<string>            Name            := Classifications/SSP/name[ScenId[uint8]];
			attribute<Countries>         Country_rel     := rlookup(Region, Countries/ISO3);
			attribute<LatLong>           geometry (poly) := Countries/Geometry_LL[Country_rel];

			attribute<float32> population_to_use_2010_f                     :=population_to_use_2010[float32];
			attribute<float32> urbanpop2010_f                               :=urbanpop2010[float32];
			attribute<float32> urbanpop2010_f_c_org (Countries) :=1000000f * rjoin(Countries/ISO3,Region,urbanpop2010_f);
			attribute<float32> urbanpop2010_f_c (Countries)     :=MakeDefined(1000000f * rjoin(Countries/ISO3,Region,urbanpop2010_f),0f);
			attribute<string>  Label       := Region;
			// attribute<uint32>  grid_count  := Countries/grid_count[Country_rel] ;
			// attribute<float32> area        := Countries/area [Country_rel];
			// attribute<float32> pop_density := 1000000f * Float32(population_to_use_2010) / area; //This density is urban population divided by total country area!
		}
	}
}