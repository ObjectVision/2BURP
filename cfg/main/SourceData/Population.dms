container Population  : using = "units;geography;classifications;sourcedata/regionalunits"
{
	container Import_PerYear_Mollweide := 
		for_each_ndvat(
			GHS_years/name
			, domain
			, float64
			, '%ToBURPDataDir%/Population/POP_'+string(GHS_years/year)+'_'+ModelParameters/Gridsize+'_WPP2024_v2.tif'  
			,'gdal.grid'
		); //, URL = "https://human-settlement.emergency.copernicus.eu/download.php?ds=pop"; (invalid URL as theses are custom results for 2BURP, aligned with the WPP24 population projections)

	container Import_PerYear_LatLong := 
		for_each_ndvat(
			GHS_years/name
			, domain
			, float64
			, '%ToBURPDataDir%/Population/POP_'+string(GHS_years/year)+'_100_WPP2024_EPSG4326_osAdapt_'+string(ModelParameters/WGS_Gridsize)+'ss.tif'  
			,'gdal.grid'
		); //, URL = "https://human-settlement.emergency.copernicus.eu/download.php?ds=pop"; (invalid URL as theses are custom results for 2BURP, aligned with the WPP24 population projections)

	container Import_PerYear := =ModelParameters/domain_EPSG == '54009' ? 'Import_PerYear_Mollweide' : 'Import_PerYear_LatLong';


	//adhoc
	unit<uint32> histogram_population := unique(int32(Import_PerYear/Y2020))
	{
		attribute<uint32> count := pcount(rlookup(int32(Import_PerYear/Y2020), values)); 
	}

	container PerYear_CorrectForNoData := 
		for_each_nedv(
			GHS_years/name
			, 'Import_PerYear/'+GHS_years/name+' > 0d ? Import_PerYear/'+GHS_years/name+' : 0d'
			, domain
			, float64
		);
		
	container PerYear_Unrounded := // Correct for population without no built-up area
		for_each_nedv(
			GHS_years/name
			, 'Builtup/Total/'+GHS_years/name+' > 0[m2] ? PerYear_CorrectForNoData/'+GHS_years/name+' : 0d'
			, domain
			, float64
		)
	{
		//adhoc
		attribute<bool> NoBuiltUp_butPopulation (domain) := BuiltUp/Total/Y2020 == 0[m2] && PerYear_CorrectForNoData/Y2020 > 0d;
		attribute<bool> BuiltUp_withPopulation  (domain) := BuiltUp/Total/Y2020 > 0[m2]  && PerYear_CorrectForNoData/Y2020 > 0d;
		
		parameter<float32> Pop_with_no_BU  := sum(float32(NoBuiltUp_butPopulation) * float32(PerYear_CorrectForNoData/Y2020));
		
	}
	
	container PerYear := 
		for_each_ne(
			GHS_years/name
			, 'Round_T('+quote(GHS_years/name)+')'
		)
	{
		parameter<bool> Generate := True, ExplicitSuppliers = "=AsList(Classifications/GHS_years/name+'/Write_Population_trunc_domain_result', ';')";
		parameter<bool>   check_files:= ='all(union_data(Classifications/GHS_years, '+asitemlist(Classifications/GHS_years/name+'/check_file')+'))';
	}	
		
	Template Round_T 
	{
		parameter<string> Year;
		///
		
		attribute<Person> 			 Population_incl_nobuiltup			     (domain) := ='FunctionalAreas/IsStudyArea_domain ? PerYear_CorrectForNoData/'+Year+'[Person] : null_f';
		attribute<Person>            Population_domain                       (domain) := ='FunctionalAreas/IsStudyArea_domain ? PerYear_Unrounded/'+Year+'[Person] : null_f';
		attribute<Person>            Population_org                 (CompactedDomain) := Population_domain[CompactedDomain/org_rel]; 
		attribute<Person>			 Population_domain_FA			(FunctionalAreas) := sum(Population_incl_nobuiltup[CompactedDomain/org_rel], FunctionalAreas/per_CompactedDomain);
		attribute<Person>			 Population_without_builtup		(FunctionalAreas) := max_elem(sum(Population_incl_nobuiltup[CompactedDomain/org_rel], FunctionalAreas/per_CompactedDomain) - sum(Population_org, FunctionalAreas/per_CompactedDomain), 0[Person]);
		attribute<Person>			 Population_rescaled			(CompactedDomain) := Population_org + scalesum(Population_org, FunctionalAreas/per_CompactedDomain, Population_without_builtup);
		attribute<Person>            Population_Trunc_domain        (CompactedDomain) := min_elem_alldefined(Population_rescaled, maxmax_saturation); //truncate for unrealistic densities (e.g. very much population in hardly any builtup area).
		parameter<Person>            maxmax_saturation                                := ModelParameters/Pop_maxmax_saturation;
		attribute<Person>            Population_base                (CompactedDomain) := Population_Trunc_domain;
		attribute<Person>            Population_trunc               (CompactedDomain) := uint32(Population_base)[Person];
		attribute<Person>            Population_frac_rank           (CompactedDomain) := float32(Population_trunc + 1f) - Population_base;
		attribute<Person>            RegionalDeficit                (FunctionalAreas) := sum(Population_base, FunctionalAreas/per_CompactedDomain) - float32(sum(Population_trunc, FunctionalAreas/per_CompactedDomain));
		attribute<Person>            Max_rank                       (FunctionalAreas) := nth_element(Population_frac_rank, uint32(RegionalDeficit), FunctionalAreas/per_CompactedDomain);
		
		attribute<NrPerson>          Population                     (CompactedDomain) := Population_trunc[NrPerson] + int32(Population_frac_rank < Max_rank[FunctionalAreas/per_CompactedDomain])[NrPerson];
		attribute<NrPerson>          Write_Population_trunc_domain_result    (domain) := recollect_by_cond(domain/IsCompactedDomain, Population)
		, StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/Population_'+Year+'_'+ModelParameters/domain_EPSG+'.tif'";
		attribute<NrPerson>          Read_Population                         (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/Population_'+Year+'_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
		attribute<NrPerson>			 Population_read_FA			(FunctionalAreas) := sum(Read_Population[CompactedDomain/org_rel], FunctionalAreas/per_CompactedDomain);
		parameter<bool> 			 check_file:= ='strlen('+quote(ExistingFile('', '%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/Population_'+Year+'_'+ModelParameters/domain_EPSG+'.tif'))+') > 0';
	}
	
	container PerYear_in_CD :=
		for_each_nedv(
			GHS_years/name
			, 'collect_by_cond(CompactedDomain, domain/IsCompactedDomain, PerYear/'+GHS_years/name+'/Read_Population)'
			, CompactedDomain
			, NrPerson
		);
	container inhabited_cells:=
		for_each_nedv(
			GHS_years/name
			, 'sum(uint32(PerYear_in_CD/'+GHS_years/name+' > 1d))'
			, void
			, uint32
		);
	
	unit<uint8> Population_OnLand_Density_Histogram := Pop_Bins
	{
		container PerYear_classes := 
			for_each_nedv(
				GHS_years/name
				, 'pcount(Classify(float32(PerYear/'+GHS_years/name+'/Read_Population[CompactedDomain/domain_rel]), ClassBreaks))'
				, .
				, uint32
			)
		{
			attribute<string>  Label     (..) := ../label;
		}
	}
	
	container Total_sums_5km:=  for_each_nedv(GHS_years/name, 'potential(float32(PerYear/'+GHS_years/name+'/Read_Population), Distmatrices/Impl/pot5km/potRange/flat2)',  domain, float32);
	
	container Pots_lin_5km:=  for_each_nedv(GHS_years/name, 'potential(float32(PerYear/'+GHS_years/name+'/Read_Population), Distmatrices/Impl/pot5km/potRange/RelWeight_ns)',  domain, float32);
	container Pots_sqr_5km:=  for_each_nedv(GHS_years/name, 'potential(float32(PerYear/'+GHS_years/name+'/Read_Population), Distmatrices/Impl/pot5km/potRange/RelWeightSqrt_ns)',  domain, float32);
	container Pots_lin_10km:= for_each_nedv(GHS_years/name, 'potential(float32(PerYear/'+GHS_years/name+'/Read_Population), Distmatrices/Impl/pot10km/potRange/RelWeight_ns)', domain, float32);
	container Pots_sqr_10km:= for_each_nedv(GHS_years/name, 'potential(float32(PerYear/'+GHS_years/name+'/Read_Population), Distmatrices/Impl/pot10km/potRange/RelWeightSqrt_ns)', domain, float32);
	container Pots_lin_20km:= for_each_nedv(GHS_years/name, 'potential(float32(PerYear/'+GHS_years/name+'/Read_Population), Distmatrices/Impl/pot20km/potRange/RelWeight_ns)', domain, float32);
	container Pots_sqr_20km:= for_each_nedv(GHS_years/name, 'potential(float32(PerYear/'+GHS_years/name+'/Read_Population), Distmatrices/Impl/pot20km/potRange/RelWeightSqrt_ns)', domain, float32);
	container Pots_lin_40km:= for_each_nedv(GHS_years/name, 'potential(float32(PerYear/'+GHS_years/name+'/Read_Population), Distmatrices/Impl/pot40km/potRange/RelWeight_ns)', domain, float32);
	container Pots_sqr_40km:= for_each_nedv(GHS_years/name, 'potential(float32(PerYear/'+GHS_years/name+'/Read_Population), Distmatrices/Impl/pot40km/potRange/RelWeightSqrt_ns)', domain, float32);
	
}