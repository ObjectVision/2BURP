container RegionalUnits
{
	// #include <Country.dms>
	
	unit<uint32> CIESIN 
	: StorageName = "%ToBURPDataDir%/Regions/Global_admin0.shp"
	, StorageType = "gdal.vect"
	, StorageReadOnly = "true"
	{
		attribute<LatLong>           Geometry (poly);
		attribute<SphericalMercator> Geometry_WM       (poly) := convert(Geometry, SphericalMercator);
		attribute<SphericalMercator>           Geometry_WM_Simpl (poly) := bg_simplify_multi_polygon(Geometry_WM, 100.0);
		unit<uint32> seq2p := sequence2points(geometry);
		unit<uint32> seq2p_smpl := sequence2points(Geometry_WM_Simpl);
		attribute<string>            ISO3                     := FIRST_ISOA;
		attribute<store_Countries>   store_countries_rel      := rlookup(ISO3, store_Countries/values);
	}
	
	unit<uint32> GADM 
	: StorageName = "%ToBURPDataDir%/Regions/gadm_410.gpkg"
	, StorageType = "gdal.vect"
	, StorageReadOnly = "true"
	{
		attribute<LatLong>           Geometry (poly);
		attribute<string>            ISO3                     := GID_0;
		attribute<Store_Continents>  store_continents_rel     := rlookup(AsItemName(continent_name), Store_Continents/name);
		attribute<string>            continent_name           := switch(case(continent == 'Australia' || continent == 'Oceania', 'Australia_Oceania'), case(GID_0 = 'TUR', 'Europe'), continent);
		attribute<store_Countries>   store_countries_rel      := rlookup(ISO3, store_Countries/values);
	}
	
	unit<uint32> store_Countries := unique(CIESIN/ISO3)
	, storagename = "%ToBURPDataDir%/Regions/fss/Countries.fss"
	{
		attribute<string>            Label                    := Values;
		attribute<string>            ISO3                     := first(CIESIN/ISO3, CIESIN/store_countries_rel);
		attribute<LatLong>           Geometry_LL       (poly) := partitioned_union_polygon(CIESIN/geometry[LatLong_ip], CIESIN/store_countries_rel)[LatLong];
		attribute<WorldMollweide>    Geometry_MW       (poly) := convert(Geometry_LL, WorldMollweide);
		attribute<SphericalMercator> Geometry_WM       (poly) := convert(Geometry_LL, SphericalMercator);
		attribute<LatLong_mdegrees>  Geometry_mdegrees (poly) := Geometry_LL[LatLong_mdegrees];
		attribute<string>            values                   : DisableStorage = "true";
		attribute<Continents>        Continents_rel           := first(GADM/store_continents_rel, GADM/store_countries_rel);
		attribute<string>            continent_name           := first(GADM/continent_name, GADM/store_countries_rel);
	}
	
	unit<uint32> Countries
	: storagename = "= propvalue(store_Countries, 'StorageName')"
	, StorageReadOnly = "True"
	{
		attribute<string>            Label; 
		attribute<string>            ISO3; 
		attribute<LatLong>           geometry_LL (poly);
		attribute<SphericalMercator> Geometry_WM (poly); 
		attribute<WorldMollweide>    Geometry_MW (poly); 
		attribute<LatLong_mdegrees>  Geometry_mdegrees (poly);
		attribute<Continents>        Continents_rel;
		attribute<string>            continent_name;
		attribute<mainland>          mainland_rel               := rlookup(const(1u,.), mainland/values);
		attribute<.>                 per_grid              (domain) := poly2grid(geometry_LL , domain);
		// attribute<uint8>             per_ClaimCountry_grid (domain) := poly2grid(Preprocessing/Claims/Future/ReadFiles/SSP2/Filedata/geometry, domain)[uint8];
		// attribute<bool>              IsClaimCountry        (domain) := per_ClaimCountry_grid[int16] > -1s;
		
		container V := for_each_nedv(AsItemName(Label), String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> store_Continents := Classifications/Continents
	, storagename = "%ToBURPDataDir%/Regions/fss/Continents.fss"
	{
		attribute<LatLong>  geometry (poly) := partitioned_union_polygon(GADM/geometry[LatLong_ip], GADM/continents_rel)[LatLong];
		attribute<string>   name            := Classifications/Continents/name;
	}
	
	unit<uint8> Continents
	: storagename = "= propvalue(store_Continents, 'StorageName')"
	, StorageReadOnly = "True"
	{
		attribute<LatLong>  geometry (poly);
		attribute<string>   name;
		// attribute<string>   label           := Classifications/Continents/label;
		
		attribute<.>        per_grid        (domain) := poly2grid(geometry , domain);
		
		container V := for_each_nedv(AsItemName(name), String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> Mainland := unique_uint8(const(1u,Countries))
	{
		attribute<LatLong> geometry (poly) := partitioned_union_polygon(Countries/Geometry_mdegrees, Countries/mainland_rel)[LatLong];
	}
	
	unit<uint8> World : nrofrows = 1
	{
		attribute<string> Label  := const('World',.);
		
		container V := for_each_nedv(AsItemName(Label), String(ID(.))+'[..]', void, .);
	}
}