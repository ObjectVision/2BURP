container Physical : using = "geography;classifications"
{
	// unit<ipoint> Elevation
	// :	StorageName     = "%ToBURPDataDir%/physical/Elevation/gtopo30_NOAA_NGDC.tif"
	// ,	StorageType     = "gdal.grid"
	// ,	url             = "https://en.wikipedia.org/wiki/GTOPO30"
	// ,	Source          = "National Geophysical Data Center - NOAA Data Type:File Geodatabase Raster Dataset, Database: Y:\\data\\PBLbase\\Data\\MondiaalRelief.gdb, Raster: gtopo30_NOAA_NGDC"
						  // "conversion to tif-format in ArcGIS, 16_BIT_SIGNED, LZW-compression"
	// ,	StorageReadOnly = "True"
	// ,	DialogData      = "LatLong"
	// {
		// attribute<int16> ReadData(domain);
		// attribute<bool>  NoData(domain)   :=!IsDefined(ReadData);//visualtion purposes of nodata (null) values
		// attribute<int16> Elevation(domain):=MakeDefined(ReadData,0s);//0--> oceans/seas - no inland lakes! essential for rank there are values otherwise null in Urban_Cali --> moving of cururb
	// }	
	
	container Elevation 
	{
		// /*
		unit<ipoint> Elevation_3ss
		:	StorageName     = "%ToBURPDataDir%/physical/Elevation/GLO_90_3ss_4326.tif"
		,	StorageType     = "gdal.grid"
		,	StorageReadOnly = "True"
		,	DialogData      = "LatLong"
		, 	LazyCalculated  = "true"
		{
			attribute<int32> ReadData_org(domain_sub);
			attribute<int16> ReadData   (domain_sub) := ReadData_org[int16];
			attribute<int32> Write_Mean_1k        (domain) := mean_int32(ReadData_org, domain_sub/domain_rel), StorageName = "='%ToBURPDataDir%/physical/Elevation/'+ModelParameters/StudyArea+'_mean_1k.tif'";
		}
		// */
	
		attribute<int32> Mean_1k              (domain) : StorageName = "%ToBURPDataDir%/physical/Elevation/World_mean_1k.tif", StorageType = "gdal.grid", StorageReadOnly = "True", LazyCalculated = "True";
	}
	
	container TerrainRoughnessIndex
	{
		// /* only runnable if the original 3ss elevation grid is available locally.
		container TRI_generation 
		{
			attribute<int16>       Elevation      (CompactedDomainSub) := collect_by_cond(CompactedDomainSub, Physical/Elevation/Elevation_3ss/ReadData);
			attribute<int16>       Elevation_fr   (DistMatrices/CdomainSub_x_pot1k) := Elevation[DistMatrices/CdomainSub_x_pot1k/first_rel], LazyCalculated = "True";
			attribute<int16>       Elevation_tr   (DistMatrices/CdomainSub_x_pot1k) := Elevation[DistMatrices/CdomainSub_x_pot1k/third_rel], LazyCalculated = "True";
			attribute<int16>       Elevation_delta16(DistMatrices/CdomainSub_x_pot1k) := Elevation_fr - Elevation_tr, LazyCalculated = "True";
			attribute<int32>       Elevation_delta32(DistMatrices/CdomainSub_x_pot1k) := int32(Elevation_delta16), LazyCalculated = "True";
			attribute<int32>       Elevation_delta32_sqr(DistMatrices/CdomainSub_x_pot1k) := sqr(Elevation_delta32), LazyCalculated = "True";
			attribute<int32>       TRI_sqr_CD     (CompactedDomainSub) := sum(Elevation_delta32_sqr, DistMatrices/CdomainSub_x_pot1k/first_rel);
			attribute<TRI_Classes> TRI_K_rel      (CompactedDomainSub) := Classify(TRI_sqr_CD, TRI_Classes/ClassBreaks_sqr);
			
			attribute<uint16>      Calc_TRI_mean_30ss_ui16 (CompactedDomain) := sum_uint16(TRI_K_rel +1b, CompactedDomainSub/CompactedDomain_rel);
			attribute<float32>     Calc_TRI_mean_30ss      (CompactedDomain) := Calc_TRI_mean_30ss_ui16[Float32] * 0.01f;
			
			attribute<float32>     Write_TRI_mean_30ss   (domain) := Calc_TRI_mean_30ss[CompactedDomain/BaseGrid], StorageName = "='%ToBURPDataDir%/physical/TRI_mean_from_3ss_to_30ss/'+ModelParameters/StudyArea+'.tif'";
			attribute<float32>     TRI_mean_30ss         (domain) : StorageName     = "= PropValue(Write_TRI_mean_30ss, 'storagename')", StorageType = "gdal.grid", StorageReadOnly = "True", LazyCalculated = "True";
			
			parameter<string>      Generate                           := 'Ready', ExplicitSuppliers = "Write_TRI_mean_30ss";
		}
		// */
		attribute<float32> TRI_mean_30ss_World         (domain) : StorageName = "%ToBURPDataDir%/Physical/TRI_mean_from_3ss_to_30ss/World.tif", StorageReadOnly = "True", LazyCalculated = "True";
		
		unit<uint8> TRI_Classes : nrofrows = 7
		{
			attribute<uint8>   Class             := id(.) + 1b;
			attribute<string>  label             : ['level surface', 'nearly level surface', 'slightly rugged surface', 'intermediately rugged surface', 'moderately rugged surface', 'highly rugged surface', 'extremely rugged surface'];
			attribute<float32> ClassBreaks_org   : [0, 81, 117, 162, 240, 498, 959];
			attribute<int32>   ClassBreaks_sqr   := int32(sqr(ClassBreaks_org));
			
			container V := for_each_nedv(AsItemName(label), String(ID(.))+'[..]', void, .);
 		}
		
		container Read_PerContinentFiles :=
			for_each_ndnvat(
				Continents/name
				, Domain_perContinent
				, Continents/name
				, float32
				, '%ToBURPDataDir%/physical/TRI_mean_from_3ss_to_30ss/'+Continents/name+'.tif'
				, 'gdal.grid'
			)
		{	
			attribute<Continents>  Continent_rel (impl/MakeDomain_World/domain) := poly2grid(/SourceData/RegionalUnits/Continents/geometry, impl/MakeDomain_World/domain);
			attribute<float32>     Mozaic        (Impl/MakeDomain_World/domain) := ='raster_merge(Continent_rel, float32, '+AsItemList(Continents/name)+')', StorageName = "%ToBURPDataDir%/Physical/TRI_mean_from_3ss_to_30ss/World.tif";
		}

		container Domain_perContinent :=
			for_each_nex(
				Continents/name
				, 'Geography/Impl/MakeDomain_perContinent/'+Continents/name+'/domain'   
				, wpoint
			);
	}
	
	unit<ipoint> Slope_2021
	:	StorageName = "%ToBURPDataDir%/physical/Slope/gtopo30_degree_planar_zfactor1_ag1061_exportgeodms.tif"
	,	StorageType = "gdal.grid"
	,	url         = "%ToBURPDataDir%/physical/slope/USGS EROS Archive - Digital Elevation - Global Multi-resolution Terrain Elevation Data 2010 (GMTED2010).html"
	,	Source      = "DEM: Database: 	Y:\data\PBLbase\Data\MondiaalRelief.gdb Raster: 	gtopo30_NOAA_NGDC"
					  "Slope genereated in ArcGIS 10.6.1 from Slope-syntax DEM in degrees, planar, zfactor1  --> gtopo30_degree_planar_zfactor1_ag1061.tif"
					  "GeoDMS -3.40282E+38f has been given value 0 --> exported as tif"
	,	StorageReadOnly = "True"
	,	DialogData      = "LatLong"
	{
		attribute<float32> ReadData (domain);
	}	
	
	unit<ipoint> SnowIceCover
	:	StorageName     = "%ToBURPDataDir%/physical/SnowIceCover/Modis2001_SnowIce_unint2_2.tif"
	,	StorageType     = "gdal.grid"
	,	url             = "%ToBURPDataDir%/physical/MCD12Q1_UserGuide_07302013.pdf"//MODIS Web
	,	Source          = "Database: Y:\Data\PBLbase\Data\MODIS_BOS.gdb\MODIS_2001_BOS"
						  "conversion to tif-format in ArcGIS, unsigned integer 2 Bit, LZW-compression with correct extent"
	,	StorageReadOnly = "True"
	,	DialogData      = "LatLong"
	{
		attribute<uint8> ReadData (domain);
	}	
	
	#include <coast.dms>
	#include <natural_hazards.dms>
	
	container Water : using = "geography"
	{
		unit<uint32> Inland_Water
		:  StorageName      = "%ToBURPDataDir%/physical/Water/InlandWater.shp"
		,  StorageType      = "gdal.vect"
		,  StorageReadOnly  = "True"
		{
			attribute<LatLong>           Geometry(poly);
			attribute<m2>                Area                    := area(Geometry[WorldMollweide], float64)[m2];
			attribute<bool>              Write_per_grid (domain) := IsDefined(poly2grid(Inland_Water/geometry, domain)), StorageName = "= '%ToBURPDataDir%/physical/Water/'+ModelParameters/StudyArea+'/IsInlandWater.tif'";
			attribute<bool>              Read_per_grid  (domain) : StorageName = "=PropValue(Write_per_grid, 'StorageName')", StorageReadOnly = "true";
			
			attribute<bool>              Write_per_subgrid (domain_sub) := IsDefined(poly2grid(Inland_Water/geometry, domain_sub)), StorageName = "= '%ToBURPDataDir%/physical/Water/'+ModelParameters/StudyArea+'/IsInlandWater_subdomain.tif'";
			attribute<bool>              Read_per_subgrid  (domain_sub) : StorageName = "=PropValue(Write_per_subgrid, 'StorageName')", StorageReadOnly = "true";
		}

		#include <rivers.dms> // dms file kan evt gedelete? ligt aan calibratie
		#include <lakes.dms> // dms file kan evt gedelete? ligt aan calibratie
		#include <floodProneArea.dms>
		
		container AllWater
		{
			attribute<bool>    LandMass           (domain_sub) := Coast/Coastline/Read_per_subgrid;
			attribute<bool>    IsInlandWater      (domain_sub) := Water/Inland_Water/Read_per_subgrid;
			attribute<bool>    IsOcean            (domain_sub) := not(LandMass);
			attribute<bool>    IsWater            (domain_sub) := IsInlandWater || IsOcean;
			
			attribute<uint32>  Fraction_InlandWater0  (domain) := sum(IsInlandWater[uint32], domain_sub/domain_rel);
			attribute<uint32>  Fraction_InlandWater   (domain) := ((Fraction_InlandWater0[float32] / 36f) * 100f)[uint32];
			
			attribute<uint32>  Fraction_Water0        (domain) := sum(IsWater[uint32], domain_sub/domain_rel);
			attribute<uint32>  Fraction_Water         (domain) := ((Fraction_Water0[float32] / 36f) * 100f)[uint32];
			
			unit<uint32> large_inland_water := select_with_org_rel(Inland_Water/area[km2] > 0.5[km2]) 
			{
				attribute<SphericalMercator> geometry_mer (poly) := org_rel->Geometry[SphericalMercator];
			}
			attribute<Float32> sqr_dist                    (CompactedDomain) := Sqr(250000[meter] / CompactedDomain/lat_factor);
			
			attribute<Float32> Location2AllInland_distInfo   (CompactedDomain) := dist_info(Inland_Water/Geometry[SphericalMercator], CompactedDomain/Geometry_mer, sqr_dist);
			attribute<km>      Location2AllInland_km         (CompactedDomain) := (Location2AllInland_distInfo * CompactedDomain/lat_factor)[meter] * 0.001[km / meter];
			attribute<km>      Location2AllInland_km_domain_export    (domain) := min_elem(Location2AllInland_km[CompactedDomain/BaseGrid], 250[km]), StorageName = "= '%ToBURPDataDir%/Physical/water/'+ModelParameters/StudyArea+'/Location2AnyInland_km.tif'";
			
			attribute<Float32> Location2LargeInland_distInfo (CompactedDomain) := dist_info(large_inland_water/geometry_mer, CompactedDomain/Geometry_mer, sqr_dist);
			attribute<km>      Location2LargeInland_km       (CompactedDomain) := (Location2LargeInland_distInfo * CompactedDomain/lat_factor)[meter] * 0.001[km / meter];
			attribute<km>      Location2LargeInland_km_domain_export  (domain) := min_elem(Location2LargeInland_km[CompactedDomain/BaseGrid], 250[km]), StorageName = "= '%ToBURPDataDir%/Physical/water/'+ModelParameters/StudyArea+'/Location2LargeInland_km.tif'";
			
			unit<ipoint> Dist_AllInland_km   : StorageName = "= PropValue(Location2AllInland_km_domain_export, 'storagename')", StorageType = "gdal.grid", StorageReadOnly = "True", DialogData = "LatLong" {attribute<km> GridData (domain);}
			unit<ipoint> Dist_LargeInland_km : StorageName = "= PropValue(Location2LargeInland_km_domain_export, 'storagename')", StorageType = "gdal.grid", StorageReadOnly = "True", DialogData = "LatLong" {attribute<km> GridData (domain);}
		}
	}
}