container Physical : using = "geography"
{
	unit<ipoint> Elevation
	:	StorageName     = "%ToBURPDataDir%/physical/Elevation/gtopo30_NOAA_NGDC.tif"
	,	StorageType     = "gdal.grid"
	,	url             = "https://en.wikipedia.org/wiki/GTOPO30"
	,	Source          = "National Geophysical Data Center - NOAA Data Type:File Geodatabase Raster Dataset, Database: Y:\\data\\PBLbase\\Data\\MondiaalRelief.gdb, Raster: gtopo30_NOAA_NGDC"
						  "conversion to tif-format in ArcGIS, 16_BIT_SIGNED, LZW-compression"
	,	StorageReadOnly = "True"
	,	DialogData      = "LatLong"
	{
		attribute<int16> ReadData(domain);
		attribute<bool>  NoData(domain)   :=!IsDefined(ReadData);//visualtion purposes of nodata (null) values
		attribute<int16> Elevation(domain):=MakeDefined(ReadData,0s);//0--> oceans/seas - no inland lakes! essential for rank there are values otherwise null in Urban_Cali --> moving of cururb
	}	
	
	unit<ipoint> Elevation_new
	:	StorageName     = "%ToBURPDataDir%/physical/Elevation/GLO_90_3ss_4326.tif"
	,	StorageType     = "gdal.grid"
	,	StorageReadOnly = "True"
	,	DialogData      = "LatLong"
	, 	LazyCalculated  = "true"
	{
		attribute<int32> ReadData (domain);
	}
	
	unit<wpoint> TRI_new := domain
	{
		attribute<int32>   elevation := Elevation_new/ReadData;
		attribute<float32> TRI       := sqrt(
											  sqr(elevation - N)
											+ sqr(elevation - NE)
											+ sqr(elevation - E)
											+ sqr(elevation - SE)
											+ sqr(elevation - S)
											+ sqr(elevation - SW)
											+ sqr(elevation - W)
											+ sqr(elevation - NW)
										)[float32];
										
		attribute<int32>   N                   (domain) := elevation[(id(domain)) - point(1w, 0w, wpoint)];
		attribute<int32>   NE                  (domain) := elevation[(id(domain)) - point(1w, 0w, wpoint) + point(0w, 1w, wpoint)];
		attribute<int32>   E                   (domain) := elevation[(id(domain)) + point(0w, 1w, wpoint)];
		attribute<int32>   SE                  (domain) := elevation[(id(domain)) + point(1w, 1w, wpoint)];
		attribute<int32>   S                   (domain) := elevation[(id(domain)) + point(1w, 0w, wpoint)];
		attribute<int32>   SW                  (domain) := elevation[(id(domain)) + point(1w, 0w, wpoint) - point(0w, 1w, wpoint)];
		attribute<int32>   W                   (domain) := elevation[(id(domain)) - point(0w, 1w, wpoint)];
		attribute<int32>   NW                  (domain) := elevation[(id(domain)) - point(1w, 1w, wpoint)];
	}
	
	unit<ipoint> Slope_2021
	:	StorageName = "%ToBURPDataDir%/physical/Slope/gtopo30_degree_planar_zfactor1_ag1061_exportgeodms.tif"
	,	StorageType = "gdal.grid"
	,	url         = "%ToBURPDataDir%/physical/slope/USGS EROS Archive - Digital Elevation - Global Multi-resolution Terrain Elevation Data 2010 (GMTED2010).html"
	,	Source      = "DEM: Database: 	Y:\data\PBLbase\Data\MondiaalRelief.gdb Raster: 	gtopo30_NOAA_NGDC"
					  "Slope genereated in ArcGIS 10.6.1 from Slope-syntax DEM in degrees, planar, zfactor1  --> gtopo30_degree_planar_zfactor1_ag1061.tif"
					  "GeoDMS -3.40282E+38f has been given value 0 --> exported as tif"
	,	StorageReadOnly = "True"
	,	DialogData      = "LatLong"
	{
		attribute<float32> ReadData (domain);
	}	

	#include <TRI.dms>
	
	unit<ipoint> SnowIceCover
	:	StorageName     = "%ToBURPDataDir%/physical/SnowIceCover/Modis2001_SnowIce_unint2_2.tif"
	,	StorageType     = "gdal.grid"
	,	url             = "%ToBURPDataDir%/physical/MCD12Q1_UserGuide_07302013.pdf"//MODIS Web
	,	Source          = "Database: Y:\Data\PBLbase\Data\MODIS_BOS.gdb\MODIS_2001_BOS"
						  "conversion to tif-format in ArcGIS, unsigned integer 2 Bit, LZW-compression with correct extent"
	,	StorageReadOnly = "True"
	,	DialogData      = "LatLong"
	{
		attribute<uint8> ReadData (domain);
	}	
	
	#include <coast.dms>
	// #include <nature.dms>
	// #include <soil.dms>
	#include <natural_hazards.dms>
	
	container Water : using = "geography"
	{
		unit<uint32> Inland_Water
		:  StorageName      = "%ToBURPDataDir%/physical/Water/InlandWater.shp"
		,  StorageType      = "gdal.vect"
		,  StorageReadOnly  = "True"
		{
			attribute<LatLong>           Geometry(poly);
			attribute<bool>              Write_per_grid (domain) := IsDefined(poly2grid(Inland_Water/geometry, domain)), StorageName = "%ToBURPDataDir%/physical/Water/IsInlandWater.tif";
			attribute<bool>              Read_per_grid  (domain) : StorageName = "=PropValue(Write_per_grid, 'StorageName')", StorageReadOnly = "true";
			
			attribute<bool>              Write_per_subgrid (domain_sub) := IsDefined(poly2grid(Inland_Water/geometry, domain_sub)), StorageName = "%ToBURPDataDir%/physical/Water/IsInlandWater_subdomain.tif";
			attribute<bool>              Read_per_subgrid  (domain_sub) : StorageName = "=PropValue(Write_per_subgrid, 'StorageName')", StorageReadOnly = "true";
		}

		#include <rivers.dms>
		#include <lakes.dms>
		
		container Sweet_Water
		{
			attribute<float64> Sweet_Water_Distance(domain) := min_elem(Lakes/Dist_Lake_km/GridData[float64],Rivers/Dist_River_km/GridData[float64]);
		}

		#include <floodProneArea.dms>
		
		container AllWater
		{
			attribute<bool>   LandMass      (domain_sub) := Coast/Coastline/Read_per_subgrid;
			attribute<bool>   IsInlandWater (domain_sub) := Water/Inland_Water/Read_per_subgrid;
			attribute<bool>   IsOcean       (domain_sub) := not(LandMass);
			attribute<bool>   IsWater       (domain_sub) := IsInlandWater || IsOcean;
			
			attribute<uint32> Fraction_Water0  (domain) := sum(IsWater[uint32], domain_sub/domain_rel);
			attribute<uint32> Fraction_Water   (domain) := ((Fraction_Water0[float32] / 36f) * 100f)[uint32];
		}
	}
}