////////////////////////////////////////////////////////////////////////////////////////////
//            (C) Configuration 2BURP 2024                                                //
//         Netherlands Environmental Assessment Agency http://www.pbl.nl/en/contact       //
//  This work is licensed under a Creative Commons Attribution 4.0 International License  //
//              CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/              //
////////////////////////////////////////////////////////////////////////////////////////////

// Author:   Jip Claassens
// Function: Make distance-grids to roads

container Infrastructure : using = "Geography"
{
	container GRIP4 
	:  StorageName     = "%ToBURPDataDir%/Socioeconomic/Infrastructure/Roads/GRIP4/GRIP4_GlobalRoads.gdb"
	,  StorageType     = "gdal.vect"
	,  url             = "%ToBURPDataDir%/Socioeconomic/Infrastructure/Roads/GRIP4/Global Roads Inventory Project 2018 GRIP4 (PBL) - DataPortaal Explorer_xml.mht"
	,  StorageReadOnly = "True"
	,  Source          = "PBL GRIP4_GlobalRoads_NL"
	{
		unit<uint32> Roads123
		:	SQLString  = "SELECT * FROM GRIP4_GlobalRoads WHERE GP_RTP =1 OR GP_RTP =2 OR GP_RTP =3"
		{
			attribute<LatLong> Geometry (arc);
			attribute<SphericalMercator>     geometry_mer (arc):= geometry[SphericalMercator];
			parameter<uint32>  PenColor      := rgb(255,0,0),DialogType = "PenColor";
			parameter<float64> PenWorldWidth := 0.00001[float64],  DialogType = "PenWorldWidth";
		}
			
		unit<uint32> Roads45
		:	SQLString  = "SELECT * FROM GRIP4_GlobalRoads WHERE GP_RTP  > 3"
		{
			attribute<LatLong> Geometry (arc);
			attribute<SphericalMercator>     geometry_mer (arc):= geometry[SphericalMercator];
			parameter<uint32>  PenColor      := rgb(255,0,0),DialogType = "PenColor";
			parameter<float64> PenWorldWidth := 0.00001[float64],  DialogType = "PenWorldWidth";
		}
	}

	container Location2Roads123   := Templates/GetDistance_T(GRIP4/Roads123);
	container Location2Roads45    := Templates/GetDistance_T(GRIP4/Roads45);
	
	attribute<float32> Location2Roads123_sqr_domain_export    (domain) := Location2Roads123/Location2_sqr_domain_export
	, StorageName = "='%ToBURPDataDir%/Socioeconomic/Infrastructure/'+ModelParameters/StudyArea+'/Location2Road123_m_sqr_'+ModelParameters/domain_EPSG+'.tif'";
	attribute<float32> Location2Roads45_sqr_domain_export    (domain) := Location2Roads45/Location2_sqr_domain_export
	, StorageName = "='%ToBURPDataDir%/Socioeconomic/Infrastructure/'+ModelParameters/StudyArea+'/Location2Road45_m_sqr_'+ModelParameters/domain_EPSG+'.tif'";

	unit<ipoint> Location2Roads123_m_sqr
	:	StorageName     = "='%ToBURPDataDir%/Socioeconomic/Infrastructure/World/Location2Road123_m_sqr_'+ModelParameters/domain_EPSG+'.tif'"
	,	StorageType     = "gdal.grid"
	,	StorageReadOnly = "True"
	,	DialogData      = "CurrentProjection"
	, 	LazyCalculated  = "true"
	{
		attribute<float32> ReadData       (domain);
		attribute<float32> Corr_latfactor (domain) := sqrt(ReadData) * domain/lat_factor;
		attribute<km>      Result         (domain) := MakeDefined(min_elem(Corr_latfactor[meter], 250000[meter])[km], 250[km]);
	}
	unit<ipoint> Location2Roads45_m_sqr
	:	StorageName     = "='%ToBURPDataDir%/Socioeconomic/Infrastructure/World/Location2Road45_m_sqr_'+ModelParameters/domain_EPSG+'.tif'"
	,	StorageType     = "gdal.grid"
	,	StorageReadOnly = "True"
	,	DialogData      = "CurrentProjection"
	, 	LazyCalculated  = "true"
	{
		attribute<float32> ReadData       (domain);
		attribute<float32> Corr_latfactor (domain) := sqrt(ReadData) * domain/lat_factor;
		attribute<km>      Result         (domain) := MakeDefined(min_elem(Corr_latfactor[meter], 250000[meter])[km], 250[km]);
	}
}