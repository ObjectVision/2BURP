container Builtup : using = "units;classifications;sourcedata/regionalunits"
{
	container Total_src :=
		for_each_ndvat(
			GHS_years/name
			, domain
			, m2
			, '%ToBURPDataDir%/Builtup/GHS_BUILT_S_E'+string(GHS_years/year)+'_GLOBE_R2023A_4326_'+string(ModelParameters/WGS_Gridsize)+'_V1_0.tif'
			,'gdal.grid'
		);
		
	container Total :=
		for_each_ndvat(
			GHS_years/name
			, domain
			, m2
			, '%ToBURPDataDir%/Builtup/GHS_BUILT_S_E'+string(GHS_years/year)+'_GLOBE_R2023A_4326_'+string(ModelParameters/WGS_Gridsize)+'_V1_0.tif'
			,'gdal.grid'
		);
	container NonResidential :=
		for_each_ndvat(
			GHS_years/name
			, domain
			, m2
			, '%ToBURPDataDir%/Builtup/GHS_BUILT_S_NRES_E'+string(GHS_years/year)+'_GLOBE_R2023A_4326_'+string(ModelParameters/WGS_Gridsize)+'_V1_0.tif'
			,'gdal.grid'
		);
	container Residential := 
		for_each_nedv(
			GHS_years/name
			, 'Total/'+GHS_years/name+' - NonResidential/'+GHS_years/name
			, domain
			, m2
		);
	container Total_sums_5km:=  for_each_nedv(GHS_years/name, 'potential(float32(Total/'+GHS_years/name+'), Distmatrices/Impl/pot5km/potRange/flat2)[m2]',  domain, m2);
	
	
	//ad hoc
	unit<uint32> histogram_builtup := unique(Builtup/Total/Y2020)
	{
		attribute<uint32> count := pcount(rlookup(Builtup/Total/Y2020, values)); 
	}
	unit<uint32> percentages: nrofrows = 100 {
		attribute<string> 	label:= string(id(.)+1)+'%';
		attribute<float32>	cutoff:= float32(id(.)) * 10000f;
		attribute<int32>  	max:= max(compactdomain/d_perc, compactdomain/bu_2000_perc);
		attribute<int32>  	p99:= rth_element(compactdomain/d_perc, 0.99f, compactdomain/bu_2000_perc);
		
	}
	unit<uint32> compactdomain:= CompactedDomain {
		attribute<float32> bu_2000_corr:= float32(Builtup/Total/Y2000)[domain_rel] / lat_factor;
		attribute<float32> bu_2020_corr:= float32(Builtup/Total/Y2020)[domain_rel] / lat_factor;
		attribute<percentages> bu_2000_perc:= classify(float32(Builtup/Total/Y2000)[domain_rel], percentages/cutoff);
		attribute<percentages> bu_2020_perc:= classify(float32(Builtup/Total/Y2020)[domain_rel], percentages/cutoff);
		attribute<int32> d_perc:= int32(bu_2020_perc)+1i - int32(bu_2000_perc)+1i;
	}
	
	
	// end ad hoc
	
}
