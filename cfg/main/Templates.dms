container Templates
{
	Template GetDistance_T
	{
		unit<uint32> poly_set;
		///
	
		unit<uint32> segments := arc2segm(poly_set/Geometry_mer)
		, Descr = "to prepare for a pointset, we need to split up the lines into smaller segments to ensure enough points."
		{
			unit<uint32> pointset := union_unit(.,.)
			{
				attribute<SphericalMercator> point    := union_data(., ../point, ../nextpoint);
				attribute<..>                sequence := union_data(., id(..), id(..));
				attribute<uint32>            ordinal  := union_data(., const(0,..), const(1,..));
			}
			attribute<SphericalMercator> geometry_mer_segm (arc)   := points2sequence(pointset/point, pointset/sequence, pointset/ordinal);
		}
	
		unit<uint32> DynaPoints   := dyna_point_with_ends(segments/point, segments/nextpoint, 100d)
		, Descr ="Create pointset with small enough steps, say every 100m";
			
		unit<uint32> UqDynaPoints := unique(DynaPoints/point);

		unit<uint32> from_domain  := CompactedDomain 
		{
			attribute<SphericalMercator> geometry      := CompactedDomain/Geometry_mer;
			attribute<to_domain>         to_domain_rel := connect(to_domain/geometry, from_domain/geometry);
			attribute<SphericalMercator> geometry_to   := to_domain/geometry[to_domain_rel];
			attribute<float64>           sqrdist       := sqrdist(geometry_to, geometry);
		}

		unit<uint32> to_domain  := UqDynaPoints
		{
			attribute<SphericalMercator> geometry      := values;
		}
		
		attribute<float32> Location2_sqr         (CompactedDomain) := from_domain/sqrdist[float32]; 
		attribute<float32> Location2_sqr_domain_export    (domain) := Location2_sqr[CompactedDomain/BaseGrid];
	}


	Template potrange_T
	{
		//begin of case parameters
		parameter<km>      vertical_gridsize;
		parameter<km>      borderRadius;
		//end of case parameters
		unit<Float32> Potential;
		
		parameter<Float32> AspectRatio         := cos(Float32(pi()) * 30f / 180f); //assumption in LatLong: we expect most people live around 30 degrees. So this should be a representive grid 
		parameter<km>      horizontal_gridsize := vertical_gridsize * AspectRatio;
		parameter<float32> vertical_radius     := borderRadius / vertical_gridsize;
		parameter<float32> horizontal_radius   := borderRadius / horizontal_gridsize;
		
		unit<spoint>       potRange            := range(spoint, point_yx(-int16(vertical_radius), -int16(horizontal_radius)), point_yx(int16(vertical_radius) + int16(1), int16(horizontal_radius) + int16(1)))
		{
			attribute<Potential> distMatr          := Sqr(Float32(pointrow(ID(.)))) + Sqr(Float32(pointcol(ID(.)))*AspectRatio);
			attribute<km>        EuclideanDistMatr := Sqrt(distMatr)[km];
			attribute<float32>	 inv_EDM		   := EuclideanDistMatr[float32] <= vertical_radius ? 1f / max_elem(1f, EuclideanDistMatr[float32]) : 0f;
			// attribute<Potential> Weight            := interpolate_linear(EuclideanDistMatr * 1000[meter / km], value(Preprocessing/Suitability/DistanceBuildUp/Class/Distance_meter, meter), Float32(Preprocessing/Suitability/DistanceBuildUp/Class/PROBABILITY));
			// attribute<Potential> WeightCorr        := ID(.) == point_yx(0s, 0s) ? 0f : Weight;
			// attribute<Potential> RelWeightCorr     := scalesum(WeightCorr, 1f );
			
			attribute<Potential> AbsWeight         := iif(distMatr <= vertical_radius * vertical_radius, 1f / (distMatr + 0.08f), 0f);
			attribute<Potential> AbsWeight_noself  := distMatr > 0f ? AbsWeight : 0f;
			attribute<Potential> RelWeight         := scalesum(     AbsWeight , 1f );
			attribute<Potential> RelWeightSqrt     := scalesum(Sqrt(AbsWeight), 1f );
			attribute<Potential> RelWeight_ns      := scalesum(     AbsWeight_noself , 1f );
			attribute<Potential> RelWeightSqrt_ns  := scalesum(Sqrt(AbsWeight_noself), 1f );
			attribute<Potential> Conal             := scalesum(max_elem(vertical_radius - Sqrt(distMatr), 0f), 1f );
			
			attribute<Float32>   flat2             := Float32(distMatr <= (vertical_radius * vertical_radius));
			
			attribute<uint8>      buffer            := iif(distMatr <= vertical_radius * vertical_radius, 1b, 0b);
			
			unit<uint32> Buffer_NonNull_Cells := select_with_org_rel(buffer == 1b); 
		}
	}

	template WriteTable32ToCSV
	{
		// begin case parameters
		unit<uint32> table;
		parameter<string> fieldlist;
		parameter<string> filename;
		// end   case parameters

		container impl: isHidden = "True"
		{
			unit<uint32> Field := range(uint32,0,strcount(fieldlist,';')+1)
			{
				attribute<string> FieldDescr  := ReadArray(fieldlist,.,string,0);
				attribute<UInt32> SepPos      := strpos(FieldDescr, ':');
				attribute<string> Name        := IsDefined(SepPos) ? substr(FieldDescr, 0, SepPos): FieldDescr;
				attribute<string> NameInTable := IsDefined(SepPos) ? substr(FieldDescr, SepPos+1, strlen(FieldDescr)) : FieldDescr;
			}
		}
		parameter<string> Header := AsList(Quote(impl/Field/Name),';');
			
		parameter<string> Body_expr := AsList('AsExprList(table/' + impl/Field/NameInTable + ', id(table))',' +'';''+ ');
		attribute<string> Body (table) := =Body_expr;
		parameter<string> Result := Header + '\n' + AsList(Body+'\n', '')
		,	Storagename = "=filename"
		,	StorageType = "str";
	}

	template WriteTable8ToCSV
	{
		// begin case parameters
		unit<uint8> table;
		parameter<string> fieldlist;
		parameter<string> filename;
		// end   case parameters

		container impl: isHidden = "True"
		{
			unit<uint32> Field := range(uint32,0,strcount(fieldlist,';')+1)
			{
				attribute<string> FieldDescr  := ReadArray(fieldlist,.,string,0);
				attribute<UInt32> SepPos      := strpos(FieldDescr, ':');
				attribute<string> Name        := IsDefined(SepPos) ? substr(FieldDescr, 0, SepPos): FieldDescr;
				attribute<string> NameInTable := IsDefined(SepPos) ? substr(FieldDescr, SepPos+1, strlen(FieldDescr)) : FieldDescr;
			}
		}
		parameter<string> Header := AsList(Quote(impl/Field/Name),';');
			
		parameter<string> Body_expr := AsList('AsExprList(table/' + impl/Field/NameInTable + ', id(table))',' +'';''+ ');
		attribute<string> Body (table) := =Body_expr;
		parameter<string> Result := Header + '\n' + AsList(Body+'\n', '')
		,	Storagename = "=filename"
		,	StorageType = "str";
	}
}