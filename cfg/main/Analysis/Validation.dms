container Validation : using = "units;geography;sourcedata/regionalunits;classifications"
{
	parameter<string> StartYear := 'Y2000';
	parameter<string> ModelYear := 'Y2020';
	
	container InitialState
	{
		attribute<BuiltUpKm2>        BuiltUp_Total_Area_domain               (domain) := ='SourceData/BuiltUp/Total/'+StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
		attribute<BuiltUpKm2>        BuiltUp_Residential_Area_domain         (domain) := ='SourceData/BuiltUp/Residential/'+StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
		attribute<BuiltUpKm2>        BuiltUp_NonResidential_Area_domain      (domain) := ='SourceData/BuiltUp/NonResidential/'+StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
		attribute<float32>           BuiltUp_Total_Share_domain              (domain) := BuiltUp_Total_Area_domain / domain/area * 1[km2] / 1[BuiltUpKm2];
		attribute<Person>            Population_domain                       (domain) := ='SourceData/Population/PerYear/'+StartYear+'[Person]';
		attribute<Person_BuiltUpKm2> Population_inRes_Density_domain         (domain) := Population_domain / BuiltUp_Residential_Area_domain; // DO NOT USE!
		attribute<Person_BuiltUpKm2> Population_inRes_Density_Trunc_domain   (domain) := min_elem_alldefined(Population_inRes_Density_domain, maxmax_saturation);
		attribute<Person>            Population_Trunc_domain                 (domain) := Population_inRes_Density_Trunc_domain * BuiltUp_Residential_Area_domain; //truncate for unrealistic densities (e.g. very much population in hardly any builtup area).
		attribute<BuiltUpKm2>        BuiltUp_Total_Area             (CompactedDomain) := BuiltUp_Total_Area_domain[CompactedDomain/org_rel]; 
		attribute<BuiltUpKm2>        BuiltUp_Residential_Area       (CompactedDomain) := BuiltUp_Residential_Area_domain[CompactedDomain/org_rel]; 
		attribute<BuiltUpKm2>        BuiltUp_NonResidential_Area    (CompactedDomain) := BuiltUp_NonResidential_Area_domain[CompactedDomain/org_rel]; 
		attribute<float32>           Builtup_Total_Share            (CompactedDomain) := BuiltUp_Total_Share_domain[CompactedDomain/org_rel];
		attribute<percentages>       Perc_BuiltUp_Total             (CompactedDomain) := classify(100f * (BuiltUp_Total_Share), id(percentages)[float32]);
		attribute<Person>            Population_org                 (CompactedDomain) := Population_domain[CompactedDomain/org_rel]; 
		attribute<Person_BuiltUpKm2> Population_inRes_Density_org   (CompactedDomain) := Population_org / BuiltUp_Residential_Area; // DO NOT USE!
		attribute<Person_BuiltUpKm2> Population_inTot_Density_org   (CompactedDomain) := Population_org / BuiltUp_Total_Area; // DO NOT USE!
		attribute<Person_BuiltUpKm2> Population_inRes_Density       (CompactedDomain) := min_elem_alldefined(Population_inRes_Density_org, maxmax_saturation);
		attribute<Person_BuiltUpKm2> Population_inTot_Density       (CompactedDomain) := min_elem_alldefined(Population_inTot_Density_org, maxmax_saturation);
		attribute<Person>            Population                     (CompactedDomain) := Population_inRes_Density * BuiltUp_Residential_Area; //truncate for unrealistic densities (e.g. very much population in hardly any builtup area).
		
		parameter<Person_BuiltUpKm2> maxmax_saturation                                := 1000000[Person_BuiltUpKm2];
		container PopulationDensity_8dir  := Preprocessing/Population_Neighbourhoods/Create_8dir_T((Population_Trunc_domain / domain/area)[float64]);
	}
	
	unit<uint32> ClaimRegion := FunctionalAreas;

	container Claim
	{
		attribute<BuiltUpKm2> Builtup    (ClaimRegion) := ='sum(SourceData/BuiltUp/Total/'+ModelYear+'[km2] / 1[km2] * 1[BuiltUpKm2], ClaimRegion/per_Domain)';
		attribute<Person>     Population (ClaimRegion) := ='sum(SourceData/Population/PerYear/'+ModelYear+'[Person], ClaimRegion/per_Domain)';
	}

	container Allocate_Builtup   := Future/Allocate_Builtup_T(ModelYear, InitialState, InitialState, Claim/Builtup) 
	{
		container InitialState:= Future/InitialState;
	}
	container Allocate_Population := Future/Allocate_Population_T(ModelYear, InitialState, Allocate_Builtup/NewState, Claim/Population)
	{
		container InitialState:= Future/InitialState;
	}
	
	container Indicators
	{
		attribute<BuiltUpKm2> Observed_Builtup          (CompactedDomain) := ='(SourceData/BuiltUp/Total/'+ModelYear+'[km2] / 1[km2] * 1[BuiltUpKm2])[CompactedDomain/org_rel]';
		attribute<BuiltUpKm2> Modelled_Builtup          (CompactedDomain) := Allocate_Builtup/NewState/BuiltUp_Total_Area;
		
		attribute<Person>     Observed_Population       (CompactedDomain) := ='(SourceData/Population/PerYear/'+ModelYear+'[Person])[CompactedDomain/org_rel]';
		attribute<Person>     Modelled_Population       (CompactedDomain) := Allocate_Population/NewState/Population;
	
		attribute<float32>    ObservedMINUSModelled_Pop (CompactedDomain) := abs(Observed_Population - Modelled_Population);
		attribute<float32>    ObservedMINUSModelled_BU  (CompactedDomain) := abs(Observed_Builtup - Modelled_Builtup);
		
		attribute<bool>       IsBU_where_BU_ShouldBe    (CompactedDomain) := Observed_Builtup > 0[BuiltUpKm2] && Modelled_Builtup > 0[BuiltUpKm2] || Observed_Builtup == Modelled_Builtup;
		attribute<bool>       IsPop_where_Pop_ShouldBe  (CompactedDomain) := Observed_Population > 0[Person] && Modelled_Population > 0[Person] || Observed_Population == Modelled_Population;
		
		attribute<bool>       IsBU_without_Pop          (CompactedDomain) := Modelled_Builtup > 0[BuiltUpKm2] && Modelled_Population == 0[Person];
		attribute<bool>       HasPop_without_BU         (CompactedDomain) := Modelled_Population > 0[Person] && Modelled_Builtup == 0[BuiltUpKm2];
		
		unit<uint32> Per_FA := FunctionalAreas 
		{
			attribute<string>   Name                          := FunctionalAreas/label;
			attribute<float32>  MAPE_Builtup                  := 100f * (1f / count(Modelled_Builtup, CompactedDomain/FunctionalAreas_rel)[float32]) * sum( abs(ObservedMINUSModelled_BU / Observed_Builtup), CompactedDomain/FunctionalAreas_rel), Descr = "Mean Absolute Percentage Error: a measure used to evaluate the accuracy of a forecasting model. It expresses the accuracy as a percentage. Interpretation: Lower MAPE: Indicates a better fitting model, as the errors are smaller in comparison to the actual values. Higher MAPE: Suggests a less accurate model, with larger errors relative to the actual values.";
			attribute<float32>  MAPE_Pop                      := 100f * (1f / count(Modelled_Population, CompactedDomain/FunctionalAreas_rel)[float32]) * sum( abs(ObservedMINUSModelled_Pop / Observed_Population), CompactedDomain/FunctionalAreas_rel), Descr = "Mean Absolute Percentage Error: a measure used to evaluate the accuracy of a forecasting model. It expresses the accuracy as a percentage. Interpretation: Lower MAPE: Indicates a better fitting model, as the errors are smaller in comparison to the actual values. Higher MAPE: Suggests a less accurate model, with larger errors relative to the actual values.";
			
			attribute<float32>  PercOf_CorrectCellsWithAnyBU  := sum(IsBU_where_BU_ShouldBe[float32], CompactedDomain/FunctionalAreas_rel)[float32] / count(Modelled_Builtup, CompactedDomain/FunctionalAreas_rel)[float32];
			attribute<float32>  PercOf_CorrectCellsWithAnyPop := sum(IsPop_where_Pop_ShouldBe[float32], CompactedDomain/FunctionalAreas_rel)[float32] / count(Modelled_Population, CompactedDomain/FunctionalAreas_rel)[float32];
			
			attribute<float32>  PercOf_CellsBU_withoutPop     := sum(IsBU_without_Pop[float32], CompactedDomain/FunctionalAreas_rel)[float32] / count(Modelled_Builtup, CompactedDomain/FunctionalAreas_rel)[float32];
			attribute<float32>  PercOf_CellsPop_withoutBU     := sum(HasPop_without_BU[float32], CompactedDomain/FunctionalAreas_rel)[float32] / count(Modelled_Population, CompactedDomain/FunctionalAreas_rel)[float32];
			
		}
	}
}