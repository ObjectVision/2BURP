container Future : using = "units;geography;sourcedata/regionalunits;classifications"
{
	attribute<ClaimRegion>           Region_rel (CompactedDomain) := ClaimRegion/per_CompactedDomain;
	
	container InitialState 
	{
		attribute<BuiltUpKm2>        BuiltUp_Total_Area_domain               (domain) := ='SourceData/BuiltUp/Total/'+ModelParameters/StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
		attribute<BuiltUpKm2>        BuiltUp_Residential_Area_domain         (domain) := ='SourceData/BuiltUp/Residential/'+ModelParameters/StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
		attribute<BuiltUpKm2>        BuiltUp_NonResidential_Area_domain      (domain) := ='SourceData/BuiltUp/NonResidential/'+ModelParameters/StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
		attribute<float32>           BuiltUp_Total_Share_domain              (domain) := BuiltUp_Total_Area_domain / domain/area * 1[km2] / 1[BuiltUpKm2];
		attribute<Person>            Population_domain                       (domain) := ='SourceData/Population/PerYear/'+ModelParameters/StartYear+'[Person]';
		attribute<Person_BuiltUpKm2> Population_inRes_Density_domain         (domain) := Population_domain / BuiltUp_Residential_Area_domain; // DO NOT USE!
		attribute<Person_BuiltUpKm2> Population_inRes_Density_Trunc_domain   (domain) := min_elem_alldefined(Population_inRes_Density_domain, maxmax_saturation);
		attribute<Person>            Population_Trunc_domain                 (domain) := Population_inRes_Density_Trunc_domain * BuiltUp_Residential_Area_domain; //truncate for unrealistic densities (e.g. very much population in hardly any builtup area).
		
		attribute<BuiltUpKm2>        BuiltUp_Total_Area             (CompactedDomain) := BuiltUp_Total_Area_domain[CompactedDomain/org_rel]; 
		attribute<BuiltUpKm2>        BuiltUp_Residential_Area       (CompactedDomain) := BuiltUp_Residential_Area_domain[CompactedDomain/org_rel]; 
		attribute<BuiltUpKm2>        BuiltUp_NonResidential_Area    (CompactedDomain) := BuiltUp_NonResidential_Area_domain[CompactedDomain/org_rel]; 
		attribute<float32>           Builtup_Total_Share            (CompactedDomain) := BuiltUp_Total_Share_domain[CompactedDomain/org_rel];
		attribute<Person>            Population                     (CompactedDomain) := Population_domain[CompactedDomain/org_rel]; 
		attribute<Person_BuiltUpKm2> Population_inRes_Density       (CompactedDomain) := Population / BuiltUp_Residential_Area; // DO NOT USE!
		attribute<Person_BuiltUpKm2> Population_inRes_Density_Trunc (CompactedDomain) := min_elem_alldefined(Population_inRes_Density, maxmax_saturation);
		attribute<Person>            Population_Trunc               (CompactedDomain) := Population_inRes_Density_Trunc * BuiltUp_Residential_Area; //truncate for unrealistic densities (e.g. very much population in hardly any builtup area).
		
		parameter<Person_BuiltUpKm2> maxmax_saturation                                := 1000000[Person_BuiltUpKm2];
		
		//adhoc
		attribute<Person_BuiltUpKm2> Population_inBU_Density_domain          (domain) := Population_domain / BuiltUp_Total_Area_domain; // DO NOT USE!
		unit<uint32> histogram_NotTrunc_inRes_density := unique(int32(Population_inRes_Density_domain))
		{
			attribute<uint32> count := pcount(rlookup(int32(Population_inRes_Density_domain), values)); 
		}
		unit<uint32> histogram_NotTrunc_inTot_density := unique(int32(Population_inBU_Density_domain))
		{
			attribute<uint32> count := pcount(rlookup(int32(Population_inBU_Density_domain), values)); 
		}
	}

	container Suitabilities : KeepData = "true"
	{
		unit<wpoint> AutoGLM_Coeffs             := Analysis/Calibration/ReadCoffecients/coef2domain/domain;
		
		attribute<Suit> Calc (domain) := (Preprocessing/Population_Neighbourhoods/PopulationDensity_8dir_StartYear/Ln_mean_8dir[float32]                                     * AutoGLM_Coeffs/LnPopulationDensity_2000_8dir) + 
																(Physical/Coast/Location2Coast_km/Coastline[float32]                                                         * AutoGLM_Coeffs/Distance2Coastline) + 
																(Physical/Water/AllWater/Dist_LargeInland_km/GridData[float32]                                               * AutoGLM_Coeffs/Distance2FreshWater) + 
																// (Physical/Water/AllWater/Dist_AllInland_km/GridData[float32]                                                 * AutoGLM_Coeffs/Distance2AnyInlandWater) + 
																// (Physical/Water/AllWater/Dist_LargeInland_km/GridData[float32]                                               * AutoGLM_Coeffs/Distance2LargeInlandWater) + 
																(Socioeconomic/Infrastructure/Road/GRIP4_grid/Road123/Road123[float32]                                       * AutoGLM_Coeffs/Distance2MajorRoads) + 
																(Socioeconomic/Infrastructure/Road/GRIP4_grid/Road45/Road45[float32]                                         * AutoGLM_Coeffs/Distance2SecundaryRoads) + 
																// (Preprocessing/GridDists/AccessGrids_grid/cities/costsgrid_untiled_maximp_latitude_specific[float32]         * AutoGLM_Coeffs/Distance2Cities_GridBased) + 
																(Physical/Elevation/Elevation[float32]                                                                       * AutoGLM_Coeffs/Elevation) + 
																(Physical/Slope_2021/ReadData[float32]                                                                       * AutoGLM_Coeffs/Slope) + 
																(Physical/TerrainRoughnessIndex/mean                                                                         * AutoGLM_Coeffs/TRI_mean) + 
																(Policy/ProtectedAreas/ReadData[float32]                                                                     * AutoGLM_Coeffs/IsProtectedArea) + 
																(Physical/Water/FloodProneArea/RP100/ReadData[float32]                                                       * AutoGLM_Coeffs/IsFloodProneArea_RP100) + 
																(Physical/Natural_Hazards/Earthquake/Earthquakes_Modified_Mercalli_Intensity/ReadData[float32]               * AutoGLM_Coeffs/Earthquakes_MMI_Index) + 
																(Physical/Natural_Hazards/Landslide/Frequency_of_landslides_triggered_by_precipitations/LS_pr_uint8[float32] * AutoGLM_Coeffs/NrOfLandslides_Precipitation) + 
																(Physical/Natural_Hazards/Landslide/Frequency_of_landslides_triggered_by_earthquakes/LS_EQ_uint8[float32]    * AutoGLM_Coeffs/NrOfLandslides_Earthquakes) + 
																AutoGLM_Coeffs/Constant;
		attribute<Suit> Write (domain) := Calc, StorageName = "='%LocalDataProjDir%/Temp/'+ModelParameters/StudyArea+'/Suitability.tif'";
		attribute<Suit> Read  (domain) : StorageName = "=PropValue(Write, 'StorageName')", StorageReadOnly = "true", LazyCalculated = "true";
	}

	unit<uint32> ClaimRegion := FunctionalAreas 
	{
		attribute<Person>     Initial_Population_src           := sum(InitialState/Population, per_CompactedDomain);
		attribute<Person>     Initial_Population_Trunc         := sum(InitialState/Population_Trunc, per_CompactedDomain);
		attribute<BuiltUpKm2> Initial_BuiltUp_Total_Area       := sum(InitialState/BuiltUp_Total_Area, per_CompactedDomain);
		attribute<BuiltUpKm2> Initial_BuiltUp_Residential_Area := sum(InitialState/BuiltUp_Residential_Area, per_CompactedDomain);
	}

	container Claim
	{
		container Builtup    := Preprocessing/Claims_BuiltUp;
		container Population := Preprocessing/Claims_Population;
	}

	container Allocate_Builtup := 
		for_each_ne(
			ProjectionYears/name 
			,	'Allocate_Builtup_T('
					+quote(ProjectionYears/name)+                                        
					','+ProjectionYears/prevStateName+                                         // (0) State of previous period
					', Claim/Builtup/'+ProjectionYears/name+       // (1) Expected amount of builtup per region in km2
				')'
		);
		
	container Allocate_Population := 
		for_each_ne(
			ProjectionYears/name 
			,	'Allocate_Population_T('
					+quote(ProjectionYears/name)+
					','+ProjectionYears/prevStateName+
					', Allocate_Builtup/'+ProjectionYears/name+'/NewState'
					', Claim/Population/'+ProjectionYears/name+
				')'
		);

	
	
	Template Allocate_Population_T
	{
		parameter<string>  ThisYear;
		container          CurrState;
		container          NewState_BuiltUp;
		attribute<Person>  Claim (ClaimRegion);
		///
		parameter<float32> Initial_Population_Proportional_Reduction_Rate := 0.1f;
		parameter<float32> Initial_Population_Absolute_Reduction_Rate     := 0.1f;
		
		
		container LocalMaxima
		{
			parameter<Person_BuiltUpKm2_decade>  r_if_LocalMax     := 3500[Person_BuiltUpKm2_decade];
			parameter<Person_BuiltUpKm2_decade>  r_if_notLocalMax  := 2500[Person_BuiltUpKm2_decade];
			parameter<Person_BuiltUpKm2_decade>  r_if_notPopulated := 350[Person_BuiltUpKm2_decade];
			parameter<Person_BuiltUpKm2>         max_saturation    := 100000[Person_BuiltUpKm2];
			
			attribute<Person_BuiltUpKm2>  Current_LocalMaximum          (CompactedDomain) := max(CurrState/Population_inRes_Density_Trunc_domain[domain_x_pot/third_rel], domain_x_pot/first_rel)[CompactedDomain/org_rel]; 
			attribute<bool>               IsLocalMaximum                (CompactedDomain) := Current_LocalMaximum == CurrState/Population_inRes_Density_Trunc;
			attribute<bool>               HasNoPopulation               (CompactedDomain) := CurrState/Population == 0f;
			
			// If a cell has the highest local population in T1, it can only increase by 3.5K people in T2 (or by [100K - local pop] if this is smaller than 3.5K people)
			// If a cell is populated but it doesnâ€™t have the highest local population in T1, it can only increase in T2 to the local maximum in T1 + 2.5K people (or by [100K - local pop] if this is smaller than the local maximum in T1 + 2.5K people) 
			// If a cell is not populated in T1, it can only increase by 350 people in T2
			attribute<Person_BuiltUpKm2>  MaxAllowed_Population_Density (CompactedDomain) := 
				iif(HasNoPopulation
					, r_if_notPopulated * 1[decade]
					, median(max_saturation, CurrState/Population_inRes_Density_Trunc, CurrState/Population_inRes_Density_Trunc + (LocalMaxima/IsLocalMaximum ? r_if_LocalMax: r_if_notLocalMax)  * 1[decade])
				);
				
			attribute<Person>             MaxAllowed_Population         (CompactedDomain) := MaxAllowed_Population_Density * NewState_BuiltUp/BuiltUp_Residential_Area;
		}
		
		container Claims
		{
			attribute<Person>            Population                         (ClaimRegion) := Claim;
		}
		
		container Suitability
		{
			attribute<Suit>              BuiltUp                        (CompactedDomain) := Suitabilities/Read[CompactedDomain/org_rel];
			attribute<Suit>              NonNegative                    (CompactedDomain) := max_elem(BuiltUp, 0[Suit]);
			attribute<Suit>              Population                     (CompactedDomain) := NonNegative;
		}
		
		
		container NewState
		{
			//Reduction step 1: All cells will lose 10% of their initial population. This proportional reduction has the biggest impact in dense cells.
			attribute<Person>            Proportional_Reducted_Population       (CompactedDomain) := CurrState/Population_Trunc * (1f - Initial_Population_Proportional_Reduction_Rate); 
			
			//Reduction step 2: All inhabited cells will lose up to a fixed (per functional area) number of persons of 10% of the initial average population of the inhabited grid cells. This absolute reduction will have the biggest impact on low-density cells.
			attribute<Person>            Population_for_Region                      (ClaimRegion) := sum(CurrState/Population_Trunc, Region_rel);
			attribute<uint32>            NumberOfCellsWithPopulationPerRegion       (ClaimRegion) := sum_uint32(CurrState/Population_Trunc > 0[Person], Region_rel);
			attribute<float32>           Average_Population_per_PopulatedCell       (ClaimRegion) := Population_for_Region / NumberOfCellsWithPopulationPerRegion[float32];
			attribute<Person>            Regional_Reduction_per_cell                (ClaimRegion) := Average_Population_per_PopulatedCell * Initial_Population_Absolute_Reduction_Rate;
			attribute<Person>            Reduced_Population                     (CompactedDomain) := max_elem(Proportional_Reducted_Population - Regional_Reduction_per_cell[Region_rel], 0[Person]);
			
			//Adding step 3: Newly built-up areas will be populated based on the initial local average built-up population density in a 3x3 or 5x5 cell radius
			attribute<Person>            Avg_Local_Population_inRes_Density_Num (CompactedDomain) := sum(CurrState/Population_Trunc_domain[domain_x_pot/third_rel], domain_x_pot/first_rel)[CompactedDomain/org_rel]; 
			attribute<BuiltUpKm2>        Avg_Local_Population_inRes_Density_Den (CompactedDomain) := sum(CurrState/BuiltUp_Residential_Area_domain[domain_x_pot/third_rel], domain_x_pot/first_rel)[CompactedDomain/org_rel]; 
			attribute<Person_BuiltUpKm2> Avg_Local_Population_inRes_Density     (CompactedDomain) := Avg_Local_Population_inRes_Density_Num / Avg_Local_Population_inRes_Density_Den; 
			attribute<BuiltUpKm2>        BuiltUp_Total_Area                     (CompactedDomain) := NewState_BuiltUp/BuiltUp_Total_Area; 
			
			attribute<BuiltUpKm2>        New_BuiltUp_Area                       (CompactedDomain) := BuiltUp_Total_Area - CurrState/BuiltUp_Total_Area; 
			attribute<Person>            Population_in_New_BuiltUp_Area         (CompactedDomain) := New_BuiltUp_Area * Avg_Local_Population_inRes_Density;

			//Adding step 4: To the population we add the difference between the maximum allowed density and the initial density, after scaling it by the suitability, augmented to meet functional area claims.
			attribute<float32>           Sum_Suitability                            (ClaimRegion) := sum(Suitability/Population, Region_rel);
			attribute<Person>            Room_for_Population                    (CompactedDomain) := LocalMaxima/MaxAllowed_Population + Population_in_New_BuiltUp_Area - Reduced_Population;
			attribute<Person>            RestClaim                                  (ClaimRegion) := max_elem(Claims/Population - sum(Reduced_Population, Region_rel), 0[Person]);
			attribute<float32>           ScaleFactor_0                              (ClaimRegion) := RestClaim / Sum_Suitability; //Number of persons per suitability value. 
			
			attribute<Person>            Population_0                           (CompactedDomain) := ScaleFactor_0[Region_rel] * Suitability/Population; //for debug purposes
			attribute<bool>              Check_for_enough_suitable_locations        (ClaimRegion) := sum(Suitability/Population > 0f ? int32(Room_for_Population)[Person] : 0[Person], Region_rel) >= RestClaim; //for debug purposes
			
			unit<uint8> Iter := cat_range(0b,10b)
			{
				attribute<string> name      := 'Iter_'+string(id(.));
				attribute<string> prev_name := MakeDefined(name[sub_or_null(id(.),1b)]+'/ScaleFactor_new', 'ScaleFactor_0');
			}
			
			container Population_Allocation :=
				for_each_ne(
					Iter/name
					, 'Population_Allocation_T('+Iter/prev_name+')'
				)
			{
				container Last := =last(Iter/name);
			}
			
			Template Population_Allocation_T
			{
				attribute<float32>    ScaleFactor            (ClaimRegion);
				///
				attribute<Person>     Population         (CompactedDomain) := min_elem(ScaleFactor[Region_rel] * Suitability/Population, Room_for_Population);
				attribute<Person>     Population_rounded (CompactedDomain) := int32(Population)[Person]; //we round here, to omit fractional people which can then reallocated in the next iter.
				attribute<Person>     Realisation            (ClaimRegion) := sum(Population_rounded, Region_rel);
				attribute<float32>    RescaleFactor          (ClaimRegion) := RestClaim / Realisation; // We need to correct the scale factor to accomodate left over claims.
				attribute<float32>    ScaleFactor_new        (ClaimRegion) := ScaleFactor * RescaleFactor;
			}
			
			attribute<Person>         Final_Population   (CompactedDomain) := Population_Allocation/Last/Population_rounded;
			attribute<float32>        Final_ClaimRealisation (ClaimRegion) := sum(Final_Population + Reduced_Population, Region_rel) / Claims/Population;
		}
	}

	Template Allocate_Builtup_T
	{
		parameter<string>     ThisYear;
		container             CurrState;
		attribute<BuiltUpKm2> Claim (ClaimRegion);
		//
		parameter<float32> r_if_LocalMax    := 0.11f;
		parameter<float32> r_if_notLocalMax := 0.06f;
		parameter<float32> r_if_notBU       := 0.02f;
		parameter<float32> max_saturation   := 0.50f;
		
		container LocalMaxima
		{
			attribute<float32> Current_LocalMaximum_Share (CompactedDomain) := max(CurrState/BuiltUp_Total_Share_domain[domain_x_pot/third_rel], domain_x_pot/first_rel)[CompactedDomain/org_rel]; 
			attribute<bool>    IsLocalMaximum             (CompactedDomain) := Current_LocalMaximum_Share == CurrState/BuiltUp_Total_Share;
			attribute<bool>    HasNoBuiltUp               (CompactedDomain) := CurrState/BuiltUp_Total_Share == 0f;
			
			// If a cell has the highest local share of built-up area in T1, it can only increase by 11 pp in T2 (or by 50% - local share if this is smaller than 11 pp)
			// If a cell is built-up but it doesnâ€™t have the highest local share of built-up area in T1, it can only increase in T2 to the local maximum in T1 + 6 pp (or by 50% - local share, if this is smaller than local maximum in T1 + 6 pp)
			// If a cell is not built-up in T1, it can only increase by 2 pp in T2
			attribute<float32> MaxAllowed_Builtup_Total_Share   (CompactedDomain) := 
				iif(HasNoBuiltUp
					, r_if_notBU
					, median(max_saturation, CurrState/BuiltUp_Total_Share, CurrState/BuiltUp_Total_Share + (LocalMaxima/IsLocalMaximum ? r_if_LocalMax: r_if_notLocalMax))
				);
		}
		
		container Suitability
		{
			attribute<Suit>    BuiltUp                     (CompactedDomain) := Suitabilities/Read[CompactedDomain/org_rel];
		}
		
		container Claims
		{
			attribute<BuiltUpKm2>        Builtup                            (ClaimRegion) := Claim;
			// attribute<Person>            Population                         (ClaimRegion) := ='Preprocessing/Claims_Population/'+ThisYear;
		}
		
		container NewState
		{
			attribute<SuitNeg>    Rank                     (CompactedDomain) := -1[SuitNeg / Suit] * Suitability/BuiltUp;
			attribute<BuiltUpKm2> Delta_Claim                  (ClaimRegion) := Claims/BuiltUp - sum(CurrState/BuiltUp_Total_Area, Region_rel);
			attribute<BuiltUpKm2> Weight                   (CompactedDomain) := max_elem((LocalMaxima/MaxAllowed_Builtup_Total_Share - CurrState/BuiltUp_Total_Share) * CompactedDomain/area / 1[km2] * 1[BuiltUpKm2], 0[BuiltUpKm2]);
			
			attribute<SuitNeg>    CuttingLine                  (ClaimRegion) := MakeDefined(
																				nth_element_weighted(
																					Rank                                // negative suitability
																					, Delta_Claim                       // delta claim in BuiltUpKm2
																					, Weight                            // per cell value that adds towards the claim in BuiltUpKm2
																					, Region_rel   // relation between grid domain and claim region
																				)
																				, max(Rank, Region_rel) // if no cuttingline is found, the maximum of the negative suitablity is chosen per claim region. In other words, making sure there is a value, albeit the least suitable location.
																			);
			attribute<bool>       WillBeBuiltUp             (CompactedDomain) := Rank < CuttingLine[Region_rel]; //If smaller or equal to, this could result in 'gele vla'. If just smaller than, and the suitability is not expressive enough, this could result in underrealisation.

			attribute<float32>    BuiltUp_Total_Share       (CompactedDomain) := WillBeBuiltUp ? max_elem(LocalMaxima/MaxAllowed_Builtup_Total_Share, CurrState/BuiltUp_Total_Share) : CurrState/BuiltUp_Total_Share; 
			attribute<BuiltUpKm2> BuiltUp_Total_Area        (CompactedDomain) := BuiltUp_Total_Share * CompactedDomain/area / 1[km2] * 1[BuiltUpKm2];
			attribute<BuiltUpKm2> BuiltUp_Residential_Area  (CompactedDomain) := BuiltUp_Total_Area - InitialState/BuiltUp_NonResidential_Area;
			
			attribute<float32>    Claim_Realisation             (ClaimRegion) := sum(BuiltUp_Total_Area, Region_rel) / Claims/BuiltUp; //Check if around 1.0
		}
	}
	
	unit<uint32> domain_x_pot := combine(domain, Distmatrices/pot1km/Buffer_NonNull_Cells) //pot1km == 3x3 cellen, pot2km == 5x5 cellen
	{	
		attribute<ipoint> third_rel_i  := ipoint(first_rel) + ipoint(second_rel -> org_rel);
		attribute<domain> third_rel    := PointRow(third_rel_i) >= 0i && PointCol(third_rel_i) >= 0i ? wpoint(third_rel_i) : null_wp;
	}
}
