container Validation : using = "units;geography;sourcedata/regionalunits;classifications"
{
	parameter<string> StartYear := 'Y2000';
	parameter<string> ModelYear := 'Y2020';
	
	container InitialState
	{
		attribute<BuiltUpKm2>        BuiltUp_Total_Area_domain               (domain) := ='SourceData/BuiltUp/Total/'+StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
		attribute<BuiltUpKm2>        BuiltUp_Residential_Area_domain         (domain) := ='SourceData/BuiltUp/Residential/'+StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
		attribute<BuiltUpKm2>        BuiltUp_NonResidential_Area_domain      (domain) := ='SourceData/BuiltUp/NonResidential/'+StartYear+'[km2] / 1[km2] * 1[BuiltUpKm2]';
		attribute<float32>           BuiltUp_Total_Share_domain              (domain) := BuiltUp_Total_Area_domain / domain/area * 1[km2] / 1[BuiltUpKm2];
		attribute<Person>            Population_domain                       (domain) := ='SourceData/Population/PerYear/'+StartYear+'[Person]';
		attribute<Person_BuiltUpKm2> Population_inRes_Density_domain         (domain) := Population_domain / BuiltUp_Residential_Area_domain; // DO NOT USE!
		attribute<Person_BuiltUpKm2> Population_inRes_Density_Trunc_domain   (domain) := min_elem(Population_inRes_Density_domain, maxmax_saturation);
		attribute<BuiltUpKm2>        BuiltUp_Total_Area             (CompactedDomain) := BuiltUp_Total_Area_domain[CompactedDomain/org_rel]; 
		attribute<BuiltUpKm2>        BuiltUp_Residential_Area       (CompactedDomain) := BuiltUp_Residential_Area_domain[CompactedDomain/org_rel]; 
		attribute<BuiltUpKm2>        BuiltUp_NonResidential_Area    (CompactedDomain) := BuiltUp_NonResidential_Area_domain[CompactedDomain/org_rel]; 
		attribute<float32>           Builtup_Total_Share            (CompactedDomain) := BuiltUp_Total_Share_domain[CompactedDomain/org_rel];
		attribute<Person>            Population                     (CompactedDomain) := Population_domain[CompactedDomain/org_rel]; 
		attribute<Person_BuiltUpKm2> Population_inRes_Density       (CompactedDomain) := Population / BuiltUp_Residential_Area; // DO NOT USE!
		attribute<Person_BuiltUpKm2> Population_inRes_Density_Trunc (CompactedDomain) := min_elem(Population_inRes_Density, maxmax_saturation);
		attribute<Person>            Population_Trunc               (CompactedDomain) := Population_inRes_Density_Trunc * BuiltUp_Residential_Area; //truncate for unrealistic densities (e.g. very much population in hardly any builtup area).
		
		parameter<Person_BuiltUpKm2> maxmax_saturation                                := 1000000[Person_BuiltUpKm2];
	}
	
	container Suitabilities : KeepData = "true"
	{
		unit<wpoint> AutoGLM_Coeffs             := Analysis/Calibration/ReadCoffecients/coef2domain/domain;
		
		attribute<Suit> Calc (domain) := (Preprocessing/Population_Neighbourhoods/PopulationDensity_8dir_StartYear/Ln_mean_8dir[float32]                                     * AutoGLM_Coeffs/LnPopulationDensity_2000_8dir) + 
																(Physical/Coast/Location2Coast_km/Coastline[float32]                                                         * AutoGLM_Coeffs/Distance2Coastline) + 
																(Physical/Water/AllWater/Dist_LargeInland_km/GridData[float32]                                               * AutoGLM_Coeffs/Distance2FreshWater) + 
																// (Physical/Water/AllWater/Dist_AllInland_km/GridData[float32]                                                 * AutoGLM_Coeffs/Distance2AnyInlandWater) + 
																// (Physical/Water/AllWater/Dist_LargeInland_km/GridData[float32]                                               * AutoGLM_Coeffs/Distance2LargeInlandWater) + 
																(Socioeconomic/Infrastructure/Road/GRIP4_grid/Road123/Road123[float32]                                       * AutoGLM_Coeffs/Distance2MajorRoads) + 
																(Socioeconomic/Infrastructure/Road/GRIP4_grid/Road45/Road45[float32]                                         * AutoGLM_Coeffs/Distance2SecundaryRoads) + 
																// (Preprocessing/GridDists/AccessGrids_grid/cities/costsgrid_untiled_maximp_latitude_specific[float32]         * AutoGLM_Coeffs/Distance2Cities_GridBased) + 
																(Physical/Elevation/Elevation[float32]                                                                       * AutoGLM_Coeffs/Elevation) + 
																(Physical/Slope_2021/ReadData[float32]                                                                       * AutoGLM_Coeffs/Slope) + 
																(Physical/TerrainRoughnessIndex/mean                                                                         * AutoGLM_Coeffs/TRI_mean) + 
																(Policy/ProtectedAreas/ReadData[float32]                                                                     * AutoGLM_Coeffs/IsProtectedArea) + 
																(Physical/Water/FloodProneArea/RP100/ReadData[float32]                                                       * AutoGLM_Coeffs/IsFloodProneArea_RP100) + 
																(Physical/Natural_Hazards/Earthquake/Earthquakes_Modified_Mercalli_Intensity/ReadData[float32]               * AutoGLM_Coeffs/Earthquakes_MMI_Index) + 
																(Physical/Natural_Hazards/Landslide/Frequency_of_landslides_triggered_by_precipitations/LS_pr_uint8[float32] * AutoGLM_Coeffs/NrOfLandslides_Precipitation) + 
																(Physical/Natural_Hazards/Landslide/Frequency_of_landslides_triggered_by_earthquakes/LS_EQ_uint8[float32]    * AutoGLM_Coeffs/NrOfLandslides_Earthquakes) + 
																AutoGLM_Coeffs/Constant;
		attribute<Suit> Write (domain) := Calc, StorageName = "='%LocalDataProjDir%/Temp/'+ModelParameters/StudyArea+'/Validation_Suitability.tif'";
		attribute<Suit> Read  (domain) : StorageName = "=PropValue(Write, 'StorageName')", StorageReadOnly = "true", LazyCalculated = "true";
	}
	
	unit<uint32> ClaimRegion := FunctionalAreas;

	container Claim
	{
		attribute<BuiltUpKm2> Builtup    (ClaimRegion) := ='sum(SourceData/BuiltUp/Total/'+ModelYear+'[km2] / 1[km2] * 1[BuiltUpKm2], ClaimRegion/per_Domain)';
		attribute<Person>     Population (ClaimRegion) := ='sum(SourceData/Population/PerYear/'+ModelYear+'[Person], ClaimRegion/per_Domain)';
	}

	container Allocate_Builtup    := Future/Allocate_Builtup_T(   ModelYear, InitialState, Claim/BuiltUp);
	container Allocate_Population := Future/Allocate_Population_T(ModelYear, InitialState, Allocate_Builtup/NewState, Claim/Population);
}