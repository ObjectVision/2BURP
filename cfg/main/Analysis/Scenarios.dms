container Future : using = "units;geography;sourcedata/regionalunits;classifications"
{
	container Source
	{
		parameter<int32> threshold: = 0[int32];
		container FeasibleSolution;
	}

	container Suitabilities 
	{
		unit<wpoint> AutoGLM_Pop_Coeffs             := Analysis/Calibration/ReadCoffecients/coef2domain/domain;
		
		attribute<float32> Population (domain) := (Preprocessing/Population_Neighbourhoods/PopulationDensity_8dir_StartYear/Ln_mean_8dir[float32]                            * AutoGLM_Pop_Coeffs/TotalPopulationDensity1990_8dir_coef_grid) + 
																(Physical/Coast/Location2Coast_km/Coastline[float32]                                                         * AutoGLM_Pop_Coeffs/DistanceToCoast_coef_grid) + 
																(Physical/Water/Sweet_Water/Sweet_Water_Distance[float32]                                                    * AutoGLM_Pop_Coeffs/SweetWater_coef_grid) + 
																(Physical/Elevation/Elevation[float32]                                                                       * AutoGLM_Pop_Coeffs/Elevation_coef_grid) + 
																(Physical/Slope_2021/ReadData[float32]                                                                       * AutoGLM_Pop_Coeffs/Slope_coef_grid) + 
																(Physical/TerrainRoughnessIndex/mean                                                                         * AutoGLM_Pop_Coeffs/TRI_coef_grid) + 
																(Socioeconomic/TravelTime/TravelTime[float32]                                                                * AutoGLM_Pop_Coeffs/TravelTime_coef_grid) + 
																(Policy/ProtectedAreas/ReadData[float32]                                                                     * AutoGLM_Pop_Coeffs/ProtectedArea_coef_grid) + 
																(Physical/Water/FloodProneArea/RP100/RP100_bool[float32]                                                     * AutoGLM_Pop_Coeffs/FloodProneArea_coef_grid) + 
																(Physical/Natural_Hazards/Earthquake/Earthquakes_Modified_Mercalli_Intensity/ReadData[float32]               * AutoGLM_Pop_Coeffs/Earthquake_coef_grid) + 
																(Physical/Natural_Hazards/Landslide/Frequency_of_landslides_triggered_by_precipitations/LS_pr_uint8[float32] * AutoGLM_Pop_Coeffs/Landslide_PR_coef_grid) + 
																(Physical/Natural_Hazards/Landslide/Frequency_of_landslides_triggered_by_precipitations/LS_pr_uint8[float32] * AutoGLM_Pop_Coeffs/Landslide_EQ_coef_grid) + 
																(Socioeconomic/Infrastructure/Road/GRIP4_grid/Road123/Road123[float32]                                       * AutoGLM_Pop_Coeffs/DistanceMainRoads_coef_grid) + 
																(Socioeconomic/Infrastructure/Road/GRIP4_grid/Road45/Road45[float32]                                         * AutoGLM_Pop_Coeffs/DistanceSecondaryRoads_coef_grid) + 
																AutoGLM_Pop_Coeffs/Constant_coef_grid;
		attribute<float32> BuiltUp (domain) := (Preprocessing/Population_Neighbourhoods/PopulationDensity_8dir_StartYear/Ln_mean_8dir[float32]                               * AutoGLM_Pop_Coeffs/TotalPopulationDensity1990_8dir_coef_grid) + 
																(Physical/Coast/Location2Coast_km/Coastline[float32]                                                         * AutoGLM_Pop_Coeffs/DistanceToCoast_coef_grid) + 
																(Physical/Water/Sweet_Water/Sweet_Water_Distance[float32]                                                    * AutoGLM_Pop_Coeffs/SweetWater_coef_grid) + 
																(Physical/Elevation/Elevation[float32]                                                                       * AutoGLM_Pop_Coeffs/Elevation_coef_grid) + 
																(Physical/Slope_2021/ReadData[float32]                                                                       * AutoGLM_Pop_Coeffs/Slope_coef_grid) + 
																(Physical/TerrainRoughnessIndex/mean                                                                         * AutoGLM_Pop_Coeffs/TRI_coef_grid) + 
																(Socioeconomic/TravelTime/TravelTime[float32]                                                                * AutoGLM_Pop_Coeffs/TravelTime_coef_grid) + 
																(Policy/ProtectedAreas/ReadData[float32]                                                                     * AutoGLM_Pop_Coeffs/ProtectedArea_coef_grid) + 
																(Physical/Water/FloodProneArea/RP100/RP100_bool[float32]                                                     * AutoGLM_Pop_Coeffs/FloodProneArea_coef_grid) + 
																(Physical/Natural_Hazards/Earthquake/Earthquakes_Modified_Mercalli_Intensity/ReadData[float32]               * AutoGLM_Pop_Coeffs/Earthquake_coef_grid) + 
																(Physical/Natural_Hazards/Landslide/Frequency_of_landslides_triggered_by_precipitations/LS_pr_uint8[float32] * AutoGLM_Pop_Coeffs/Landslide_PR_coef_grid) + 
																(Physical/Natural_Hazards/Landslide/Frequency_of_landslides_triggered_by_precipitations/LS_pr_uint8[float32] * AutoGLM_Pop_Coeffs/Landslide_EQ_coef_grid) + 
																(Socioeconomic/Infrastructure/Road/GRIP4_grid/Road123/Road123[float32]                                       * AutoGLM_Pop_Coeffs/DistanceMainRoads_coef_grid) + 
																(Socioeconomic/Infrastructure/Road/GRIP4_grid/Road45/Road45[float32]                                         * AutoGLM_Pop_Coeffs/DistanceSecondaryRoads_coef_grid) + 
																AutoGLM_Pop_Coeffs/Constant_coef_grid;
	}

	unit<uint32> ClaimRegion := FunctionalAreas 
	{
	}

	container Claims
	{
		container Builtup    := Preprocessing/Claims_BuiltUp;
		container Population := Preprocessing/Claims_Population;
	}
	container InitialState 
	{
		attribute<m2>      BuiltUp_orgdom            (domain) := ='SourceData/Builtup/Total/'+ModelParameters/StartYear;
		attribute<float32> BuiltUpShare_orgdom       (domain) := BuiltUp_orgdom / convert(domain/area, m2);
		// attribute<float32> BuiltUpShare_orgdom       (domain) := BuiltUp_orgdom / domain/area;
		attribute<Bool>    HasBuiltup_orgdom         (domain) := BuiltUp_orgdom > 0[m2];
		attribute<Person>  Population_orgdom         (domain) := ='SourceData/Population/PerYear/'+ModelParameters/StartYear+'[Person]';
		
		attribute<bool>    IsBuiltup        (CompactedDomain) := HasBuiltup_orgdom[CompactedDomain/org_rel];
		attribute<Person>  Population       (CompactedDomain) := Population_orgdom[CompactedDomain/org_rel]; 
		attribute<m2>      Builtup          (CompactedDomain) := BuiltUp_orgdom[CompactedDomain/org_rel]; 
		attribute<float32> BuiltupShare     (CompactedDomain) := BuiltUpShare_orgdom[CompactedDomain/org_rel];
		attribute<bool>    IsNewlyBuilt     (CompactedDomain) := const(FALSE,CompactedDomain);
		
	}

	container Allocate_Builtup := 
		for_each_ne(
			ProjectionYears/name 
			,	'Allocate_Builtup_T('
					+ProjectionYears/prevStateName+                                         // (0) State of previous period
					', Claims/Builtup/'+ProjectionYears/name+                               // (1) Expected amount of builtup per region in km2
				')'
		);
		
	container Allocate_Population := 
		for_each_ne(
			ProjectionYears/name 
			,	'Allocate_Population_T('
					+ProjectionYears/prevStateName+                                         // (0) State of previous period
					', Claims/Population/'+ProjectionYears/name+                               // (1) Expected amount of population per region in persons
				')'
		);

	Template Allocate_Builtup_T
	{
		container          CurrState;
		attribute<km2>     ExpectedBuiltUpArea       (ClaimRegion); 
		///
		parameter<float32> r_if_LocalMax    := 0.11f;
		parameter<float32> r_if_notLocalMax := 0.06f;
		parameter<float32> r_if_notBU       := 0.02f;
		parameter<float32> max_saturation   := 0.50f;
		
		unit<uint32> domain_x_pot := combine(domain, Distmatrices/pot1km) //pot1km == 3x3 cellen, pot2km == 5x5 cellen
		{	
			attribute<domain> third_rel := wpoint(spoint(first_rel) + second_rel);
		}
		
		container LocalMaxima
		{
			attribute<float32> Current_LocalMaximum             (domain) := max(CurrState/BuiltUpShare_orgdom[domain_x_pot/third_rel] * domain_x_pot/second_rel -> buffer[float32], domain_x_pot/first_rel); 
			attribute<bool>    IsLocalMaximum          (CompactedDomain) := (Current_LocalMaximum == CurrState/BuiltUpShare_orgdom)[CompactedDomain/org_rel];
			attribute<bool>    HasBuiltUpNeighbours    (CompactedDomain) := ((sum(CurrState/BuiltUpShare_orgdom[domain_x_pot/third_rel] * domain_x_pot/second_rel -> buffer[float32], domain_x_pot/first_rel) - CurrState/BuiltUpShare_orgdom) > 0f)[CompactedDomain/org_rel];
			attribute<float32> MaxAllowed_BuiltupShare (CompactedDomain) := switch(
																					// If a cell has the highest local share of built-up area in T1, it can only increase by 11 pp in T2 (or by 50% - local share if this is smaller than 11 pp)
																					 case(LocalMaxima/IsLocalMaximum && CurrState/BuiltupShare <  max_saturation, min_elem(CurrState/BuiltupShare + r_if_LocalMax, max_saturation))
																					,case(LocalMaxima/IsLocalMaximum && CurrState/BuiltupShare >= max_saturation, CurrState/BuiltupShare)
																					// If a cell is built-up but it doesnâ€™t have the highest local share of built-up area in T1, it can only increase in T2 to the local maximum in T1 + 6 pp (or by 50% - local share, if this is smaller than local maximum in T1 + 6 pp)
																					,case(not(LocalMaxima/IsLocalMaximum) && CurrState/BuiltupShare > 0f,  min_elem(Current_LocalMaximum[CompactedDomain/org_rel] + r_if_notLocalMax, max_saturation))
																					// If a cell is not built-up in T1, it can only increase by 2 pp in T2
																					,case(CurrState/BuiltupShare == 0f,  CurrState/BuiltupShare + r_if_notBU)
																					,CurrState/BuiltupShare
																			);
		}
		
		container Suitability
		{
		
		}
		
		container NewState
		{
		}
	}
	
	
	Template Allocate_Population_T
	{
		container          CurrState;
		attribute<Person>  ExpectedPopulation (ClaimRegion); 
		///
		parameter<Person>      r_if_LocalMax     := 3500[Person];
		parameter<Person>      r_if_notLocalMax  := 2500[Person];
		parameter<Person>      r_if_notPopulated := 350[Person];
		parameter<Person_km2>  max_saturation    := 100000[person_km2];
		
		unit<uint32> domain_x_pot := combine(domain, Distmatrices/pot1km) //pot1km == 3x3 cellen, pot2km == 5x5 cellen
		{	
			attribute<domain> third_rel := wpoint(spoint(first_rel) + second_rel);
		}
		
		container LocalMaxima
		{
			attribute<float32> Current_LocalMaximum               (domain) := max(CurrState/Population_orgdom[domain_x_pot/third_rel] * domain_x_pot/second_rel -> buffer[float32], domain_x_pot/first_rel); 
			attribute<bool>    IsLocalMaximum            (CompactedDomain) := (Current_LocalMaximum == CurrState/Population_orgdom)[CompactedDomain/org_rel];
			attribute<bool>    HasPopulatedNeighbours    (CompactedDomain) := ((sum(CurrState/Population_orgdom[domain_x_pot/third_rel] * domain_x_pot/second_rel -> buffer[float32], domain_x_pot/first_rel) - CurrState/Population_orgdom) > 0f)[CompactedDomain/org_rel];
			attribute<float32> MaxAllowed_Population     (CompactedDomain) := switch(
																					// If a cell has the highest local population in T1, it can only increase by 3.5K people in T2 (or by [100K - local pop] if this is smaller than 3.5K people)
																					 case(LocalMaxima/IsLocalMaximum && (CurrState/Population / CompactedDomain/area) <  max_saturation, min_elem((CurrState/Population + r_if_LocalMax) / CompactedDomain/area, max_saturation) * CompactedDomain/area)
																					,case(LocalMaxima/IsLocalMaximum && (CurrState/Population / CompactedDomain/area) >= max_saturation, CurrState/Population)
																					// If a cell is populated but it doesnâ€™t have the highest local population in T1, it can only increase in T2 to the local maximum in T1 + 2.5K people (or by [100K - local pop] if this is smaller than the local maximum in T1 + 2.5K people) 
																					,case(not(LocalMaxima/IsLocalMaximum) && CurrState/Population > 0f,  min_elem((Current_LocalMaximum[CompactedDomain/org_rel] + r_if_notLocalMax) / CompactedDomain/area, max_saturation) * CompactedDomain/area)
																					// If a cell is not populated in T1, it can only increase by 350 people in T2
																					,case(CurrState/Population == 0f,  CurrState/Population + r_if_notPopulated)
																					,CurrState/Population
																				);
		}
					
		container Suitability
		{
		
		}
		
		container NewState
		{
		}
	}


	//Calculation template that is used as loop for every projection date
	template DynaPop_T
	{
		//The input data for the for_each loop function
		container CurrState;
		attribute<Person>      ExpPop       (Claimregion); // urban population claim
		// attribute<Person>      ExpRuralPop       (Claimregion); // rural population claim
		attribute<float32>     HydeIndex         (Claimregion);
		attribute<km2>         Urban_landuse     (ClaimRegion); // urban land use claim)
		attribute<ClaimRegion> Region_rel    (CompactedDomain) := CompactedDomain/Country_rel;
		
		container landuse_allocation 
		{
			attribute<km2> Urban_claim (Claimregion) := min_elem(MakeDefined(Urban_landuse, 0[km2]), sum(CompactedDomain/Area, region_rel));

			container CompactedSuitabilities
			{
				// -------------------- Components that are available in total suitability ------------------------ //
				//begin unCalibrated code (statistical Frank van Rijn / Jolien van Huystee)
				attribute<float32> BuiltupPot        (CompactedDomain) := potential((CompactedDomain/Area * float32(CurrState/IsBuiltup))[CompactedDomain/BaseGrid], Geography/Distmatrices/Impl/pot10km/potrange/RelWeightCorr)[CompactedDomain/org_rel];

				// Extra weight to high population density places: OFF because already in NeighbourhoodEnrichtment/Or represented by current urban land
				attribute<float32> UrbanPopPot       (CompactedDomain) := potential((CurrState/Pop*Float32(CurrState/IsUrban))[CompactedDomain/BaseGrid], Geography/Distmatrices/Impl/pot10km/potrange/RelWeightSqrt)[CompactedDomain/org_rel];
				attribute<float32> pot_UrbanArea_5km (CompactedDomain) := potential(float32(CurrState/IsUrban[CompactedDomain/BaseGrid]), Geography/Distmatrices/Impl/pot5km/potrange/RelWeightSqrt)[CompactedDomain/org_rel];
				attribute<float32> Coast_potential   (CompactedDomain) := (Suitabilities/Coast * pot_UrbanArea_5km) * 100f;
				// ----------------------------------------------------------------------------------------------- //
				attribute<float32> pot_Combined      (CompactedDomain) := Suitabilities/Urban                                                // Includes Traveltime and TRI as suitability factors
																			+	UrbanPot * 200.0f * (1f - exp(-max_elem(UrbanPopPot, 0f)))   // Based on distance to dence built up analysis and weights (Frank van Rijn)
																			+	MakeDefined(Coast_potential, 0.0f) * 2.0f;
				//end unCalibrated code

				attribute<float32> pot_Combined_Calibrated (CompactedDomain) := Suitabilities/Urban;

				// ----------------------- SSP specific restrictions ---------------------------------------------- //
				attribute<float32> pot_factor (CompactedDomain) :=
					switch(
							case(Suitabilities/ProtectedLand, Source/SuitabilityMaps/ProtectionFactor)  // SSP specific repulsion of protected land areas (0 = zero suitability; 1 = suitable for built up)
						,	case(Suitabilities/Floodarea,     Source/SuitabilityMaps/FloodFactor)   	// SSP specific repulsion of flood prone areas (0 = zero suitabiliuty; 1 = suitable for built-up)
						,	1.0f
					);
				// ----------------------------------------------------------------------------------------------- //	
				attribute<float32> pot_Total (CompactedDomain) := =(Calibration_On == 'yes') ? 'pot_Combined_Calibrated * pot_factor' : 'pot_Combined * pot_factor';
				// -------------------- Dynamic suitability ------------------------------------------------------ //
				attribute<float32> Urban_float32 (CompactedDomain) := =Calibration_On == 'yes' 
																			? '(Preprocessing/UrbanArea/UrbanArea_StartYear/ReadData[CompactedDomain/domain_rel][float32] + pot_Total + CurrState/NewlyBuilt)'
																			: '(CurrState/IsUrban ? 600000f : 0f) + (pot_Total* 1000f)[float32]';
				attribute<Suitability> Urban (CompactedDomain) := Urban_float32[Suitability];
				// ----------------------------------------------------------------------------------------------- //
			}

			attribute<SuitabilityNeg> rank        (CompactedDomain) := -CompactedSuitabilities/Urban[SuitabilityNeg];
			attribute<SuitabilityNeg> cuttingline (ClaimRegion)     := MakeDefined(nth_element_weighted(rank, urban_claim, CompactedDomain/area, region_rel), max(rank, region_rel));
			attribute<bool>           IsUrban     (CompactedDomain) := rank < cuttingline[region_rel];
			attribute<float32> IsUrbanF32(CompactedDomain) := Float32(IsUrban);
		}

		attribute<Float32> GrowPot  (CompactedDomain) := max_elem(Float32(landuse_allocation/CompactedSuitabilities/Urban), 0f), FreeData = "False";
		attribute<Float32> ShrinkPot(CompactedDomain) := max_elem(max(GrowPot, Region_rel)[Region_rel] - GrowPot, 0f);
		attribute<float32> MaxSqr(CompactedDomain):= potential(Sqr(CurrState/Pop / CompactedDomain/Area)[CompactedDomain/BaseGrid] * landuse_allocation/IsUrbanF32[CompactedDomain/BaseGrid], /Geography/Distmatrices/Impl/pot10km/potrange/Conal)[CompactedDomain/org_rel]
														/	potential(landuse_allocation/IsUrbanF32[CompactedDomain/BaseGrid], /Geography/Distmatrices/Impl/pot10km/potrange/Conal)[CompactedDomain/org_rel];
		attribute<Person_km2> maximum_population_density_org(CompactedDomain) := max_elem(Sqrt(MaxSqr), ClaimRegion/mean_population_density[Region_rel]) * HydeIndex[Region_rel];
		attribute<Person_km2> maximum_population_density(CompactedDomain)     := ModelParameters/InPresentUrban='InPresentUrban' ? maximum_population_density_org * InPresentUrban_maximum_population_density_factor : maximum_population_density_org, FreeData = "False";
		attribute<Person>     maximum_population        (CompactedDomain) := CompactedDomain/Area * maximum_population_density, FreeData = "False";

		template IterTempl
		{
			attribute<Person> CurrPop(CompactedDomain);
			attribute<Person> ExtraPop   (ClaimRegion)     := ExpUrbanPop - sum(CurrPop * landuse_allocation/IsUrbanF32, Region_rel), FreeData = "False";
			attribute<bool>   Abandonment(CompactedDomain) :=  (ExtraPop<0f)[Region_rel];
			attribute<Person> DeltaUp  (CompactedDomain) := scalesum(GrowPot   * CompactedDomain/Area * landuse_allocation/IsUrbanF32 * Float32(maximum_population > CurrPop ), Region_rel, ExtraPop);
			attribute<Person> DeltaDn  (CompactedDomain) := scalesum(ShrinkPot * CompactedDomain/Area * landuse_allocation/IsUrbanF32 * Float32(CurrPop > 0f  ), Region_rel, ExtraPop);
			attribute<Person> Delta    (CompactedDomain) := Abandonment ? DeltaDn : DeltaUp;
			attribute<Person> NextPop  (CompactedDomain) := CurrPop + makedefined(median(0f, Delta, float32(!Abandonment) * maximum_population - CurrPop),0f), FreeData = "False";
		}

		container Iters := for_each_ne(Iter/name, 'IterTempl('+Iter/PrevPopName+')');
		container Last := =Last('Iters/'+Iter/name); 

		//-----------------------------------Rural population distribution---------------------------------------------//
		attribute<Person> Initial_Rural_residence (CompactedDomain) := ='landuse_allocation/IsUrban ? 0[Person] : SourceData/Population/Past/PerYear/'+ModelParameters/StartYear+'/Population_LL[Person][CompactedDomain/org_rel]';//same for M1 and M3!
		attribute<Person> RuralPop_corr               (ClaimRegion) := ExpRuralPop < 0f ? 0f : ExpRuralPop;
		attribute<Person> RuralPop                (CompactedDomain) := MakeDefined(scalesum(Initial_Rural_residence, Region_rel, RuralPop_corr), 0f);
		//-------------------------------------------------------------------------------------------------------------//

		container NewState
		{
			attribute<Person>   Pop                (CompactedDomain) := Last/NextPop * landuse_allocation/IsUrbanF32 + RuralPop;
			attribute<bool>     Builtup            (CompactedDomain) := landuse_allocation/IsUrban;
			attribute<float32>  NewlyBuilt (CompactedDomain) := Float32(IsUrban && !HasHad2UrbanPeriods); //extra prob for first urbanisation within 20, to keep/old first urb.
		}

		attribute<Person>     UrbanPop    (CompactedDomain)           := NewState/Pop * landuse_allocation/IsUrbanF32;
	}
}
