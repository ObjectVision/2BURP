container Indicators : using = "units;geography;sourcedata/regionalunits;classifications;modelparameters", 
	descr = "Collection of ad-hoc measures that have not yet found a place in the more formal postprocessing module. Some to remain here for ad-hoc checks within study area context,
	others to be moved later."
{
	
	//ad hoc
	// container Checks : StorageName = "= '%LocalDataProjDir%/Temp/CD_Info_'+ModelParameters/StudyArea+'.csv'", StorageType = "gdalwrite.vect"
	// {
		// attribute<uint32>     FA_nr              (ClaimRegion) := ClaimRegion/org_rel;
		// attribute<string>     FA_name            (ClaimRegion) := ClaimRegion/name;
		// attribute<km2>        Total_area_in_CD   (ClaimRegion) := sum(CompactedDomain/area, ClaimRegion/per_CompactedDomain);
		// attribute<uint32>     Total_cells_in_CD  (ClaimRegion) := pcount(ClaimRegion/per_CompactedDomain);
		// attribute<builtupKm2> BU_area_2020_CD    (ClaimRegion) := sum(/Analysis/Future/InitialState/BuiltUp_Total_Area, ClaimRegion/per_CompactedDomain);
		// attribute<builtupKm2> BU_area_Claim_2100 (ClaimRegion) := Claim/Builtup/Y2100;
	// }
	
	//parameter<string> Export_CSVs := 'Ready', 
	//	ExplicitSuppliers = "Population_perDoU_AllYears;Population_OnLand_Density_perDoU_AllYears;Area_perDoU_AllYears;Population_Abandonment_perDoU_AllYears;Population_Emergence_perDoU_AllYears;results_per_country/store_button;long_time_window_analyses/cell_counts;long_time_window_analyses/Assess_Clusters/year_results;"; //BuiltUp_Percentages_Histogram;Population_OnLand_Density_Histogram;";
	container BuiltUp_Total_Area := 
		for_each_nedv(
			ProjectionYears/name
			, Use_TempTifFiles ? 'Store_Results/Read_BuiltUp_Total_Share/'+ProjectionYears/name+' * domain/area[float32]' : 'Store_Results/BuiltUp_Total_Share/'+ProjectionYears/name+' * domain/area[float32]'
			, domain
			, float32
		)
	{
		attribute<float32> Initial               (domain) := =Use_TempTifFiles ? 'Store_Results/Read_BuiltUp_Total_Share/Initial * domain/area[float32]' : 'Store_Results/BuiltUp_Total_Share/Initial * domain/area[float32]';
		
	}
		
	container BuiltUp_Residential_Area := 
		for_each_nedv(
			ProjectionYears/name
			, 'BuiltUp_Total_Area/'+ProjectionYears/name+' - recollect_by_cond(domain/IsCompactedDomain, Analysis/Future/InitialState/BuiltUp_NonResidential_Area)'
			, domain
			, BuiltUpKm2
		)
	{
		attribute<BuiltUpKm2> Initial      (domain) := recollect_by_cond(domain/IsCompactedDomain, Analysis/Future/InitialState/BuiltUp_Residential_Area);
		attribute<BuiltUpKm2> Y1975        (domain) := /SourceData/Builtup/Residential/Y1975[km2] / 1[km2] * 1[BuiltUpKm2];
		attribute<BuiltUpKm2> Y1980        (domain) := /SourceData/Builtup/Residential/Y1980[km2] / 1[km2] * 1[BuiltUpKm2];
		attribute<BuiltUpKm2> Y1985        (domain) := /SourceData/Builtup/Residential/Y1985[km2] / 1[km2] * 1[BuiltUpKm2];
		attribute<BuiltUpKm2> Y1990        (domain) := /SourceData/Builtup/Residential/Y1990[km2] / 1[km2] * 1[BuiltUpKm2];
		attribute<BuiltUpKm2> Y1995        (domain) := /SourceData/Builtup/Residential/Y1995[km2] / 1[km2] * 1[BuiltUpKm2];
		attribute<BuiltUpKm2> Y2000        (domain) := /SourceData/Builtup/Residential/Y2000[km2] / 1[km2] * 1[BuiltUpKm2];
		attribute<BuiltUpKm2> Y2005        (domain) := /SourceData/Builtup/Residential/Y2005[km2] / 1[km2] * 1[BuiltUpKm2];
		attribute<BuiltUpKm2> Y2010        (domain) := /SourceData/Builtup/Residential/Y2010[km2] / 1[km2] * 1[BuiltUpKm2];
		attribute<BuiltUpKm2> Y2015        (domain) := /SourceData/Builtup/Residential/Y2015[km2] / 1[km2] * 1[BuiltUpKm2];
		attribute<BuiltUpKm2> Y2020        (domain) := /SourceData/Builtup/Residential/Y2020[km2] / 1[km2] * 1[BuiltUpKm2];
		
	}

	
	container Population_perDoU := 
		for_each_nedv(
			ProjectionYears/name
			, Use_TempTifFiles ? 'sum(Store_Results/Read_Population/'+ProjectionYears/name+'[uint64], Store_Results/DegreesOfUrbanisation/'+ProjectionYears/name+'/ReadTypologyK)' : 'sum(Store_Results/Population/'+ProjectionYears/name+'[uint64], Store_Results/DegreesOfUrbanisation/'+ProjectionYears/name+'/Typology_Domain)'
			, TypologyK
			, uint64
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>  Label     (TypologyK) := TypologyK/label;
		attribute<uint64>  Initial   (TypologyK) := =Use_TempTifFiles ? 'sum(Store_Results/Read_Population/Initial[uint64], Store_Results/DegreesOfUrbanisation/Initial/ReadTypologyK)' : 'sum(Store_Results/Population/Initial[uint64], Store_Results/DegreesOfUrbanisation/Initial/Typology_Domain)' ;
	}

	container Population_OnLand_Density_perDoU := 
		for_each_nedv(
			ProjectionYears/name
			, 'Population_perDoU/'+ProjectionYears/name+'[float32] / Area_perDoU/'+ProjectionYears/name+'[float32]'
			, TypologyK
			, float32
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_OnLand_Density_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>      Label     (TypologyK) := TypologyK/label, StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_OnLand_Density_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect";
		// attribute<float32>  Initial   (TypologyK) := Population_perDoU/Initial[float32]  / Area_perDoU/Initial[float32] ;
	}
	
	container Population_OnLand_Density_perDoU2020 := 
		for_each_nedv(
			ProjectionYears/name
			, 'Population_perDoU2020/'+ProjectionYears/name+'[float32] / Area_perDoU2020/Initial[float32]'
			, TypologyK
			, float32
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_OnLand_Density_perDoU2020_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>      Label     (TypologyK) := TypologyK/label;
		attribute<float32>  Initial   (TypologyK) := Population_perDoU/Initial[float32]  / Area_perDoU/Initial[float32] ;
	}
	// ad hoc cjc 29/8/24, does not adhere to use_tempfiles approach yet.
	unit<uint32> DoU_Flow_Matrix := combine(TypologyK, TypologyK) {
		attribute<string> Label:= TypologyK/name[first_rel]+'_to_'+TypologyK/name[second_rel];
		attribute<upoint> uni:= point(uint32(first_rel), uint32(second_rel), upoint);
		
		container area:= for_each_nedv(Label
			, 'sum(float32(Store_Results/DegreesOfUrbanisation/Initial/ReadTypologyK == '+string(first_rel)+'[uint8] && Store_Results/DegreesOfUrbanisation/Y2100/ReadTypologyK == '+string(second_rel)+'[uint8]))'
			, void
			, float32);
		container popinit:= for_each_nedv(Label
			, 'sum(Store_Results/Read_Population/Initial[float32] * float32(Store_Results/DegreesOfUrbanisation/Initial/ReadTypologyK == '+string(first_rel)+'[uint8] && Store_Results/DegreesOfUrbanisation/Y2100/ReadTypologyK == '+string(second_rel)+'[uint8]))'
			, void
			, float32);
		container pop2100:= for_each_nedv(Label
			, 'sum(Store_Results/Read_Population/Y2100[float32] * float32(Store_Results/DegreesOfUrbanisation/Initial/ReadTypologyK == '+string(first_rel)+'[uint8] && Store_Results/DegreesOfUrbanisation/Y2100/ReadTypologyK == '+string(second_rel)+'[uint8]))'
			, void
			, float32);
		container builtupinit:= for_each_nedv(Label
			, 'sum(Store_Results/BuiltUp_Total_Area/Initial[float32] * float32(Store_Results/DegreesOfUrbanisation/Initial/ReadTypologyK == '+string(first_rel)+'[uint8] && Store_Results/DegreesOfUrbanisation/Y2100/ReadTypologyK == '+string(second_rel)+'[uint8]))'
			, void
			, float32);	
		container builtup2100:= for_each_nedv(Label
			, 'sum(Store_Results/BuiltUp_Total_Area/Y2100[float32] * float32(Store_Results/DegreesOfUrbanisation/Initial/ReadTypologyK == '+string(first_rel)+'[uint8] && Store_Results/DegreesOfUrbanisation/Y2100/ReadTypologyK == '+string(second_rel)+'[uint8]))'
			, void
			, float32);	
	}
	
	container Area_perDoU :=
		for_each_nedv(
			ProjectionYears/name
			, Use_TempTifFiles ? 'sum(Geography/domain/area, Store_Results/DegreesOfUrbanisation/'+ProjectionYears/name+'/ReadTypologyK)' : 'sum(Geography/domain/area, Store_Results/DegreesOfUrbanisation/'+ProjectionYears/name+'/Typology_Domain)'
			, TypologyK
			, km2
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Area_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	 {
		attribute<string>  Label     (TypologyK) := TypologyK/label;
		attribute<km2>     Initial   (TypologyK) := =Use_TempTifFiles ? 'sum(Geography/domain/area, Store_Results/DegreesOfUrbanisation/Initial/ReadTypologyK)' : 'sum(Geography/domain/area, Store_Results/DegreesOfUrbanisation/Initial/Typology_Domain)';
	 }

	container functional_area_differences 
	{
		attribute<string> name 	(RegionalUnits/FunctionalAreas):= RegionalUnits/FunctionalAreas/item_name, StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_outputs.csv'", StorageType = "gdalwrite.vect";
		attribute<uint32> id  	(RegionalUnits/FunctionalAreas):= RegionalUnits/FunctionalAreas/org_rel[uint32], StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_outputs.csv'", StorageType = "gdalwrite.vect";
		
		parameter<bool> store:= True, ExplicitSuppliers = "= 'name;id;pop;bu;degurbas/Initial/store;'+aslist('degurbas/'+ProjectionYears/name+'/store',';')";
		
		container pop := 
			for_each_nedv(
				'p_'+ProjectionYears/name
				, 'sum(float32(Store_Results/Read_Population/'+ProjectionYears/name+'), RegionalUnits/FunctionalAreas/per_domain)'
				, RegionalUnits/FunctionalAreas
				, float32
			), StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_pop_outputs.csv'", StorageType = "gdalwrite.vect"
		{
			attribute<float32> p_Initial (RegionalUnits/FunctionalAreas):= sum(float32(Store_Results/Read_Population/Initial), RegionalUnits/FunctionalAreas/per_domain);
		}
		container bu :=
			for_each_nedv(
				'bu_'+ProjectionYears/name
				, 'sum(Store_Results/Read_BuiltUp_Total_Share/'+ProjectionYears/name+'[float32] * float32(domain/area), RegionalUnits/FunctionalAreas/per_domain)'
				, RegionalUnits/FunctionalAreas
				, float32
			), StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_bu_outputs.csv'", StorageType = "gdalwrite.vect"
		{
			attribute<float32> p_Initial (RegionalUnits/FunctionalAreas):= sum(float32(Store_Results/Read_BuiltUp_Total_Share/Initial) * float32(domain/area), RegionalUnits/FunctionalAreas/per_domain);
		}
		container degurbas := 
			for_each_ne(
				ProjectionYears/name
				, 'T_sum_degurbas('+quote(ProjectionYears/name)+')'
			) 
		{
			container Initial:= T_sum_degurbas('Initial');
		}
		
		Template T_sum_degurbas 
		{
			parameter<string> in_year;
			///
			parameter<bool> store:= True, ExplicitSuppliers = "area_sums; pop_sums;";
			
			container area_sums := 
				for_each_nedv(
					'area_'+TypologyK/name+'_'+in_year
					, 'sum(Store_Results/DegreesOfUrbanisation/'+in_year+'/ReadTypologyK = '+string(id(TypologyK))+'b ? Geography/domain/area : 0[km2], RegionalUnits/FunctionalAreas/per_domain)'
					, RegionalUnits/FunctionalAreas
					, km2
				), StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_degurba_area_outputs_'+in_year+'.csv'", StorageType = "gdalwrite.vect";
			container pop_sums := 
				for_each_nedv(
					'pop_'+TypologyK/name+'_'+in_year
					, 'sum(Store_Results/DegreesOfUrbanisation/'+in_year+'/ReadTypologyK = '+string(id(TypologyK))+'b ? Store_Results/Read_Population/'+in_year+'[uint64] : 0[uint64], RegionalUnits/FunctionalAreas/per_domain)'
					, RegionalUnits/FunctionalAreas
					, uint64
				), StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_degurba_pop_outputs_'+in_year+'.csv'", StorageType = "gdalwrite.vect";
		}
		
	}
	
	container long_time_window_analyses: Descr="Advanced analyses based on longer time series" 
	{
		//parameter<bool> store_histograms:= true, explicitsuppliers="builtup_histogram;population_histogram;";
		
		unit<uint32> years_unit := AllYears;
				
		container builtup:= for_each_nedv(years_unit/name, 
			years_unit/modelled ? '(Store_Results/Read_BuiltUp_Total_Share/'+years_unit/name+' * domain/area[float32])[km2]' : 'sourcedata/Builtup/Total/'+years_unit/name+'[km2]',
			domain, km2);
		container builtup_classified:= for_each_nedv(years_unit/name 
			, '(100f * (builtup/'+years_unit/name+' > 0f ? builtup/'+years_unit/name+' + 0.01f : 0f))[allshares]'
			, domain
			, allshares);
		container new_builtup_sums:= for_each_nedv(id(years_unit) > 0 ? years_unit/name : ''
			,'sum(builtup/'+years_unit/name+' - builtup/'+years_unit/prev_name+', builtup_classified/'+years_unit/prev_name+')'
			,allshares
			,km2) {
			attribute<string> Label (allshares):=allshares/histo_label;
			}
	
		container degurbas:= for_each_nedv(years_unit/name, 
			years_unit/modelled ? 'invert(TypologyK/EK)[Store_Results/Read_DegreesOfUrbanisation/'+years_unit/name+']' : 'Store_Resultsrocessing/DegreesOfUrbanisation/'+years_unit/name+'/ReadTypologyK',
			domain, TypologyK);

		container per_degurba:= for_each_ne(TypologyK/name, 'analyse_degurbas('+string(id(TypologyK))+'[TypologyK])');
		
		unit<uint32> cell_counts:= AllYears, StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Aggregate_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.csv'", StorageType = "gdalwrite.vect" 
		{
			attribute<units/year> Yr:= AllYears/Yr;
			attribute<uint32>	  cells:= const(sum(uint32(domain/IsCompactedDomain)),.);
			attribute<float32>	  pop:= ='union_data(.,'+AsItemList('sum(population/'+name+')')+')';
			attribute<km2>	  	  bu:= ='union_data(.,'+AsItemList('sum(builtup/'+name+')')+')';
			attribute<km2>		  inhabited_bu:= ='union_data(.,'+AsItemList('sum(population/'+name+' = 0f ? 0[km2] : builtup/'+name+')')+')';
			attribute<uint32>	  emptycells:= ='union_data(.,'+AsItemList('sum(uint32(population/'+name+' = 0f))')+')';
			attribute<uint32>	  emptybucells:= ='union_data(.,'+AsItemList('sum(uint32(population/'+name+' = 0f && builtup/'+name+' > 0[km2]))')+')';
		}
		
		Template analyse_degurbas 
		{
			parameter<TypologyK> in_degurba;
			///
			container typologies:= for_each_nedv(years_unit/name, 'degurbas/'+years_unit/name+' = '+string(in_degurba)+'[TypologyK]', domain, bool);
			container moving_set:= for_each_nedv(years_unit/name, 'typologies/'+years_unit/name + (isdefined(years_unit/prev_name) ? ' && !typologies/'+years_unit/prev_name : '') + ' ? '+string(id(years_unit))+'[years_unit] : (0 / 0)[years_unit]', domain, years_unit);
			attribute<years_unit> first_year (domain):= ='min_elem('+asitemlist('moving_set/'+years_unit/name)+')'; 
			attribute<float32>    moving_area (years_unit):= sum(domain/area[float32] * domain/IsCompactedDomain[float32], first_year);
			container moving_built_up:= for_each_nedv(years_unit/name, 'sum((builtup/'+years_unit/name+'[km2])[float32] * domain/IsCompactedDomain[float32], first_year)', years_unit, float32);
			container moving_pop:= for_each_nedv(years_unit/name, 'sum(population/'+years_unit/name+', first_year)', years_unit, float32);
			
		}
		container assess_clusters := 
			for_each_ne(
				years_unit/name
				, 'T_Assess_City_clusters(Store_Results/Read_DegreesOfUrbanisation/'+years_unit/name+', Store_Results/Read_Population/'+years_unit/name+'[float32])'
			) 
		{
			unit<uint32> year_results:= years_unit, StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Clusters_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.csv'", StorageType = "gdalwrite.vect"  
			{
				attribute<units/Year> Yr:= years_unit/Yr;
				attribute<uint32> 	n_cities:= ='union_data(.,'+asitemlist('sum(uint32('+years_unit/name+'/FindContiguousCities/Contains_urban))')+')';
				attribute<uint32> 	n_towns:= ='union_data(.,'+asitemlist('sum(uint32('+years_unit/name+'/FindContiguousTowns/Contains_town))')+')';
				attribute<uint32>	n_villages:= ='union_data(.,'+asitemlist('sum(uint32('+years_unit/name+'/FindContiguousVillages/Contains_village))')+')';
				attribute<float32>  av_city_size:= ='union_data(.,'+asitemlist('sum(float32('+years_unit/name+'/FindContiguousCities/Contains_urban) * float32('+years_unit/name+'/FindContiguousCities/GroupCellSize)) / sum(float32('+years_unit/name+'/FindContiguousCities/Contains_urban))')+')';
				attribute<float32>  av_town_size:= ='union_data(.,'+asitemlist('sum(float32('+years_unit/name+'/FindContiguousTowns/Contains_town) * float32('+years_unit/name+'/FindContiguousTowns/GroupCellSize)) / sum(float32('+years_unit/name+'/FindContiguousTowns/Contains_town))')+')';
				attribute<float32>  av_village_size:= ='union_data(.,'+asitemlist('sum(float32('+years_unit/name+'/FindContiguousVillages/Contains_village) * float32('+years_unit/name+'/FindContiguousVillages/GroupCellSize)) / sum(float32('+years_unit/name+'/FindContiguousVillages/Contains_village))')+')';
			}
			//container city_pop      := for_each_nedv('pop_'+ProjectionYears/name, 'sum(float32('+ProjectionYears/name+'/FindContiguousCells/Contains_urban) * '+ProjectionYears/name+'/FindContiguousCells/Sum_Population_perGroup)', void, float32) {parameter<float32> pop_Y2020:= sum(float32(Y2020/FindContiguousCells/Contains_urban) * Y2020/FindContiguousCells/Sum_Population_perGroup);}
			//container city_cells    := for_each_nedv('cells_'+ProjectionYears/name, 'sum(uint32('+ProjectionYears/name+'/FindContiguousCells/Contains_urban) * '+ProjectionYears/name+'/FindContiguousCells/GroupCellSize)', void, uint32) {parameter<uint32> cells_Y2020:= sum(uint32(Y2020/FindContiguousCells/Contains_urban) * Y2020/FindContiguousCells/GroupCellSize);}
			//container biggest_city  := for_each_nedv('max_'+ProjectionYears/name, 'max(float32('+ProjectionYears/name+'/FindContiguousCells/Contains_urban) * '+ProjectionYears/name+'/FindContiguousCells/Sum_Population_perGroup)', void, float32) {parameter<float32> max_Y2020:= max(float32(Y2020/FindContiguousCells/Contains_urban) * Y2020/FindContiguousCells/Sum_Population_perGroup);}
		}
	}
	
	// container BuiltUp_Residential_Area_Histogram := 
		// for_each_nedv(
			// ProjectionYears/name
			// , 'pcount(Classify(Store_Results/BuiltUp_Residential_Area/'+ProjectionYears/name+', BU_Residential_Area_Bins/ClassBreaks))'
			// , BU_Residential_Area_Bins
			// , uint32
		// )
	// {
		// attribute<string>  Label     (BU_Residential_Area_Bins) := BU_Residential_Area_Bins/label;
		// attribute<uint32>  Initial   (BU_Residential_Area_Bins) := pcount(Classify(Store_Results/BuiltUp_Residential_Area/Initial, BU_Residential_Area_Bins/ClassBreaks));
	// }
	
	// container BuiltUp_Total_Share_Histogram := 
		// for_each_nedv(
			// ProjectionYears/name
			// , 'pcount(Classify(Store_Results/Builtup_Total_Share/'+ProjectionYears/name+', BU_Total_Share_Bins/ClassBreaks))'
			// , BU_Total_Share_Bins
			// , uint32
		// )
	// {
		// attribute<string>  Label     (BU_Total_Share_Bins) := BU_Total_Share_Bins/label;
		// attribute<uint32>  Initial   (BU_Total_Share_Bins) := pcount(Classify(Store_Results/Builtup_Total_Share/Initial, BU_Total_Share_Bins/ClassBreaks));
	// }
	
	container Adhoc
	{	
		container delta_BuiltUp_export:= for_each_nedva(
			id(AllYears) > 0 ? AllYears/name : ''
			, 'Analysis/Future/Indicators/Store_Results/Read_BuiltUp_Total_Share/'+AllYears/name+' - Analysis/Future/Indicators/Store_Results/Read_BuiltUp_Total_Share/'+AllYears/prev_name
			, domain
			, float32
			, '%LocalDataProjDir%/export/'+ModelParameters/StudyArea+'/delta_builtup_'+AllYears/name+'_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.tif'
		);
		container delta_Pop_export:= for_each_nedva(
			id(AllYears) > 0 ? AllYears/name : ''
			, 'Analysis/Future/Indicators/Store_Results/Read_Population/'+AllYears/name+'[float32] - Analysis/Future/Indicators/Store_Results/Read_Population/Y1975[float32]' 
			, domain
			, float32
			, '%LocalDataProjDir%/export/'+ModelParameters/StudyArea+'/delta_population_'+AllYears/name+'_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.tif'
		);
	
		attribute<TypologyK>       DoU_y2020            (domain) := Store_Results/DegreesOfUrbanisation/Initial/Typology_Domain;
		attribute<TypologyK>       DoU_y2030            (domain) := Store_Results/DegreesOfUrbanisation/Y2030/Typology_Domain;
		
		attribute<bool>            IsNewUrbanCentre     (domain) := DoU_y2030 == TypologyK/V/Urban_Centre && DoU_y2020 != TypologyK/V/Urban_Centre;
		
		attribute<float32>         BU_Total_Share_y2020 (domain) := Store_Results/Builtup_Total_Share/Initial;
		attribute<float32>         BU_Total_Share_y2030 (domain) := Store_Results/Builtup_Total_Share/Y2030;
		
		attribute<NrPerson>        Population_y2020     (domain) := Store_Results/Population/Initial;
		attribute<NrPerson>        Population_y2030     (domain) := Store_Results/Population/Y2030;
	}
	
}
