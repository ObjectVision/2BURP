container Indicators : using = "units;geography;sourcedata/regionalunits;classifications;modelparameters"
{
	container Prep
	{
		container BuiltUp_Total_Share := 
			for_each_nedva(
				ProjectionYears/name
				, 'recollect_by_cond(domain/IsCompactedDomain, Allocate_Builtup/'+ProjectionYears/name+'/NewState/BuiltUp_Total_Share)'
				, domain
				, float32
				, '%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/BuiltUp_Total_Share_'+ProjectionYears/name+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.tif'
			)
		{
			attribute<float32> Initial      (domain) := recollect_by_cond(domain/IsCompactedDomain, Analysis/Future/InitialState/BuiltUp_Total_Share), StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/BuiltUp_Total_Share_'+ModelParameters/StartYear+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.tif'";
		}
	
		container Population := 
			for_each_nedva(
				ProjectionYears/name
				, 'recollect_by_cond(domain/IsCompactedDomain, Allocate_Population/'+ProjectionYears/name+'/NewState/Population)'
				, domain
				, NrPerson
				, '%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/Population_'+ProjectionYears/name+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.tif'
			)
		{
			attribute<NrPerson> Initial      (domain) := recollect_by_cond(domain/IsCompactedDomain, Analysis/Future/InitialState/Population)
			, StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/Population_'+ModelParameters/StartYear+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.tif'";
		}
			
		container BuiltUp_Total_Area := 
			for_each_nedv(
				ProjectionYears/name
				, Use_TempTifFiles ? 'Read_BuiltUp_Total_Share/'+ProjectionYears/name+' * domain/area[float32]' : 'BuiltUp_Total_Share/'+ProjectionYears/name+' * domain/area[float32]'
				, domain
				, float32
			)
		{
			attribute<float32> Initial               (domain) := =Use_TempTifFiles ? 'Read_BuiltUp_Total_Share/Initial * domain/area[float32]' : 'BuiltUp_Total_Share/Initial * domain/area[float32]';
			
		}
			
		// container Delta_BuiltUp_Total_Area := 
			// for_each_nedv(
				// ProjectionYears_Delta/name
				// , 'BuiltUp_Total_Area/'+ProjectionYears_Delta/name+' - BuiltUp_Total_Area/'+ProjectionYears_Delta/prev_name
				// , domain
				// , float32
			// )
		// {
			// attribute<float32> Y2030      (domain) := BuiltUp_Total_Area/Y2030 - BuiltUp_Total_Area/Initial;
		// }
		
		// container Delta_Population := 
			// for_each_nedv(
				// ProjectionYears_Delta/name
				// , Use_TempTifFiles ? 'Read_Population/'+ProjectionYears_Delta/name+' - Read_Population/'+ProjectionYears_Delta/prev_name : 'Population/'+ProjectionYears_Delta/name+' - Population/'+ProjectionYears_Delta/prev_name
				// , domain
				// , NrPerson
			// )
		// {
			// attribute<NrPerson> Y2030      (domain) := Use_TempTifFiles ? Read_Population/Y2030 - Read_Population/Initial : Population/Y2030 - Population/Initial ;
			// attribute<NrPerson> Y2020_2100 (domain) := Use_TempTifFiles ? Read_Population/Y2100 - Read_Population/Initial : Population/Y2100 - Population/Initial ;
		// }
			
			
		container BuiltUp_Residential_Area := 
			for_each_nedv(
				ProjectionYears/name
				, 'BuiltUp_Total_Area/'+ProjectionYears/name+' - recollect_by_cond(domain/IsCompactedDomain, Analysis/Future/InitialState/BuiltUp_NonResidential_Area)'
				, domain
				, BuiltUpKm2
			)
		{
			attribute<BuiltUpKm2> Initial      (domain) := recollect_by_cond(domain/IsCompactedDomain, Analysis/Future/InitialState/BuiltUp_Residential_Area);
			attribute<BuiltUpKm2> Y1975        (domain) := /SourceData/Builtup/Residential/Y1975[km2] / 1[km2] * 1[BuiltUpKm2];
			attribute<BuiltUpKm2> Y1980        (domain) := /SourceData/Builtup/Residential/Y1980[km2] / 1[km2] * 1[BuiltUpKm2];
			attribute<BuiltUpKm2> Y1985        (domain) := /SourceData/Builtup/Residential/Y1985[km2] / 1[km2] * 1[BuiltUpKm2];
			attribute<BuiltUpKm2> Y1990        (domain) := /SourceData/Builtup/Residential/Y1990[km2] / 1[km2] * 1[BuiltUpKm2];
			attribute<BuiltUpKm2> Y1995        (domain) := /SourceData/Builtup/Residential/Y1995[km2] / 1[km2] * 1[BuiltUpKm2];
			attribute<BuiltUpKm2> Y2000        (domain) := /SourceData/Builtup/Residential/Y2000[km2] / 1[km2] * 1[BuiltUpKm2];
			attribute<BuiltUpKm2> Y2005        (domain) := /SourceData/Builtup/Residential/Y2005[km2] / 1[km2] * 1[BuiltUpKm2];
			attribute<BuiltUpKm2> Y2010        (domain) := /SourceData/Builtup/Residential/Y2010[km2] / 1[km2] * 1[BuiltUpKm2];
			attribute<BuiltUpKm2> Y2015        (domain) := /SourceData/Builtup/Residential/Y2015[km2] / 1[km2] * 1[BuiltUpKm2];
			attribute<BuiltUpKm2> Y2020        (domain) := /SourceData/Builtup/Residential/Y2020[km2] / 1[km2] * 1[BuiltUpKm2];
			
		}
		
		// #include<Abandonement.dms>
		
		// container Population_InRes_Density := 
			// for_each_nedv(
				// ProjectionYears/name
				// , Use_TempTifFiles ? 'Read_Population/'+ProjectionYears/name+' / BuiltUp_Residential_Area/'+ProjectionYears/name : 'Population/'+ProjectionYears/name+'[Person] / BuiltUp_Residential_Area/'+ProjectionYears/name
				// , domain
				// , Person_BuiltUpKm2
			// )
		// {
			// attribute<float32> Initial (domain):= Population/Initial[Person] / BuiltUp_Residential_Area/Initial;
		// }

		// container Population_Onland_Density := 
			// for_each_nedv(
				// ProjectionYears/name
				// , Use_TempTifFiles ? 'Read_Population/'+ProjectionYears/name+'[Person] / domain/area' : 'Population/'+ProjectionYears/name+'[Person] / domain/area'
				// , domain
				// , Person_Km2
			// ) 
		// {
			// attribute<float32> Initial (domain):= Population/Initial[Person] / domain/area;
		// }
		
		
		container DegreesOfUrbanisation :=
			for_each_ne(
				ProjectionYears/name
				 , 'Preprocessing/Calculate_DegreeOfUrbanisation/Gen_T(
						'+quote(ProjectionYears/name)+'
						 , recollect_by_cond(domain/IsCompactedDomain, convert(Allocate_Builtup/'+ProjectionYears/name+'/NewState/BuiltUp_Total_Area, float32)[km2])
						 , recollect_by_cond(domain/IsCompactedDomain, Allocate_Builtup/'+ProjectionYears/name+'/NewState/BuiltUp_Residential_Area[km2])
						 , recollect_by_cond(domain/IsCompactedDomain, Allocate_Population/'+ProjectionYears/name+'/NewState/Population[Person]))'
			)
		{
			container Y2020:= Initial;
			container Initial
			{
				attribute<TypologyK>       Typology_Domain                                   (domain) := ='Preprocessing/DegreesOfUrbanisation/'+/ModelParameters/StartYear+'/Typology_Domain';
				attribute<TypologyK>       ReadTypologyK                                     (domain) := ='Preprocessing/DegreesOfUrbanisation/'+/ModelParameters/StartYear+'/ReadTypologyK';
			}
		}
		
		container Get_BU_RoundedState := 
			for_each_ne(
				ProjectionYears/name
				, 'BU_RoundedState_T('+quote(ProjectionYears/name)+',Read_BuiltUp_Total_Share/'+ProjectionYears/name+')'
			)
		{
			container Initial := BU_RoundedState_T('Initial',Read_BuiltUp_Total_Share/Initial);
		}
			
		container Builtup_Total_Share_Balanced := 
			for_each_nedv(
				ProjectionYears/name
				, 'recollect_by_cond(domain/IsCompactedDomain, Get_BU_RoundedState/'+ProjectionYears/name+'/BuiltUp_Total_Share_Balanced)'
				, domain
				, float32
			)
		{
			attribute<float32> Initial (domain):= recollect_by_cond(domain/IsCompactedDomain, Get_BU_RoundedState/Initial/BuiltUp_Total_Share_Balanced);
		}
		container Builtup_Total_Area_Balanced := 
			for_each_nedv(
				ProjectionYears/name
				, 'Builtup_Total_Share_Balanced/'+ProjectionYears/name+' * domain/area[float32]'
				, domain
				, float32
			)
		{
			attribute<float32> Initial (domain):= Builtup_Total_Share_Balanced/Initial * domain/area[float32];
		}
		
		Template BU_RoundedState_T
		{
			parameter<string>         ThisYear;
			attribute<float32>        BuiltUp_Total_Share_domain           (domain);
			///
			attribute<float32>        BuiltUp_Total_Share         (CompactedDomain) := BuiltUp_Total_Share_domain[CompactedDomain/org_rel];
			attribute<AllShares>      Perc_BuiltUp_Total          (CompactedDomain) := (100.0f * BuiltUp_Total_Share)[AllShares];
			attribute<BU_DensityBins> DensityBins_rel             (CompactedDomain) := Perc_BuiltUp_Total->DensityBins_rel;
			
			unit<uint32> DensityBin_x_region := combine(BU_DensityBins, ClaimRegion)
			{
				attribute<BU_DensityBins> first_rel;
				attribute<ClaimRegion>    second_rel;
				attribute<.>              per_CompactedDomain     (CompactedDomain) := combine_data(., DensityBins_rel, region_rel);
				attribute<BuiltUpKm2>     TotalArea                                 := ='sum(BuiltUp_Total_Area/'+ThisYear+'[CompactedDomain/org_rel], per_CompactedDomain)[BuiltUpKm2]';
			}
			
			attribute<float32>    Rest_Share                      (CompactedDomain) := (BuiltUp_Total_Share - (0.01[BuiltUpKm2] / 1[km2]) * float32(Perc_BuiltUp_Total));
			attribute<BuiltUpKm2> sum_rounded_area            (DensityBin_x_region) := sum(float32(Perc_BuiltUp_Total) * CompactedDomain/area, DensityBin_x_region/per_CompactedDomain) * (0.01[BuiltUpKm2 / km2]);
			attribute<BuiltUpKm2> Rest_claim                  (DensityBin_x_region) := DensityBin_x_region/TotalArea - sum_rounded_area;
			attribute<float32>    Rank                            (CompactedDomain) := 1.0[BuiltUpKm2 / km2] - Rest_Share;
			attribute<float32>    roundoff_breakpoint         (DensityBin_x_region) := 1.0[BuiltUpKm2 / km2] - nth_element_weighted(Rank, Rest_claim, CompactedDomain/area * (0.01[BuiltUpKm2] / 1[km2]), DensityBin_x_region/per_CompactedDomain);
			attribute<bool >      above_breakpoint                (CompactedDomain) := Rest_Share > roundoff_breakpoint[DensityBin_x_region/per_CompactedDomain];
			attribute<AllShares>  Perc_BuiltUp_Total_Balanced     (CompactedDomain) := Perc_BuiltUp_Total + above_breakpoint[AllShares];
			attribute<float32>    BuiltUp_Total_Share_Balanced    (CompactedDomain) := Perc_BuiltUp_Total_Balanced[float32] / 100f;
		}
		
		parameter<string> Generate_DegreesOfUrbanisation     := 'Ready', ExplicitSuppliers = "='PreProcessing/DegreesOfUrbanisation/'+ModelParameters/StartYear+'/StoreTypology;'+AsList('DegreesOfUrbanisation/'+ProjectionYears/name+'/StoreTypology', ';')";
		parameter<string> Generate_Population                := 'Ready', ExplicitSuppliers = "='Population/Initial;'+AsList('Population/'+ProjectionYears/name, ';')";
		parameter<string> Generate_BuiltUp_Total_Shares      := 'Ready', ExplicitSuppliers = "='BuiltUp_Total_Share/Initial;'+AsList('BuiltUp_Total_Share/'+ProjectionYears/name, ';')";
		// parameter<string> Generate_DoU_Pop                   := 'Ready', ExplicitSuppliers = "Generate_DegreesOfUrbanisation;Generate_Population";
		parameter<string> Generate_All                       := 'Ready', ExplicitSuppliers = "Generate_DegreesOfUrbanisation;Generate_Population;Generate_BuiltUp_Total_Shares";
		
		container Read_Population := 
			for_each_ndva(
				ProjectionYears/name
				, domain
				, NrPerson
				, '%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/Population_'+ProjectionYears/name+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.tif'
			)
		{
			attribute<NrPerson> Y1975 (domain) := round(sourcedata/Population/PerYear_in_CD/Y1975)[NrPerson];
			attribute<NrPerson> Y1980 (domain) := round(sourcedata/Population/PerYear_in_CD/Y1980)[NrPerson];
			attribute<NrPerson> Y1985 (domain) := round(sourcedata/Population/PerYear_in_CD/Y1985)[NrPerson];
			attribute<NrPerson> Y1990 (domain) := round(sourcedata/Population/PerYear_in_CD/Y1990)[NrPerson];
			attribute<NrPerson> Y1995 (domain) := round(sourcedata/Population/PerYear_in_CD/Y1995)[NrPerson];
			attribute<NrPerson> Y2000 (domain) := round(sourcedata/Population/PerYear_in_CD/Y2000)[NrPerson];
			attribute<NrPerson> Y2005 (domain) := round(sourcedata/Population/PerYear_in_CD/Y2005)[NrPerson];
			attribute<NrPerson> Y2010 (domain) := round(sourcedata/Population/PerYear_in_CD/Y2010)[NrPerson];
			attribute<NrPerson> Y2015 (domain) := round(sourcedata/Population/PerYear_in_CD/Y2015)[NrPerson];
			attribute<NrPerson> Y2020 (domain) := round(sourcedata/Population/PerYear_in_CD/Y2020)[NrPerson];
			attribute<NrPerson> Initial (domain) := Y2020;
		}
		
		container Read_BuiltUp_Total_Share := 
			for_each_ndva(
				ProjectionYears/name
				, domain
				, float32
				, '%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/BuiltUp_Total_Share_'+ProjectionYears/name+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.tif'
			)
		{
			attribute<float32> Initial (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/BuiltUp_Total_Share_'+ModelParameters/StartYear+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
		}
		
		container Read_DegreesOfUrbanisation :=
			for_each_ndva(
				ProjectionYears/name
				, domain
				, uint8
				, '%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_'+ProjectionYears/name+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.tif'
			)
		{
			attribute<uint8> Y1975 (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_Y1975_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
			attribute<uint8> Y1980 (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_Y1980_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
			attribute<uint8> Y1985 (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_Y1985_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
			attribute<uint8> Y1990 (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_Y1990_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
			attribute<uint8> Y1995 (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_Y1995_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
			attribute<uint8> Y2000 (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_Y2000_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
			attribute<uint8> Y2005 (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_Y2005_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
			attribute<uint8> Y2010 (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_Y2010_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
			attribute<uint8> Y2015 (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_Y2015_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "true";
			attribute<uint8> Y2020 (domain) : StorageName = "='%LocalDataProjDir%/Results/'+ModelParameters/StudyArea+'/DegUrbaGrid_Y2020_'+ModelParameters/domain_EPSG+'.tif'", StorageReadOnly = "True";
		}
			
		container GridDistances := 
			for_each_ne(
				ProjectionYears/name
				, Use_TempTifFiles 
					? 'Preprocessing/Calculate_GridDistances/T_AllVariants_Instantiation(DegreesOfUrbanisation/'+ProjectionYears/name+'/ReadTypologyK)' 
					: 'Preprocessing/Calculate_GridDistances/T_AllVariants_Instantiation(DegreesOfUrbanisation/'+ProjectionYears/name+'/Typology_Domain)'
			)
		{
			container Y2020 := /Preprocessing/GridDistances/Y2020;
		}
	}

	//ad hoc
	// container Checks : StorageName = "= '%LocalDataProjDir%/Temp/CD_Info_'+ModelParameters/StudyArea+'.csv'", StorageType = "gdalwrite.vect"
	// {
		// attribute<uint32>     FA_nr              (ClaimRegion) := ClaimRegion/org_rel;
		// attribute<string>     FA_name            (ClaimRegion) := ClaimRegion/name;
		// attribute<km2>        Total_area_in_CD   (ClaimRegion) := sum(CompactedDomain/area, ClaimRegion/per_CompactedDomain);
		// attribute<uint32>     Total_cells_in_CD  (ClaimRegion) := pcount(ClaimRegion/per_CompactedDomain);
		// attribute<builtupKm2> BU_area_2020_CD    (ClaimRegion) := sum(/Analysis/Future/InitialState/BuiltUp_Total_Area, ClaimRegion/per_CompactedDomain);
		// attribute<builtupKm2> BU_area_Claim_2100 (ClaimRegion) := Claim/Builtup/Y2100;
	// }
	
	parameter<string> Export_CSVs := 'Ready', ExplicitSuppliers = "Population_perDoU_AllYears;Population_OnLand_Density_perDoU_AllYears;Area_perDoU_AllYears;Population_Abandonment_perDoU_AllYears;"; //BuiltUp_Percentages_Histogram;Population_OnLand_Density_Histogram;";
	
	// container Added_BU_perDoU := 
		// for_each_nedv(
			// ProjectionYears_Delta/name
			// , 'sum(Prep/Delta_BuiltUp_Total_Area/'+ProjectionYears_Delta/name+', Prep/DegreesOfUrbanisation/'+ProjectionYears_Delta/name+'/ReadTypologyK)'
			// , TypologyK
			// , float32
		// ), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Added_BU_perDoU_'+ModelParameters/StudyArea+'.csv'", StorageType = "gdalwrite.vect"
	// {
		// attribute<string>     Label     (TypologyK) := TypologyK/label;
		// attribute<float32> Y2030     (TypologyK) := sum(Prep/Delta_BuiltUp_Total_Area/y2030, Prep/DegreesOfUrbanisation/Y2030/ReadTypologyK);
	// }
	
	// Future change in population per degree of urbanisation class.
	container Population_perDoU := 
		for_each_nedv(
			ProjectionYears/name
			, Use_TempTifFiles ? 'sum(Prep/Read_Population/'+ProjectionYears/name+'[uint64], Prep/DegreesOfUrbanisation/'+ProjectionYears/name+'/ReadTypologyK)' : 'sum(Prep/Population/'+ProjectionYears/name+'[uint64], Prep/DegreesOfUrbanisation/'+ProjectionYears/name+'/Typology_Domain)'
			, TypologyK
			, uint64
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>  Label     (TypologyK) := TypologyK/label;
		attribute<uint64>  Initial   (TypologyK) := =Use_TempTifFiles ? 'sum(Prep/Read_Population/Initial[uint64], Prep/DegreesOfUrbanisation/Initial/ReadTypologyK)' : 'sum(Prep/Population/Initial[uint64], Prep/DegreesOfUrbanisation/Initial/Typology_Domain)' ;
	}
	
	container Population_perDoU_AllYears := 
		for_each_nedv(
			AllYears/name
			, Use_TempTifFiles && AllYears/modelled 
				? 'sum(Prep/Read_Population/'+AllYears/name+'[uint64], Prep/DegreesOfUrbanisation/'+AllYears/name+'/ReadTypologyK)' 
				: NOT(Use_TempTifFiles) && AllYears/modelled
					? 'sum(Prep/Population/'+AllYears/name+'[uint64], Prep/DegreesOfUrbanisation/'+AllYears/name+'/Typology_Domain)'
					: 'sum(Population/PerYear_in_CD/'+AllYears/name+'[uint64], Preprocessing/DegreesOfUrbanisation/'+AllYears/name+'/ReadTypologyK)'
			, TypologyK
			, uint64
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>  Label     (TypologyK) := TypologyK/label; //, StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect";
		// attribute<uint64>  Initial   (TypologyK) := =Use_TempTifFiles ? 'sum(Prep/Read_Population/Initial[uint64], Prep/DegreesOfUrbanisation/Initial/ReadTypologyK)' : 'sum(Prep/Population/Initial[uint64], Prep/DegreesOfUrbanisation/Initial/Typology_Domain)' ;
	}
	
	// container Population_per_ClaimRegion_AllYears := 
		// for_each_nedv(
			// AllYears/name
			// , Use_TempTifFiles && AllYears/modelled 
				// ? 'sum(Prep/BuiltUp_Residential_Area/'+AllYears/name+'[uint64], ClaimRegion/per_domain)' 
				// : NOT(Use_TempTifFiles) && AllYears/modelled
					// ? 'sum(Prep/BuiltUp_Residential_Area/'+AllYears/name+'[uint64], ClaimRegion/per_domain)'
					// : 'sum(Prep/BuiltUp_Residential_Area/'+AllYears/name+'[uint64], ClaimRegion/per_domain)'
			// , ClaimRegion
			// , uint64
		// ), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_per_ClaimRegion_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	// {
		// attribute<string>  Label     (ClaimRegion) := ClaimRegion/label;
	// }
	// container BU_ResArea_per_ClaimRegion_AllYears := 
		// for_each_nedv(
			// AllYears/name
			// , 'sum(Prep/BuiltUp_Residential_Area/'+AllYears/name+', ClaimRegion/per_domain)'
			// , ClaimRegion
			// , float32
		// ), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/BU_ResArea_per_ClaimRegion_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	// {
		// attribute<string>  Label     (ClaimRegion) := ClaimRegion/label;
	// }

	container Population_OnLand_Density_perDoU := 
		for_each_nedv(
			ProjectionYears/name
			, 'Population_perDoU/'+ProjectionYears/name+'[float32] / Area_perDoU/'+ProjectionYears/name+'[float32]'
			, TypologyK
			, float32
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_OnLand_Density_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>      Label     (TypologyK) := TypologyK/label, StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_OnLand_Density_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect";
		// attribute<float32>  Initial   (TypologyK) := Population_perDoU/Initial[float32]  / Area_perDoU/Initial[float32] ;
	}
	
	container Population_OnLand_Density_perDoU_AllYears := 
		for_each_nedv(
			AllYears/name
			, 'Population_perDoU_AllYears/'+AllYears/name+'[float32] / Area_perDoU_AllYears/'+AllYears/name+'[float32]'
			, TypologyK
			, float32
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_OnLand_Density_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>      Label     (TypologyK) := TypologyK/label;
	}
	container Population_Abandonment_perDoU_AllYears :=
		for_each_nedv(
			IsDefined(AllYears/prev_name) ? AllYears/name : ''
			, Use_TempTifFiles && AllYears/modelled 
				? 'sum(uint64(Prep/Read_Population/'+AllYears/prev_name+'[uint64] >= 1[uint64] && Prep/Read_Population/'+AllYears/name+'[uint64] = 0[uint64]), Prep/DegreesOfUrbanisation/'+AllYears/prev_name+'/ReadTypologyK)' 
				: NOT(Use_TempTifFiles) && AllYears/modelled
					? 'sum(uint64(Prep/Population/'+AllYears/prev_name+'[uint64] >= 1[uint64] && Prep/Population/'+AllYears/name+'[uint64] = 0[uint64]), Prep/DegreesOfUrbanisation/'+AllYears/prev_name+'/Typology_Domain)'
					: 'sum(uint64(Population/PerYear_in_CD/'+AllYears/prev_name+'[uint64] >= 1[uint64] && Population/PerYear_in_CD/'+AllYears/name+'[uint64] = 0[uint64]), Preprocessing/DegreesOfUrbanisation/'+AllYears/prev_name+'/ReadTypologyK)'
			, TypologyK
			, uint64
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Abandoned_since_prev_decade_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>  Label     (TypologyK) := TypologyK/label; //, StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect";
		// attribute<uint64>  Initial   (TypologyK) := =Use_TempTifFiles ? 'sum(Prep/Read_Population/Initial[uint64], Prep/DegreesOfUrbanisation/Initial/ReadTypologyK)' : 'sum(Prep/Population/Initial[uint64], Prep/DegreesOfUrbanisation/Initial/Typology_Domain)' ;
	}
	container Population_OnLand_Density_perDoU2020 := 
		for_each_nedv(
			ProjectionYears/name
			, 'Population_perDoU2020/'+ProjectionYears/name+'[float32] / Area_perDoU2020/Initial[float32]'
			, TypologyK
			, float32
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_OnLand_Density_perDoU2020_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>      Label     (TypologyK) := TypologyK/label;
		attribute<float32>  Initial   (TypologyK) := Population_perDoU/Initial[float32]  / Area_perDoU/Initial[float32] ;
	}
	// ad hoc cjc 29/8/24, does not adhere to use_tempfiles approach yet.
	unit<uint32> DoU_Flow_Matrix := combine(TypologyK, TypologyK) {
		attribute<string> Label:= TypologyK/name[first_rel]+'_to_'+TypologyK/name[second_rel];
		attribute<upoint> uni:= point(uint32(first_rel), uint32(second_rel), upoint);
		
		container area:= for_each_nedv(Label
			, 'sum(float32(Prep/DegreesOfUrbanisation/Initial/ReadTypologyK == '+string(first_rel)+'[uint8] && Prep/DegreesOfUrbanisation/Y2100/ReadTypologyK == '+string(second_rel)+'[uint8]))'
			, void
			, float32);
		container popinit:= for_each_nedv(Label
			, 'sum(Prep/Read_Population/Initial[float32] * float32(Prep/DegreesOfUrbanisation/Initial/ReadTypologyK == '+string(first_rel)+'[uint8] && Prep/DegreesOfUrbanisation/Y2100/ReadTypologyK == '+string(second_rel)+'[uint8]))'
			, void
			, float32);
		container pop2100:= for_each_nedv(Label
			, 'sum(Prep/Read_Population/Y2100[float32] * float32(Prep/DegreesOfUrbanisation/Initial/ReadTypologyK == '+string(first_rel)+'[uint8] && Prep/DegreesOfUrbanisation/Y2100/ReadTypologyK == '+string(second_rel)+'[uint8]))'
			, void
			, float32);
		container builtupinit:= for_each_nedv(Label
			, 'sum(Prep/BuiltUp_Total_Area/Initial[float32] * float32(Prep/DegreesOfUrbanisation/Initial/ReadTypologyK == '+string(first_rel)+'[uint8] && Prep/DegreesOfUrbanisation/Y2100/ReadTypologyK == '+string(second_rel)+'[uint8]))'
			, void
			, float32);	
		container builtup2100:= for_each_nedv(Label
			, 'sum(Prep/BuiltUp_Total_Area/Y2100[float32] * float32(Prep/DegreesOfUrbanisation/Initial/ReadTypologyK == '+string(first_rel)+'[uint8] && Prep/DegreesOfUrbanisation/Y2100/ReadTypologyK == '+string(second_rel)+'[uint8]))'
			, void
			, float32);	
	}
	
	container Area_perDoU :=
		for_each_nedv(
			ProjectionYears/name
			, Use_TempTifFiles ? 'sum(Geography/domain/area, Prep/DegreesOfUrbanisation/'+ProjectionYears/name+'/ReadTypologyK)' : 'sum(Geography/domain/area, Prep/DegreesOfUrbanisation/'+ProjectionYears/name+'/Typology_Domain)'
			, TypologyK
			, km2
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Area_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	 {
		attribute<string>  Label     (TypologyK) := TypologyK/label;
		attribute<km2>     Initial   (TypologyK) := =Use_TempTifFiles ? 'sum(Geography/domain/area, Prep/DegreesOfUrbanisation/Initial/ReadTypologyK)' : 'sum(Geography/domain/area, Prep/DegreesOfUrbanisation/Initial/Typology_Domain)';
	 }
	// container Area_perDoU_AllYears:=
		// for_each_nedv(
			// ProjectionYears/name
			// , Use_TempTifFiles 
				// ? 'sum(Geography/domain/area, Prep/DegreesOfUrbanisation/'+ProjectionYears/name+'/ReadTypologyK)' 
				// : 'sum(Geography/domain/area, Prep/DegreesOfUrbanisation/'+ProjectionYears/name+'/Typology_Domain)'
			// , TypologyK
			// , km2
		// ), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Area_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'.csv'", StorageType = "gdalwrite.vect"
	 // {
		// attribute<string>  Label     (TypologyK) := TypologyK/label;
		// attribute<km2>     Initial   (TypologyK) := =Use_TempTifFiles ? 'sum(Geography/domain/area, Prep/DegreesOfUrbanisation/Initial/ReadTypologyK)' : 'sum(Geography/domain/area, Prep/DegreesOfUrbanisation/Initial/Typology_Domain)';
	 // }
	 
	container Area_perDoU_AllYears := 
		for_each_nedv(
			AllYears/name 
			, 'sum(Geography/domain/area, invert(TypologyK/EK)[Prep/Read_DegreesOfUrbanisation/'+AllYears/name+'])'
			, TypologyK
			, km2
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Area_perDoU_'+ModelParameters/StudyArea+ModelParameters/FileSuffix+'_'+ModelParameters/domain_EPSG+'.csv'", StorageType = "gdalwrite.vect"
	 {
		attribute<string>  Label     (TypologyK) := TypologyK/label;
	 }
	 
	// container Area_perDoU2020
	// {
		// attribute<string>  Label     (TypologyK) := TypologyK/label;
		// attribute<km2>     Initial   (TypologyK) := sum(Geography/domain/area, Prep/DegreesOfUrbanisation/Initial/ReadTypologyK);
	// }
	 
	// Future change in population per degree of urbanisation class.
	// container Population_perDoU2020 := 
		// for_each_nedv(
			// ProjectionYears/name
			// , Use_TempTifFiles ? 'sum(Prep/Read_Population/'+ProjectionYears/name+'[uint64], Preprocessing/DegreesOfUrbanisation/Y2020/ReadTypologyK)' : 'sum(Prep/Population/'+ProjectionYears/name+'[uint64], Preprocessing/DegreesOfUrbanisation/Y2020/ReadTypologyK)'
			// , TypologyK
			// , uint64
		// ), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_perDoU2020_'+ModelParameters/StudyArea+'.csv'", StorageType = "gdalwrite.vect"
	// {
		// attribute<string>  Label     (TypologyK) := TypologyK/label;
		// attribute<uint64>  Y2010     (TypologyK) := =Use_TempTifFiles ? 'sum(Prep/Read_Population/Y2010[uint64], Prep/DegreesOfUrbanisation/Y2010/ReadTypologyK)' : 'sum(Prep/Population/Y2010[uint64], Prep/DegreesOfUrbanisation/Y2010/ReadTypologyK)';
		// attribute<uint64>  Initial   (TypologyK) := =Use_TempTifFiles ? 'sum(Prep/Read_Population/Initial[uint64], Prep/DegreesOfUrbanisation/Initial/ReadTypologyK)' : 'sum(Prep/Population/Initial[uint64], Prep/DegreesOfUrbanisation/Initial/ReadTypologyK)';
	// }

	// container Added_BU_perDoU2020 := 
		// for_each_nedv(
			// ProjectionYears_Delta/name
			// , 'sum(Prep/Delta_BuiltUp_Total_Area/'+ProjectionYears_Delta/name+', Preprocessing/DegreesOfUrbanisation/Y2020/ReadTypologyK)'
			// , TypologyK
			// , float32
		// ), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Added_BU_perDoU2020_'+ModelParameters/StudyArea+'.csv'", StorageType = "gdalwrite.vect"
	// {
		// attribute<string>     Label     (TypologyK) := TypologyK/label;
		// attribute<float32>    Y2030     (TypologyK) := sum(Prep/Delta_BuiltUp_Total_Area/y2030, Preprocessing/DegreesOfUrbanisation/Y2020/ReadTypologyK);
	// }

	container Population_Histogram := 
		for_each_nedv(
			AllYears/name
			, 'pcount(Classify(Prep/Read_Population/'+AllYears/name+'[float32], Pop_Bins/ClassBreaks))'
			, Pop_Bins
			, uint32
		), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_Histogram_'+ModelParameters/StudyArea+'.csv'", StorageType = "gdalwrite.vect"
	{
		attribute<string>  Label     (Pop_Bins) := Pop_Bins/label;
		// attribute<uint32>  Initial   (Pop_Bins) := pcount(Classify(Prep/Read_Population/Initial[float32], Pop_Bins/ClassBreaks));
	}
		
	// container delta_BuiltUp := 
		// for_each_nedv(
			// ProjectionYears/name
			// , 'Allocate_Builtup/'+ProjectionYears/name+'/NewState/BuiltUp_Total_Share - InitialState/BuiltUp_Total_Share'
			// , CompactedDomain
			// , float32
		// ); 
	
	// container BuiltUp_Percentages_Histogram := 
		// for_each_nedv(
			// ProjectionYears/name
			// , 'pcount((100f * Prep/Read_BuiltUp_Total_Share/'+ProjectionYears/name+')[AllShares])'
			// , AllShares
			// , uint32
		// ), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/BuiltUp_Percentages_Histogram_'+ModelParameters/StudyArea+'.csv'", StorageType = "gdalwrite.vect"
	// {
		// attribute<string> name  (AllShares) := AllShares/label;
		// attribute<uint32> Y2020 (AllShares) := pcount(InitialState/Perc_BuiltUp_Total);
	// }
	
	// container Population_InRes_Density_Histogram := 
		// for_each_nedv(
			// ProjectionYears/name
			// , 'pcount(Classify(Prep/Population_inRes_Density/'+ProjectionYears/name+', Pop_DensityBins/ClassBreaks))'
			// , Pop_DensityBins
			// , uint32
		// )
	// {
		// attribute<string>  Label   (Pop_DensityBins) := Pop_DensityBins/label;
		// attribute<uint32>  Initial (Pop_DensityBins) := pcount(Classify(Prep/Population_inRes_Density/Initial, Pop_DensityBins/ClassBreaks));
	// }
	
	// container Population_OnLand_Density_Histogram := 
		// for_each_nedv(
			// ProjectionYears/name
			// , 'pcount(Classify(Prep/Population_Onland_Density/'+ProjectionYears/name+', Pop_DensityBins/ClassBreaks))'
			// , Pop_DensityBins
			// , uint32
		// ), StorageName = "='%LocalDataProjDir%/Indicators/'+ModelParameters/StudyArea+'/Population_OnLand_Density_Histogram_'+ModelParameters/StudyArea+'.csv'", StorageType = "gdalwrite.vect"
	// {
		// attribute<string>  Label   (Pop_DensityBins) := Pop_DensityBins/label;
		// attribute<uint32>  Initial (Pop_DensityBins) := pcount(Classify(Prep/Population_Onland_Density/Initial, Pop_DensityBins/ClassBreaks));
	// }
	
	container functional_area_differences 
	{
		attribute<string> name 	(RegionalUnits/FunctionalAreas):= RegionalUnits/FunctionalAreas/item_name, StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_outputs.csv'", StorageType = "gdalwrite.vect";
		attribute<uint32> id  	(RegionalUnits/FunctionalAreas):= RegionalUnits/FunctionalAreas/org_rel[uint32], StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_outputs.csv'", StorageType = "gdalwrite.vect";
		
		parameter<bool> store:= True, ExplicitSuppliers = "= 'name;id;pop;bu;degurbas/Initial/store;'+aslist('degurbas/'+ProjectionYears/name+'/store',';')";
		
		container pop := 
			for_each_nedv(
				'p_'+ProjectionYears/name
				, 'sum(float32(Prep/Read_Population/'+ProjectionYears/name+'), RegionalUnits/FunctionalAreas/per_domain)'
				, RegionalUnits/FunctionalAreas
				, float32
			), StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_pop_outputs.csv'", StorageType = "gdalwrite.vect"
		{
			attribute<float32> p_Initial (RegionalUnits/FunctionalAreas):= sum(float32(Prep/Read_Population/Initial), RegionalUnits/FunctionalAreas/per_domain);
		}
		container bu :=
			for_each_nedv(
				'bu_'+ProjectionYears/name
				, 'sum(Prep/Read_BuiltUp_Total_Share/'+ProjectionYears/name+'[float32] * float32(domain/area), RegionalUnits/FunctionalAreas/per_domain)'
				, RegionalUnits/FunctionalAreas
				, float32
			), StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_bu_outputs.csv'", StorageType = "gdalwrite.vect"
		{
			attribute<float32> p_Initial (RegionalUnits/FunctionalAreas):= sum(float32(Prep/Read_BuiltUp_Total_Share/Initial) * float32(domain/area), RegionalUnits/FunctionalAreas/per_domain);
		}
		container degurbas := 
			for_each_ne(
				ProjectionYears/name
				, 'T_sum_degurbas('+quote(ProjectionYears/name)+')'
			) 
		{
			container Initial:= T_sum_degurbas('Initial');
		}
		
		Template T_sum_degurbas 
		{
			parameter<string> in_year;
			///
			parameter<bool> store:= True, ExplicitSuppliers = "area_sums; pop_sums;";
			
			container area_sums := 
				for_each_nedv(
					'area_'+TypologyK/name+'_'+in_year
					, 'sum(Prep/DegreesOfUrbanisation/'+in_year+'/ReadTypologyK = '+string(id(TypologyK))+'b ? Geography/domain/area : 0[km2], RegionalUnits/FunctionalAreas/per_domain)'
					, RegionalUnits/FunctionalAreas
					, km2
				), StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_degurba_area_outputs_'+in_year+'.csv'", StorageType = "gdalwrite.vect";
			container pop_sums := 
				for_each_nedv(
					'pop_'+TypologyK/name+'_'+in_year
					, 'sum(Prep/DegreesOfUrbanisation/'+in_year+'/ReadTypologyK = '+string(id(TypologyK))+'b ? Prep/Read_Population/'+in_year+'[uint64] : 0[uint64], RegionalUnits/FunctionalAreas/per_domain)'
					, RegionalUnits/FunctionalAreas
					, uint64
				), StorageName = "='%LocalDataProjDir%/Indicators/fa_results/'+ModelParameters/StudyArea+'_degurba_pop_outputs_'+in_year+'.csv'", StorageType = "gdalwrite.vect";
		}
		
	}
	
	container Assess_City_Clusters := 
		for_each_ne(
			ProjectionYears/name
			, 'T_Assess_City_clusters(Prep/Read_DegreesOfUrbanisation/'+ProjectionYears/name+', Prep/Read_Population/'+ProjectionYears/name+'[float32])'
		) 
	{
		container Y2020         := T_Assess_City_clusters(Prep/Read_DegreesOfUrbanisation/Y2020, Prep/Read_Population/Initial[float32]);
		container city_count    := 
			for_each_nedv(
				'n_'+ProjectionYears/name
				, 'sum(uint32('+ProjectionYears/name+'/FindContiguousCells/Contains_urban))'
				, void
				, uint32
			) 
		{
			parameter<uint32> n_Y2020:= sum(uint32(Y2020/FindContiguousCells/Contains_urban));
		}
		container city_pop      := for_each_nedv('pop_'+ProjectionYears/name, 'sum(float32('+ProjectionYears/name+'/FindContiguousCells/Contains_urban) * '+ProjectionYears/name+'/FindContiguousCells/Sum_Population_perGroup)', void, float32) {parameter<float32> pop_Y2020:= sum(float32(Y2020/FindContiguousCells/Contains_urban) * Y2020/FindContiguousCells/Sum_Population_perGroup);}
		container city_cells    := for_each_nedv('cells_'+ProjectionYears/name, 'sum(uint32('+ProjectionYears/name+'/FindContiguousCells/Contains_urban) * '+ProjectionYears/name+'/FindContiguousCells/GroupCellSize)', void, uint32) {parameter<uint32> cells_Y2020:= sum(uint32(Y2020/FindContiguousCells/Contains_urban) * Y2020/FindContiguousCells/GroupCellSize);}
		container biggest_city  := for_each_nedv('max_'+ProjectionYears/name, 'max(float32('+ProjectionYears/name+'/FindContiguousCells/Contains_urban) * '+ProjectionYears/name+'/FindContiguousCells/Sum_Population_perGroup)', void, float32) {parameter<float32> max_Y2020:= max(float32(Y2020/FindContiguousCells/Contains_urban) * Y2020/FindContiguousCells/Sum_Population_perGroup);}
	}
	
	container long_time_window_analyses 
	{
		unit<uint32> years_unit := AllYears;
				
		container builtup:= for_each_nedv(years_unit/name, 
			years_unit/modelled ? '(Prep/Read_BuiltUp_Total_Share/'+years_unit/name+' * domain/area[float32])[km2]' : 'sourcedata/Builtup/Total/'+years_unit/name+'[km2]',
			domain, km2);
		container builtup_perc_distribution:= for_each_nedv(years_unit/name,
			'pcount((100f * builtup/'+years_unit/name+')[allshares])',
			allshares, uint32);
		container population:= for_each_nedv(years_unit/name,
			years_unit/modelled ? 'Prep/Read_Population/'+years_unit/name+'[float32]' : '/sourcedata/Population/PerYear/'+years_unit/name+'[float32]',
			domain, float32);
		container degurbas:= for_each_nedv(years_unit/name, 
			years_unit/modelled ? 'invert(TypologyK/EK)[Prep/Read_DegreesOfUrbanisation/'+years_unit/name+']' : 'Preprocessing/DegreesOfUrbanisation/'+years_unit/name+'/ReadTypologyK',
			domain, TypologyK);

		container per_degurba:= for_each_ne(TypologyK/name, 'analyse_degurbas('+string(id(TypologyK))+'[TypologyK])');
		
		Template analyse_degurbas 
		{
			parameter<TypologyK> in_degurba;
			///
			container typologies:= for_each_nedv(years_unit/name, 'degurbas/'+years_unit/name+' = '+string(in_degurba)+'[TypologyK]', domain, bool);
			container moving_set:= for_each_nedv(years_unit/name, 'typologies/'+years_unit/name + (isdefined(years_unit/prev_name) ? ' && !typologies/'+years_unit/prev_name : '') + ' ? '+string(id(years_unit))+'[years_unit] : (0 / 0)[years_unit]', domain, years_unit);
			attribute<years_unit> first_year (domain):= ='min_elem('+asitemlist('moving_set/'+years_unit/name)+')'; 
			attribute<float32>    moving_area (years_unit):= sum(domain/area[float32] * domain/IsCompactedDomain[float32], first_year);
			container moving_built_up:= for_each_nedv(years_unit/name, 'sum((builtup/'+years_unit/name+'[km2])[float32] * domain/IsCompactedDomain[float32], first_year)', years_unit, float32);
			container moving_pop:= for_each_nedv(years_unit/name, 'sum(population/'+years_unit/name+', first_year)', years_unit, float32);
			
		}
	}
	
	
	
	// container BuiltUp_Residential_Area_Histogram := 
		// for_each_nedv(
			// ProjectionYears/name
			// , 'pcount(Classify(Prep/BuiltUp_Residential_Area/'+ProjectionYears/name+', BU_Residential_Area_Bins/ClassBreaks))'
			// , BU_Residential_Area_Bins
			// , uint32
		// )
	// {
		// attribute<string>  Label     (BU_Residential_Area_Bins) := BU_Residential_Area_Bins/label;
		// attribute<uint32>  Initial   (BU_Residential_Area_Bins) := pcount(Classify(Prep/BuiltUp_Residential_Area/Initial, BU_Residential_Area_Bins/ClassBreaks));
	// }
	
	// container BuiltUp_Total_Share_Histogram := 
		// for_each_nedv(
			// ProjectionYears/name
			// , 'pcount(Classify(Prep/Builtup_Total_Share/'+ProjectionYears/name+', BU_Total_Share_Bins/ClassBreaks))'
			// , BU_Total_Share_Bins
			// , uint32
		// )
	// {
		// attribute<string>  Label     (BU_Total_Share_Bins) := BU_Total_Share_Bins/label;
		// attribute<uint32>  Initial   (BU_Total_Share_Bins) := pcount(Classify(Prep/Builtup_Total_Share/Initial, BU_Total_Share_Bins/ClassBreaks));
	// }
	
	Template T_Assess_City_clusters {
		attribute<uint8> degurba_ref (domain);
		attribute<float32> population_ref (domain);
		
		attribute<bool>  urban (domain):= degurba_ref = /Classifications/TypologyK/ek[Classifications/TypologyK/V/Urban_Centre];
		
		unit<uint32> FindContiguousCells := district(uint8(urban))
		{
			attribute<.>       GroupDomain_rel                                   (domain) := districts;
			attribute<bool>	   Contains_urban 			                         		  := any(urban, GroupDomain_rel);
			attribute<uint32>  GroupCellSize                                              := pcount_uint32(districts);
			attribute<float32>  Sum_Population_perGroup                                   := sum(population_ref,GroupDomain_rel);
			attribute<float32>  Cluster_population								 (domain) := (float32(Contains_urban) * Sum_Population_perGroup)[GroupDomain_rel];
			//attribute<float32>  GroupPopulationSize                              (domain) := GroupCellSize != max(GroupCellSize) ? Sum_Population_perGroup[GroupDomain_rel] : null_f;
		}
			
		
	}
	
	container Adhoc
	{
		attribute<TypologyK>       DoU_y2020            (domain) := Prep/DegreesOfUrbanisation/Initial/Typology_Domain;
		attribute<TypologyK>       DoU_y2030            (domain) := Prep/DegreesOfUrbanisation/Y2030/Typology_Domain;
		
		attribute<bool>            IsNewUrbanCentre     (domain) := DoU_y2030 == TypologyK/V/Urban_Centre && DoU_y2020 != TypologyK/V/Urban_Centre;
		
		attribute<float32>         BU_Total_Share_y2020 (domain) := Prep/Builtup_Total_Share/Initial;
		attribute<float32>         BU_Total_Share_y2030 (domain) := Prep/Builtup_Total_Share/Y2030;
		
		attribute<NrPerson>        Population_y2020     (domain) := Prep/Population/Initial;
		attribute<NrPerson>        Population_y2030     (domain) := Prep/Population/Y2030;
	}
	
}
