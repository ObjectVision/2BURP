Template Allocate_Population_T
{
	parameter<string>  ThisYear;
	parameter<string>  PrevYear;
	container          CurrState;
	container          NewState_BuiltUp;
	attribute<Person>  Claim (ClaimRegion);
	///
	attribute<float32> Initial_Population_Proportional_Reduction_Rate (ClaimRegion) := ='Preprocessing/PercDelta_Claims_Population/'+ThisYear+' < 0f ? max_elem(abs(Preprocessing/PercDelta_Claims_Population/'+ThisYear+') * ModelParameters/Pop_Additional_Claim_Reduction_Factor, ModelParameters/Pop_Initial_Proportional_Reduction_Rate_base) : ModelParameters/Pop_Initial_Proportional_Reduction_Rate_base';
	attribute<float32> Initial_Population_Absolute_Reduction_Rate     (ClaimRegion) := ='Preprocessing/PercDelta_Claims_Population/'+ThisYear+' < 0f ? max_elem(abs(Preprocessing/PercDelta_Claims_Population/'+ThisYear+') * ModelParameters/Pop_Additional_Claim_Reduction_Factor, ModelParameters/Pop_Initial_Absolute_Reduction_Rate_base) : ModelParameters/Pop_Initial_Absolute_Reduction_Rate_base';
	
	
	container LocalMaxima
	{
		attribute<Person_BuiltUpKm2>         Current_LocalMaximum  (CompactedDomain) := max(CurrState/Population_inRes_Density[DistMatrices/cdomain_x_pot1k/third_rel], DistMatrices/cdomain_x_pot1k/first_rel); 
		attribute<bool>                      IsLocalMaximum        (CompactedDomain) := Current_LocalMaximum == CurrState/Population_inRes_Density;
		attribute<bool>                      HasNoPopulation       (CompactedDomain) := CurrState/Population == 0[NrPerson];
		
		// If a cell has the highest local population in T1, it can only increase by 3.5K people in T2 (or by [100K - local pop] if this is smaller than 3.5K people)
		// If a cell is populated but it doesnâ€™t have the highest local population in T1, it can only increase in T2 to the local maximum in T1 + 2.5K people (or by [100K - local pop] if this is smaller than the local maximum in T1 + 2.5K people) 
		// If a cell is not populated in T1, it can only increase by 350 people in T2
		attribute<Person_BuiltUpKm2>  MaxAllowed_Population_Density (CompactedDomain) := 
			iif(HasNoPopulation
				, ModelParameters/pop_r_if_notPopulated * 1[decade]
				, median(ModelParameters/pop_max_saturation, CurrState/Population_inRes_Density, CurrState/Population_inRes_Density + (LocalMaxima/IsLocalMaximum ? ModelParameters/pop_r_if_LocalMax: ModelParameters/pop_r_if_notLocalMax)  * 1[decade])
			);
			
		attribute<Person>             MaxAllowed_Population         (CompactedDomain) := MaxAllowed_Population_Density * NewState_BuiltUp/BuiltUp_Residential_Area;
	}
	
	container Claims
	{
		attribute<Person>            Population                         (ClaimRegion) := Claim;
	}
	
	container Suitability
	{
		container AutoGLM_Coeffs  := Analysis/Calibration/ReadCoffecients/coef2domain/domain;
		attribute<Suit> Calc (domain) := ='(CurrState/PopulationDensity_8dir/Ln_mean_8dir[float32]                                                                            * AutoGLM_Coeffs/ln_PopulationDensity_2000_8dir) + '
																'(min_elem(Physical/Coast/Location2Coast_km/ReadData[float32],250f)                                           * AutoGLM_Coeffs/Distance2Coastline) + 
																(min_elem(Physical/Water/AllWater/Dist_LargeInland_km/GridData[float32],250f)                                 * AutoGLM_Coeffs/Distance2LargeInlandWater) + 
																(min_elem(Socioeconomic/Infrastructure/Road/GRIP4_grid/Road123/Road123[float32],250f)                         * AutoGLM_Coeffs/Distance2MajorRoads) + 
																(min_elem(Socioeconomic/Infrastructure/Road/GRIP4_grid/Road45/Road45[float32],250f)                           * AutoGLM_Coeffs/Distance2SecundaryRoads) + 
																(Indicators/Prep/GridDistances/'+PrevYear+'/Grid_costs_atleast_to/villages                                    * AutoGLM_Coeffs/gc_villages) + 
																(Indicators/Prep/GridDistances/'+PrevYear+'/Grid_costs_atleast_to/towns                                       * AutoGLM_Coeffs/gc_towns) + 
																(Indicators/Prep/GridDistances/'+PrevYear+'/Grid_costs_atleast_to/cities                                      * AutoGLM_Coeffs/gc_cities) + 
																(Physical/Elevation/Mean_1k[float32]                                                                          * AutoGLM_Coeffs/Elevation) + 
																(Physical/Slope_2021/ReadData[float32]                                                                        * AutoGLM_Coeffs/Slope) + 
																(Physical/TerrainRoughnessIndex/TRI_mean_30ss_World[float32]                                                  * AutoGLM_Coeffs/TRI_mean) + 
																(Policy/ProtectedAreas/ReadData[float32]                                                                      * AutoGLM_Coeffs/IsProtectedArea) + 
																(Physical/Water/FloodProneArea/RP100/ReadData_Defined[float32]                                                        * AutoGLM_Coeffs/IsFloodProneArea_RP100) + 
																(Physical/Natural_Hazards/Earthquake/Earthquakes_Modified_Mercalli_Intensity/ReadData[float32]                * AutoGLM_Coeffs/Earthquakes_MMI_Index) + 
																(Physical/Natural_Hazards/Landslide/LS_risk[float32]                                                          * AutoGLM_Coeffs/Landslide_Prone) + 
																AutoGLM_Coeffs/Intercept';
																
		attribute<Suit> Write_Calc (domain) := Calc, StorageName = "='%LocalDataProjDir%/Temp/'+ModelParameters/StudyArea+'/Suitability_'+ModelParameters/Calibration_filedate+'_Pop_'+ThisYear+'.tif'";
		attribute<Suit> Read_Calc  (domain) : StorageName = "='%LocalDataProjDir%/Temp/'+ModelParameters/StudyArea+'/Suitability_'+ModelParameters/Calibration_filedate+'_Pop_'+ThisYear+'.tif'", StorageReadOnly = "True";
				
		attribute<Suit>              BuiltUp                        (CompactedDomain) := =ModelParameters/Use_TempTifFiles ? 'Read_Calc[CompactedDomain/org_rel]' : 'Write_Calc[CompactedDomain/org_rel]';
	
		attribute<Suit>              NonNegative                    (CompactedDomain) := BuiltUp > 0f ? BuiltUp + 1f : exp(BuiltUp);
		attribute<Suit>              Population                     (CompactedDomain) := NonNegative;
	}
	
	container NewState
	{
		//Reduction step 1: All cells will lose 10% of their initial population. This proportional reduction has the biggest impact in dense cells.
		attribute<Person>            Proportional_Reducted_Population       (CompactedDomain) := CurrState/Population[Person] * (1f - Initial_Population_Proportional_Reduction_Rate[ClaimRegion/per_CompactedDomain]); 
		
		//Reduction step 2: All inhabited cells will lose up to a fixed (per functional area) number of persons of 10% of the initial average population of the inhabited grid cells. This absolute reduction will have the biggest impact on low-density cells.
		attribute<NrPerson>          Population_for_Region                      (ClaimRegion) := sum(CurrState/Population, Region_rel);
		attribute<uint32>            NumberOfCellsWithPopulationPerRegion       (ClaimRegion) := sum_uint32(CurrState/Population > 0[nrPerson], Region_rel);
		attribute<float32>           Average_Population_per_PopulatedCell       (ClaimRegion) := Population_for_Region[Person] / NumberOfCellsWithPopulationPerRegion[float32];
		attribute<Person>            Regional_Reduction_per_cell                (ClaimRegion) := Average_Population_per_PopulatedCell * Initial_Population_Absolute_Reduction_Rate;
		attribute<Person>            Reduced_Population                     (CompactedDomain) := max_elem(Proportional_Reducted_Population - Regional_Reduction_per_cell[Region_rel], 0[Person]);
		
		//Adding step 3: Newly built-up areas will be populated based on the initial local average built-up population density in a 3x3 or 5x5 cell radius
		attribute<NrPerson>          Avg_Local_Population_inRes_Density_Num (CompactedDomain) := sum(CurrState/Population[DistMatrices/cdomain_x_pot3k/third_rel], DistMatrices/cdomain_x_pot3k/first_rel); 
		attribute<BuiltUpKm2>        Avg_Local_Population_inRes_Density_Den (CompactedDomain) := sum(BuiltUp_Residential_Area[DistMatrices/cdomain_x_pot3k/third_rel], DistMatrices/cdomain_x_pot3k/first_rel); 
		attribute<Person_BuiltUpKm2> Avg_Local_Population_inRes_Density     (CompactedDomain) := Avg_Local_Population_inRes_Density_Num[Person] / Avg_Local_Population_inRes_Density_Den; 
		attribute<BuiltUpKm2>        BuiltUp_Total_Area                     (CompactedDomain) := NewState_BuiltUp/BuiltUp_Total_Area; 
		attribute<BuiltUpKm2>        BuiltUp_Residential_Area               (CompactedDomain) := NewState_BuiltUp/BuiltUp_Residential_Area; 
		
		attribute<BuiltUpKm2>        New_BuiltUp_Area                       (CompactedDomain) := max_elem(BuiltUp_Total_Area - CurrState/BuiltUp_Total_Area, 0f); 
		attribute<Person>            Population_in_New_BuiltUp_Area_src     (CompactedDomain) := MakeDefined(New_BuiltUp_Area * Avg_Local_Population_inRes_Density, 0[Person]);
		
		attribute<Person>            Pop_in_New_BU_Area_Augm_Teller             (ClaimRegion) := max_elem((Claims/Population - sum(Reduced_Population, Region_rel)) * ModelParameters/Pop_ShareOfRestclaim_Prefers_newBU, 0[Person]), Descr = "Rest claim per regio that could be allocated to new BU area"; 
		attribute<Person>            Pop_in_New_BU_Area_Augm_Noemer             (ClaimRegion) := sum(Population_in_New_BuiltUp_Area_src, Region_rel), Descr = "Total possible new population in new BU per region";
		attribute<float32>           Pop_New_BU_PopulationDensity_Factor        (ClaimRegion) := min_elem(1f, Pop_in_New_BU_Area_Augm_Teller / Pop_in_New_BU_Area_Augm_Noemer);
		
		attribute<Person>            Population_in_New_BuiltUp_Area         (CompactedDomain) := Population_in_New_BuiltUp_Area_src * Pop_New_BU_PopulationDensity_Factor[Region_rel];

		//Adding step 4: To the population we add the difference between the maximum allowed density and the initial density, after scaling it by the suitability, augmented to meet functional area claims.
		attribute<bool>              Population_beforeAllocation_Check          (ClaimRegion) := sum(Reduced_Population + Population_in_New_BuiltUp_Area, Region_rel) <= Claims/Population + (Claims/Population * 0.01f);
		attribute<Person>            Population_beforeAllocation            (CompactedDomain) := Reduced_Population + Population_in_New_BuiltUp_Area, IntegrityCheck = "Population_beforeAllocation_Check";
		attribute<Person>            Room_for_Population                    (CompactedDomain) := max_elem(LocalMaxima/MaxAllowed_Population - Population_beforeAllocation, 0f);
		attribute<float32>           ProportionalityFactor                  (CompactedDomain) := max_elem(Suitability/population * Room_for_Population, 0f);
		attribute<float32>           Sum_ProportionalityFactor                  (ClaimRegion) := sum(ProportionalityFactor , Region_rel);
		attribute<Person>            RestClaim                                  (ClaimRegion) := max_elem(Claims/Population - sum(Population_beforeAllocation, Region_rel), 0[Person]);
		attribute<float32>           ScaleFactor_0                              (ClaimRegion) := RestClaim / Sum_ProportionalityFactor, IntegrityCheck = "Check_for_enough_suitable_locations"; //Number of persons per suitability value. 
		
		attribute<float32>           Population_0                           (CompactedDomain) := ScaleFactor_0[Region_rel] * Suitability/Population; //for debug purposes, not really number of persons!
		attribute<int32>             Sum_Room_for_population                    (ClaimRegion) := sum(Suitability/Population > 0f ? int32(Room_for_Population) : 0i, Region_rel); //for debug purposes
		attribute<bool>              Check_for_enough_suitable_locations        (ClaimRegion) := ClaimRegion/ignore_check_enough_suitable_locations || Sum_Room_for_population[Person] >= RestClaim; //for debug purposes
		
		unit<uint8> Iter := cat_range(0b,10b) 
		{
			attribute<string> name      := 'Iter_'+string(id(.));
			attribute<string> prev_name := MakeDefined(name[sub_or_null(id(.),1b)]+'/ScaleFactor_new', 'ScaleFactor_0');
		}
		
		container Population_Allocation :=
			for_each_ne(
				Iter/name
				, 'Population_Allocation_T('+Iter/prev_name+')'
			)
		{
			container Last := =last(Iter/name);
		}

		Template Population_Allocation_T
		{
			attribute<float32>       ScaleFactor                  (ClaimRegion);
			///
			attribute<Person>        Proportional_Population  (CompactedDomain) := ScaleFactor[Region_rel] * ProportionalityFactor;
			attribute<Person>        Saturated_Population     (CompactedDomain) := min_elem(Proportional_Population, Room_for_Population);
			attribute<Person>        Total_Population         (CompactedDomain) := Saturated_Population + Population_beforeAllocation;
			attribute<NrPerson>      Total_Population_rounded (CompactedDomain) := int32(Total_Population)[NrPerson]; //we round here, to omit fractional people which can then reallocated in the next iter.
			attribute<NrPerson>      Realisation                  (ClaimRegion) := sum(Total_Population_rounded, Region_rel);
			attribute<float32>       RescaleFactor                (ClaimRegion) := Claims/Population / Realisation[Person]; // We need to correct the scale factor to accomodate left over claims.
			attribute<float32>       ScaleFactor_new              (ClaimRegion) := IsNull(ScaleFactor) || IsNull(RescaleFactor) ? 0f : ScaleFactor * RescaleFactor;
		}
		
		//Results  
		attribute<NrPerson>          Population                   (CompactedDomain) := Population_Allocation/Last/Total_Population_rounded;
		attribute<Person_BuiltUpKm2> Population_inRes_Density     (CompactedDomain) := Population[Person] / BuiltUp_Residential_Area;
		attribute<Person_Km2>        Population_TotalLand_Density (CompactedDomain) := (Population[Person] / CompactedDomain/area);
		attribute<NrPerson>          Population_sum                   (ClaimRegion) := sum(Population, Region_rel);
		attribute<float32>           Final_ClaimRealisation           (ClaimRegion) := Population_sum[Person] / Claims/Population;
		
		container PopulationDensity_8dir  := Preprocessing/Population_Neighbourhoods/Create_8dir_T(recollect_by_cond(domain/IsCompactedDomain, Population_TotalLand_Density)[float64]);
		
		container Diagnostics 
		{
			unit<uint32> Relevant_ClaimRegions:= select_with_org_rel(pcount(Region_rel) > 1000) 
			{
				attribute<uint32>   ncells                       := pcount(Region_rel)[org_rel];
				attribute<LatLong_Base>  Geometry              (poly) := ClaimRegion/Geometry_LL[org_rel];
				attribute<Person>   Total_Pop_pool               := (Claims/Population - sum(Reduced_Population, Region_rel))[org_rel];
				attribute<Person>   Total_In_NewBuiltup          := sum(Population_in_New_BuiltUp_Area, Region_rel)[org_rel];
				attribute<float32>  Perc_Pop_pool_in_new_builtup := Total_In_NewBuiltup[float32] /  Total_Pop_pool[float32];
				attribute<float32>  Perc_Pop_in_new_builtup      := Total_In_NewBuiltup[float32] /  (Claims/Population[float32])[org_rel];
				attribute<float32>  Perc_New_BuiltUp             := sum(New_BuiltUp_Area[float32], Region_rel)[org_rel] / sum(BuiltUp_Total_Area[float32], Region_rel)[org_rel];
			}
		}
	}
}