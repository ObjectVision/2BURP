container Calibration : using = "geography;SourceData/RegionalUnits;SourceData"
{
	unit<uint32> pot_fields: nrofrows = 8 
	{
		attribute<string> label: ['Pots_lin_5km', 'Pots_sqr_5km', 'Pots_lin_10km', 'Pots_sqr_10km', 'Pots_lin_20km', 'Pots_sqr_20km', 'Pots_lin_40km', 'Pots_sqr_40km'];
	}
	
	unit <uint32> Create_DataForCalibration := CompactedDomain
	{
		attribute<Countries>  Country_id                              := Countries/per_grid[CompactedDomain/org_rel];
		attribute<float32>    BU_RES_2000                             := SourceData/Builtup/Residential/Y2000[CompactedDomain/org_rel];
		attribute<float32>    BU_RES_2020                             := SourceData/Builtup/Residential/Y2020[CompactedDomain/org_rel];
		attribute<float32>    BUTOT_2000                              := SourceData/Builtup/Total/Y2000[CompactedDomain/org_rel];
		attribute<float32>    BUTOT_2020                              := SourceData/Builtup/Total/Y2020[CompactedDomain/org_rel];
		attribute<float64>    Pop_2000                                := SourceData/Population/PerYear/Y2000[CompactedDomain/org_rel];
		attribute<float64>    Pop_2020                                := SourceData/Population/PerYear/Y2020[CompactedDomain/org_rel];
		attribute<float64>    PopulationDensity_2000_8dir             := Preprocessing/Population/PopulationDensity_8dir_Y2000/ItemOfInterest[CompactedDomain/org_rel];
		attribute<float64>    PopulationDensity_2020_8dir             := Preprocessing/Population/PopulationDensity_8dir_StartYear/ItemOfInterest[CompactedDomain/org_rel];
		
		attribute<int16>      Elevation                               := Physical/Elevation/Elevation[CompactedDomain/org_rel];
		attribute<float32>    Slope                                   := Physical/Slope_2021/ReadData[CompactedDomain/org_rel];
		attribute<float32>    TRI_mean                                := Physical/TerrainRoughnessIndex/mean[CompactedDomain/org_rel];
		
		attribute<uint8>      IsProtectedArea                         := Policy/ProtectedAreas/ReadData[CompactedDomain/org_rel];
		attribute<uint8>      IsFloodProneArea_RP100                  := Physical/Water/FloodProneArea/RP100/ReadData[CompactedDomain/org_rel];
		
		attribute<uint8>      Earthquakes_MMI_Index                   := Physical/Natural_Hazards/Earthquake/Earthquakes_Modified_Mercalli_Intensity/ReadData[CompactedDomain/org_rel];
		attribute<uint8>      NrOfLandslides_Precipitation            := Physical/Natural_Hazards/Landslide/Frequency_of_landslides_triggered_by_precipitations/LS_PR_uint8[CompactedDomain/org_rel];
		attribute<uint8>      NrOfLandslides_Earthquakes              := Physical/Natural_Hazards/Landslide/Frequency_of_landslides_triggered_by_earthquakes/LS_EQ_uint8[CompactedDomain/org_rel];
		
		attribute<float32>    Distance2Coastline                      := Physical/Coast/Location2Coast_km/Coastline[CompactedDomain/org_rel];
		attribute<float32>    Distance2AnyInlandWater                 := Physical/Water/AllWater/Dist_AllInland_km/GridData[CompactedDomain/org_rel];
		attribute<float32>    Distance2LargeInlandWater               := Physical/Water/AllWater/Dist_LargeInland_km/GridData[CompactedDomain/org_rel];
		attribute<float32>    Distance2MajorRoads                     := Socioeconomic/Infrastructure/Road/GRIP4_grid/Road123/Road123[CompactedDomain/org_rel];
		attribute<float32>    Distance2SecundaryRoads                 := Socioeconomic/Infrastructure/Road/GRIP4_grid/Road45/Road45[CompactedDomain/org_rel];
		
		//attribute<float32>    Distance2Villages_GridBased             := Preprocessing/GridDists/AccessGrids_grid/villages/costsgrid_untiled_maximp_latitude_specific[CompactedDomain/org_rel];
		//attribute<float32>    Distance2Town_GridBased                 := Preprocessing/GridDists/AccessGrids_grid/towns/costsgrid_untiled_maximp_latitude_specific[CompactedDomain/org_rel];
		//attribute<float32>    Distance2Cities_GridBased               := Preprocessing/GridDists/AccessGrids_grid/cities/costsgrid_untiled_maximp_latitude_specific[CompactedDomain/org_rel];
		//attribute<float32>    Distance2Villages_NetworkBased          := Preprocessing/GridDists/AccessGrids_nw/villages/distancegrid[CompactedDomain/org_rel];
		//attribute<float32>    Distance2Town_NetworkBased              := Preprocessing/GridDists/AccessGrids_nw/towns/distancegrid[CompactedDomain/org_rel];
		//attribute<float32>    Distance2Cities_NetworkBased            := Preprocessing/GridDists/AccessGrids_nw/cities/distancegrid[CompactedDomain/org_rel];
		  
		
		
		// needs to be first of containers with template variables
		container access_to_settlements   := for_each_nedv(Socioeconomic/access_to_settlements/gridslist/dist ? Socioeconomic/access_to_settlements/gridslist/label : '', 'Socioeconomic/access_to_settlements/readgrids/'+Socioeconomic/access_to_settlements/gridslist/label+'/infile/ReadData_LL[CompactedDomain/org_rel]', CompactedDomain, uint32);
		container griddist_to_settlements := for_each_nedv('gd_'+Preprocessing/GridDists/access_variants/Label, 'uint32(Preprocessing/GridDists/AccessGrids_nw/'+Preprocessing/GridDists/access_variants/Label+'/distancegrid[CompactedDomain/org_rel])', CompactedDomain, uint32);
		container gridcost_to_settlements := for_each_nedv('gc_'+Preprocessing/GridDists/access_variants/Label, 'uint32(Preprocessing/GridDists/AccessGrids_grid/'+Preprocessing/GridDists/access_variants/Label+'/costsgrid_zonal_untiled_maximp_latitude_specific[CompactedDomain/org_rel])', CompactedDomain, uint32);
		container pots_pop_2000           := for_each_nedv(pot_fields/label, 'round(SourceData/Population/'+pot_fields/label+'/Y2000[CompactedDomain/org_rel])', CompactedDomain, int32);
		container pots_pop_2020           := for_each_nedv(pot_fields/label, 'round(SourceData/Population/'+pot_fields/label+'/Y2020[CompactedDomain/org_rel])', CompactedDomain, int32);
	}
	container Export_DataForCalibration 
	{
		unit<uint32> properties : nrofrows = 2 
		{
			attribute<string> name: ['name', 'DomainUnit'];
		}
		  
		unit<uint32> directnames := SubItem_PropValues(Create_DataForCalibration, properties/name) 
		{
			attribute<bool> isvalue:= DomainUnit = '.';
		}
		
		//parameter<string> fieldnamelist:= aslist(directnames/name, fieldseparator)+fieldseparator+aslist(Socioeconomic/access_to_settlements/gridslist/label, fieldseparator);
		parameter<string> fieldnamelist:= aslist(directnames/isvalue ? directnames/name : '', fieldseparator)
			+fieldseparator+aslist(Socioeconomic/access_to_settlements/gridslist/dist ? Socioeconomic/access_to_settlements/gridslist/label : '', fieldseparator)
			+fieldseparator+aslist('gd_'+Preprocessing/GridDists/access_variants/Label, fieldseparator)
			+fieldseparator+aslist('gc_'+Preprocessing/GridDists/access_variants/Label, fieldseparator)
			+fieldseparator+aslist('pop2000_'+pot_fields/label, fieldseparator)
			+fieldseparator+aslist('pop2020_'+pot_fields/label, fieldseparator)	
			;
		//parameter<string> fieldreflist:= aslist('Create_DataForCalibration/'+directnames/name, fieldseparator)+fieldseparator+aslist('Create_DataForCalibration/access_to_settlements/'+Socioeconomic/access_to_settlements/gridslist/label, fieldseparator);
		parameter<string> fieldreflist:= aslist(directnames/isvalue ? 'Create_DataForCalibration/'+directnames/name : '', fieldseparator)
			+fieldseparator+aslist(Socioeconomic/access_to_settlements/gridslist/dist ? 'Create_DataForCalibration/access_to_settlements/'+Socioeconomic/access_to_settlements/gridslist/label : '', fieldseparator)
			+fieldseparator+aslist('Create_DataForCalibration/griddist_to_settlements/gd_'+Preprocessing/GridDists/access_variants/Label, fieldseparator)
			+fieldseparator+aslist('Create_DataForCalibration/gridcost_to_settlements/gc_'+Preprocessing/GridDists/access_variants/Label, fieldseparator)
			+fieldseparator+aslist('Create_DataForCalibration/pots_pop_2000/'+pot_fields/label, fieldseparator)
			+fieldseparator+aslist('Create_DataForCalibration/pots_pop_2020/'+pot_fields/label, fieldseparator)
			;

		// assume ExportDomain is a configured domain unit with two attributes as subitems: id & dist
		parameter<string> fieldseparator := ';';
		parameter<string> filename       := '%LocalDataProjDir%/Calibration_export/'+ModelParameters/StudyArea+'/calibset.csv';

		unit<uint32> field := range(uint32, 0,strcount(fieldnamelist, ';') +1)
		{
			attribute<string> name := ReadArray(fieldnamelist, ., string, 0);
			attribute<string> ref := ReadArray(fieldreflist, ., string, 0);
		}

		parameter<string> newline := '\n';
		parameter<string> header  := fieldnamelist;
		attribute<string> body (Create_DataForCalibration) := = AsList(
			+'string(' + field/ref + ')',' + '+quote(fieldseparator)+' +'
			);
		 
		  parameter<string> result := header + newline + AsList(body, newline)
		  ,  StorageName = "= filename"
		  ,  StorageType = "str";
		
		container Export_Tiffs_ForCalibration:= for_each_nedva(field/name, 'uint32('+field/ref+'[CompactedDomain/BaseGrid])',domain,uint32,'%LocalDataProjDir%/Calibration_export/'+ModelParameters/StudyArea+'/tiffs/'+field/name+'.tif');
	}
	
	container ReadCoffecients
	{
		unit<uint8> continent : NrOfRows = 7
		{
			attribute<string>  name                            :[     'Africa', 'Antarctica',           'Asia','Australia_Oceania',  'Europe',  'North_America','South_America'];

			attribute<float32> LnPopulationDensity_2000_8dir   :[  0.531497709,         null,      0.839765999,        0.870067398,     1.985,      0.974599052,      0.724074079];//Population Density
			attribute<float32> Distance2Coastline              :[ -0.008463382,         null,     -0.005394479,       -0.005474561,    -0.037,     -0.002514605,     -0.004313727];//Distance to coast
			attribute<float32> Distance2FreshWater             :[         null,         null,             null,               null,     0.009,     -0.007378535,      0.011433245];//Distance to river-lake
			attribute<float32> Distance2MajorRoads             :[ -0.014085749,         null,     -0.010793457,       -0.031643393,     0.068,     -0.075559046,     -0.034440931];//Distance main roads
			attribute<float32> Distance2SecundaryRoads         :[ -0.049962357,         null,             null,       -0.011904265,      null,             null,             null];//Distance secondary roads
			attribute<float32> Distance2Cities_GridBased       :[ -0.037591571,         null,     -0.034551404,       -0.030340505,    -0.009,     -0.052752656,     -0.037279886];//Travel Time
			attribute<float32> Elevation                       :[  0.001545315,         null,      0.000753538,         0.00140626,    -0.001,      0.000601571,     -0.000117761];//Elevation
			attribute<float32> Slope                           :[ -0.065971464,         null,      0.033417041,       -0.299321221,      null,      -0.04037477,      -0.06362772];//Slope
			attribute<float32> TRI_mean                        :[ -0.653195893,         null,     -0.620312105,       -0.719939619,      null,     -0.651830594,             null];//TRI
			attribute<float32> IsProtectedArea                 :[ -0.075611953,         null,     -0.383992502,        1.004850524,    -0.452,      0.578474954,     -0.706175672];//Protected Area
			attribute<float32> IsFloodProneArea_RP100          :[  0.788375972,         null,             null,               null,     0.059,      0.179426493,      1.683693808];//Flood Prone Area
			attribute<float32> Earthquakes_MMI_Index           :[         null,         null,      0.007257093,       -0.197845731,    -0.059,     -0.028916204,      0.095217295];//Earthquake
			attribute<float32> NrOfLandslides_Precipitation    :[         null,         null,             null,               null,      null,             null,             null];//Landslide [PR]
			attribute<float32> NrOfLandslides_Earthquakes      :[         null,         null,     -0.440048397,       1.554044128,       null,     -0.857242479,     -0.875636885];//Landslide [EQ]
			
			attribute<float32> Constant                        :[  2.533543412,         null,     -1.132519129,       1.763324867,     -0.482,     -0.631474116,      -0.63287745];
			attribute<string>  label          := name;
			container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		}
		
		container coef2domain := Coef2domain_T(continent);
	}

	Template Coef2domain_T
	{
		unit<uint8> continent;
		///
		unit<uint32> Country     := SourceData/RegionalUnits/Countries 
		{
			attribute<uint8>   Continent_id       := rlookup(SourceData/RegionalUnits/Countries/Continent_name,continent/name);

			attribute<float32> LnPopulationDensity_2000_8dir     := continent/LnPopulationDensity_2000_8dir[Continent_id];
			attribute<float32> Distance2Coastline                := continent/Distance2Coastline[Continent_id];
			attribute<float32> Distance2FreshWater               := continent/Distance2FreshWater[Continent_id];
			attribute<float32> Distance2MajorRoads               := continent/Distance2MajorRoads[Continent_id];
			attribute<float32> Distance2SecundaryRoads           := continent/Distance2SecundaryRoads[Continent_id];
			attribute<float32> Distance2Cities_GridBased         := continent/Distance2Cities_GridBased[Continent_id];
			attribute<float32> Elevation                         := continent/Elevation[Continent_id];
			attribute<float32> Slope                             := continent/Slope[Continent_id];
			attribute<float32> TRI_mean                          := continent/TRI_mean[Continent_id];
			attribute<float32> IsProtectedArea                   := continent/IsProtectedArea[Continent_id];
			attribute<float32> IsFloodProneArea_RP100            := continent/IsFloodProneArea_RP100[Continent_id];
			attribute<float32> Earthquakes_MMI_Index             := continent/Earthquakes_MMI_Index[Continent_id];
			attribute<float32> NrOfLandslides_Precipitation      := continent/NrOfLandslides_Precipitation[Continent_id];
			attribute<float32> NrOfLandslides_Earthquakes        := continent/NrOfLandslides_Earthquakes[Continent_id];

			attribute<float32> Constant                          := continent/Constant[Continent_id];
		}

		unit<wpoint> domain     := geography/domain
		{
			attribute<float32> LnPopulationDensity_2000_8dir     := MakeDefined(Country/LnPopulationDensity_2000_8dir[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> Distance2Coastline                := MakeDefined(Country/Distance2Coastline[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> Distance2FreshWater               := MakeDefined(Country/Distance2FreshWater[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> Distance2MajorRoads               := MakeDefined(Country/Distance2MajorRoads[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> Distance2SecundaryRoads           := MakeDefined(Country/Distance2SecundaryRoads[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> Distance2Cities_GridBased         := MakeDefined(Country/Distance2Cities_GridBased[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> Elevation                         := MakeDefined(Country/Elevation[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> Slope                             := MakeDefined(Country/Slope[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> TRI_mean                          := MakeDefined(Country/TRI_mean[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> IsProtectedArea                   := MakeDefined(Country/IsProtectedArea[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> IsFloodProneArea_RP100            := MakeDefined(Country/IsFloodProneArea_RP100[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> Earthquakes_MMI_Index             := MakeDefined(Country/Earthquakes_MMI_Index[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> NrOfLandslides_Precipitation      := MakeDefined(Country/NrOfLandslides_Precipitation[SourceData/RegionalUnits/Countries/per_grid],0f);
			attribute<float32> NrOfLandslides_Earthquakes        := MakeDefined(Country/NrOfLandslides_Earthquakes[SourceData/RegionalUnits/Countries/per_grid],0f);

			attribute<float32> Constant                          := MakeDefined(Country/Constant[SourceData/RegionalUnits/Countries/per_grid],0f);
		}
	}
}
