container Analysis_Modelled : using = "Units;Classifications;geography"
{
	container UrbanDif2010_2100_steps 
	{
		unit<uint32> OverlayRegios: nrofrows = 11
		{
			attribute<string> namen: ['FieldUrbanY2014','UrbanY2010','UrbanY2020','UrbanY2030','UrbanY2040','UrbanY2050','UrbanY2060','UrbanY2070','UrbanY2080','UrbanY2090','UrbanY2100'];
			attribute<string> namen_rev := namen[uint32(#.)-ID(.)-1u];
		}

		container OverlayGrids
		{
			//uint8-->http://mantis.objectvision.nl/view.php?id=1372

			attribute<uint2> FieldUrbanY2014 (CompactedDomain )
			:=  Preprocessing/UrbanArea/UrbanArea2010/ReadData[CompactedDomain/domain_rel][uint2];

			attribute<uint2> UrbanY2010 (CompactedDomain )
			:==  '/Scenarios/SSPs/' + Scenario + '/ProjectionDates/Y2010/NewState/IsUrban[uint2]';
			attribute<uint2> UrbanY2020 (CompactedDomain )
			:==  '/Scenarios/SSPs/' + Scenario + '/ProjectionDates/Y2020/NewState/IsUrban[uint2]';
			attribute<uint2> UrbanY2030 (CompactedDomain )
			:==  '/Scenarios/SSPs/' + Scenario + '/ProjectionDates/Y2030/NewState/IsUrban[uint2]';
			attribute<uint2> UrbanY2040 (CompactedDomain )
			:==  '/Scenarios/SSPs/' + Scenario + '/ProjectionDates/Y2040/NewState/IsUrban[uint2]';
			attribute<uint2> UrbanY2050 (CompactedDomain )
			:==  '/Scenarios/SSPs/' + Scenario + '/ProjectionDates/Y2050/NewState/IsUrban[uint2]';
			attribute<uint2> UrbanY2060 (CompactedDomain )
			:==  '/Scenarios/SSPs/' + Scenario + '/ProjectionDates/Y2060/NewState/IsUrban[uint2]';
			attribute<uint2> UrbanY2070 (CompactedDomain )
			:==  '/Scenarios/SSPs/' + Scenario + '/ProjectionDates/Y2070/NewState/IsUrban[uint2]';
			attribute<uint2> UrbanY2080 (CompactedDomain )
			:==  '/Scenarios/SSPs/' + Scenario + '/ProjectionDates/Y2080/NewState/IsUrban[uint2]';
			attribute<uint2> UrbanY2090 (CompactedDomain )
			:==  '/Scenarios/SSPs/' + Scenario + '/ProjectionDates/Y2090/NewState/IsUrban[uint2]';
			attribute<uint2> UrbanY2100 (CompactedDomain )
			:==  '/Scenarios/SSPs/' + Scenario + '/ProjectionDates/Y2100/NewState/IsUrban[uint2]';
			
			attribute<string>                                        Key                                           (CompactedDomain) := string(FieldUrbanY2014) + "_" + string(UrbanY2010) + "_" + string(UrbanY2020) + "_" + string(UrbanY2030) + "_" + string(UrbanY2040)+ "_" + string(UrbanY2050)+ "_" + string(UrbanY2060)+ "_" + string(UrbanY2070)+ "_" + string(UrbanY2080)+ "_" + string(UrbanY2090)+ "_" + string(UrbanY2100);
			attribute<String>                                        ISO                                           (CompactedDomain) := SourceData/RegionalUnits/Countries/Country/ISO3[CompactedDomain/Country_rel];
			attribute<String>                                        Continent                                     (CompactedDomain) := SourceData/RegionalUnits/Countries/Country/Continent_name[CompactedDomain/Country_rel];

			attribute<String>                                        ISOKey                                        (CompactedDomain) := ISO + '_' + Key;
			attribute<ISOKey_uq>                                     ISOKey_id                                     (CompactedDomain) := rlookup(ISOKey, ISOKey_uq/Values);

			attribute<bool>                                          DeUrbanization                                (CompactedDomain) := strcount(key, '1_0') > 0;
			attribute<bool>                                          DeUrbanizationUrbanizationWithin10            (CompactedDomain) := strcount(key, '1_0_1') > 0;
			attribute<bool>                                          DeUrbanizationUrbanizationWithin20            (CompactedDomain) := strcount(key, '1_0_0_1') > 0;
			attribute<bool>                                          DeUrbanizationFieldUrbanY2014                 (CompactedDomain) := strcount(key, '1_0_0_0_0_0_0_0_0_0_0') > 0;
			
			attribute<bool>                                          Special                                       (CompactedDomain) := strcount(key, '1_0_1_1_1_1_1_1_1_1_1') > 0;
			

			attribute<Classifications/AnalysisUrbNotUrb/CombinationUrbNotUrb> CombinationUrbNotUrb_rel                      (CompactedDomain) := rlookup(Key, Classifications/AnalysisUrbNotUrb/CombinationUrbNotUrb/key);
		}

		unit<uint32> ISOKey_uq := unique(OverlayGrids/ISOKey)
		{
				attribute<uint32>                          nr          := pcount(OverlayGrids/ISOKey_id);
				attribute<string>                          Label       := values, DialogType = "LabelText";
				attribute<string>                          Key         := right(Label, strlen(Label)-4);
				attribute<string>                          ISO3        := left(Label, 3);
				attribute<string>                          Continent   := SourceData/RegionalUnits/Countries/Country/Continent_name[Country_rel];
				attribute<SourceData/RegionalUnits/Countries/Country > Country_rel := rlookup(ISO3,SourceData/RegionalUnits/Countries/Country/ISO3);

				attribute<ISOKey_uq_key_uq>                ISOKey_uq_key_uq_rel := rlookup(key, ISOKey_uq_key_uq/values);
		}

		unit<uint32> ISOKey_uq_key_uq := unique(ISOKey_uq/Key)
		{
				attribute<string> ISO3list      := AsList(ISOKey_uq/ISO3, ';', ISOKey_uq/ISOKey_uq_key_uq_rel);
				attribute<uint32> nrISO3        := pcount(ISOKey_uq/ISOKey_uq_key_uq_rel);
		}

		unit<uint32> CombinationUrbNotUrb := Classifications/AnalysisUrbNotUrb/CombinationUrbNotUrb
		{
			attribute<uint32>                                        nroccurrence  := pcount(OverlayGrids/CombinationUrbNotUrb_rel);
			attribute<string>                                        Key           :=Classifications/AnalysisUrbNotUrb/CombinationUrbNotUrb/Key;
			attribute<string>                                        Value         :=Classifications/AnalysisUrbNotUrb/CombinationUrbNotUrb/Value;
		}

		unit<uint32> CombinationUrbNotUrbOccurring := subset(CombinationUrbNotUrb/nroccurrence > 0)
		{
			attribute<string>  Key           := CombinationUrbNotUrb/Key[nr_OrgEntity];
			attribute<string>  ISO3          := rjoin(Key,ISOKey_uq_key_uq/Values,ISOKey_uq_key_uq/ISO3list);
			attribute<uint32>  nrISO3        := rjoin(Key,ISOKey_uq_key_uq/Values,ISOKey_uq_key_uq/nrISO3);
			attribute<uint32>  nroccurrence  := CombinationUrbNotUrb/nroccurrence[nr_OrgEntity];
			attribute<float32> prcoccurrence := (nroccurrence[float32] / UrbanDif2010_2100_steps/Sumnroccurrencep[float32]) *100f;
			attribute<string>  Value         := CombinationUrbNotUrb/Value[nr_OrgEntity];
		}
		
		parameter<uint32>  Sumnroccurrencep          := sum(CombinationUrbNotUrbOccurring/nroccurrence);
		
		unit<uint32> variable_CombinationUrbNotUrbOccurring_export := SubItem_PropValues(CombinationUrbNotUrbOccurring,'Name');
		container export_csv := Templates/WriteTable32ToCSV(CombinationUrbNotUrbOccurring , AsList(variable_CombinationUrbNotUrbOccurring_export/Name, ';'), '%LocalDataProjDir%/results/'+/Scenarios/GridName+'/analysis_modelled/CombinationUrbNotUrbOccurring_' + Scenario + '.csv');

		unit<uint16> UrbanOverlay := overlay(OverlayRegios/namen_rev, CompactedDomain, OverlayGrids)
		{
			attribute<.>                                                      UnionData_copy(CompactedDomain)                        := UnionData, Descr = "AtomaireRegioMap";
			attribute<string>                                                 Key                                                                  := string(UrbanY2010) + "_" + string(UrbanY2020) + "_" + string(UrbanY2030) + "_" + string(UrbanY2040)+ "_" + string(UrbanY2050)+ "_" + string(UrbanY2060)+ "_" + string(UrbanY2070)+ "_" + string(UrbanY2080)+ "_" + string(UrbanY2090)+ "_" + string(UrbanY2100);
			attribute<Classifications/AnalysisUrbNotUrb/CombinationUrbNotUrb> CombinationUrbNotUrb_rel                                             := rlookup(Key, Classifications/AnalysisUrbNotUrb/CombinationUrbNotUrb/key);
			attribute<uint16>                                                 nroccurrence (Classifications/AnalysisUrbNotUrb/CombinationUrbNotUrb):= pcount(CombinationUrbNotUrb_rel);
		}
	}
	
// 		unit<uint32> OverlayRegios2: nrofrows = 2
// 		{
// 			attribute<string> namen: ['CD','UrbStart'];
// 			attribute<string> namen_rev := namen[uint32(#.)-ID(.)-1u];
// 		}

// 		container OverlayGrids2
// 		{
// 			attribute<uint2> CD (CompactedDomain)
// 			:=  CompactedDomain/CD[uint2];
// 			attribute<uint2> UrbStart (CompactedDomain)
// 			:=  Input/UrbanArea/UrbanArea2010/ReadData[CompactedDomain/domain_rel][uint2];
// 		}

// 		unit<uint16> UrbanOverlay := overlay(OverlayRegios2/namen_rev, CompactedDomain, OverlayGrids2)
// 		{
// 		}
}